/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 2002 Adolf Petig GmbH & Co. KG
 *  written by Jacek Jakubowski, Christof Petig, Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// $Id: Bindung_sql.pgcc,v 1.6 2003/01/08 09:46:57 christof Exp $

#include "Bindung.hh"
#include <Misc/Transaction.h>
exec sql include sqlca;

Bindung::Bindung(const ID i) throw(SQLerror) : id(i)
{
 exec sql begin declare section;
 int BID=i;
 char NAME[20];
 int FID;
 char DATA[30];
 int INAME, IDATA;
 exec sql end declare section;
 
 exec sql select name into :NAME:INAME from webang_bindung 
 	where id= :BID;
 SQLerror::test(__FILELINE__":Bindung: select from webang_bindung");
 
 name = INAME ? "" : NAME;
 
 exec sql declare BINDEFUNC cursor for
 	select fid, data from webang_bindfunc where bid= :BID;
 Transaction tr;
 exec sql open BINDEFUNC;
 SQLerror::test(__FILELINE__":Bindung: open BINDEFUNC");
 
 while(1)
   {exec sql fetch in BINDEFUNC into :FID, :DATA:IDATA;
    SQLerror::test(__FILELINE__":Bindung: fetch BINDEFUNC","BINDEFUNC",100);
    
    if(sqlca.sqlcode==100) break;

    ef[(ExtraFunc)FID]= IDATA ? "" : DATA;
   }

 exec sql close BINDEFUNC;
 tr.commit();
}

void Bindungsliste::Load()
{  exec sql begin declare section;
   int ID[20];
   char NAME[20][17];
   exec sql end declare section;

   exec sql declare bindungen cursor for
   	select id,name from webang_bindung 
   	where id is not null and name is not null
   	order by name;
   Transaction tr;
   exec sql open bindungen;
   SQLerror::test(__FILELINE__ "select from webang_bindung",100);
   while (! sqlca.sqlcode)
   {  exec sql fetch 20 from bindungen into :ID,:NAME;
      SQLerror::test(__FILELINE__ "fetch from webang_bindung",100);
      if (sqlca.sqlcode) break;
      unsigned int lines=sqlca.sqlerrd[2];
      for (unsigned int i=0;i<lines;++i) add(Bindung(NAME[i], ID[i]));
      if (lines<20) break;
   }
   exec sql close bindungen;
   tr.commit();
}
