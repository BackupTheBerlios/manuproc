// $Id: dbconnect.pgcc,v 1.15 2003/09/10 15:04:21 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Misc/dbconnect.h>
#include <ManuProCConfig.h>
#include <cstdlib>
#include <cstdio>
#include <unistd.h>
#include <Misc/string0.h>
#ifdef OLD_ECPG
#define ECPGdo300
#else
#define ECPGdo300 0,1,
#endif

#ifdef __MINGW32__
extern "C" { int snprintf(char *str, size_t size, const  char  *format, ...); }
#endif

ManuProC::Connection::Connection(const std::string &h, const std::string &d, const std::string &u,const std::string &n)
        	: host(h), dbase(d), user(u), name(n)
{
   std::string host_=DEFAULT_DBHOST;
   std::string db_=DEFAULT_DB;

   char *h_opt(getenv("PGHOST"));
   char *d_opt(getenv("PGDATABASE"));
   if(h_opt) host_=h_opt;
   if(d_opt) db_=d_opt;

   if(host.empty())  host=host_;
   if(dbase.empty()) dbase=db_;
}        	



void ManuProC::dbconnect(const Connection &c) throw(SQLerror)
{  exec sql begin declare section;
   char connstr[80];
   char NAME[80];
   exec sql end declare section;

   std::string host=c.Host();
   std::string db=c.Dbase();

   if(!c.Name().empty()) strncpy0(NAME,c.Name().c_str(),sizeof NAME);
   else strncpy0(NAME,db.c_str(),sizeof NAME);

#ifndef __MINGW32__
  if (host=="localhost") strncpy0(connstr,db.c_str(),sizeof connstr);
  else 
#endif
#if 0  
     snprintf0(connstr,sizeof connstr,"tcp:postgresql://%s/%s",host.c_str(),db.c_str());
#else     
     snprintf0(connstr,sizeof connstr,"%s@%s",db.c_str(),host.c_str());
#endif     
   
   char *opt(getenv("SQLOPT"));
   if (!opt) {} 
   else if (!strcmp(opt,"-X"))
   {  char fname[200];
      snprintf(fname,sizeof fname,"%s.sqllog",NAME);
      FILE *f=fopen(fname,"w");
      ECPGdebug(1,f);
   } 
   else if (!strcmp(opt,"-E"))
   {  ECPGdebug(1,stderr);
   }
   exec sql connect to :connstr as :NAME;
   SQLerror::test("dbconnect");
   exec sql at :NAME set autocommit to on;
   SQLerror::test("dbconnect,autocommit");
//   exec sql at :NAME set datestyle to 'ISO';
//   SQLerror::test("dbconnect,datestyle=ISO");
   // actually current ecpg accepts this
   // ex ec sql at :NAME set datestyle to 'ISO';
   { ECPGdo(__LINE__, ECPGdo300 NAME, "set datestyle to 'ISO'", 
	ECPGt_EOIT, ECPGt_EORT);}
   SQLerror::test("dbconnect,datestyle=ISO");
}

void ManuProC::dbdisconnect(const std::string &name) throw(SQLerror)
{  if (name.empty()) 
   {  exec sql disconnect; }
   else 
   {  exec sql begin declare section;
      const char *NAME;
      exec sql end declare section;
      NAME=name.c_str();
      
      exec sql disconnect :NAME;
      SQLerror::test("dbdisconnect");
   }
}

void ManuProC::dbdefault(const std::string &name) throw(SQLerror)
{  exec sql begin declare section;
   const char *NAME;
   exec sql end declare section;
   if (name.empty()) NAME=DEFAULT_DB;
   else NAME=name.c_str();
   
   exec sql set connection to :NAME;
   SQLerror::test("dbdefault");
}

void ManuProC::dbconnect_nt(const Connection &c) throw()
{  try { dbconnect(c); }
   catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
}

void ManuProC::dbdisconnect_nt(const std::string &name) throw()
{  try { dbdisconnect(name); }
   catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
}

void ManuProC::setDTstyle(char *style) throw(SQLerror)
{
 exec sql begin declare section;
 char ST[80];
 exec sql end declare section;
 
 snprintf0(ST,sizeof ST,"set datestyle to '%s'",style);
 exec sql execute immediate :ST;
 // later ??
/* exec sql at petigdb set datestyle to :ST; */
 SQLerror::test("Datumsformat setzen");
}

