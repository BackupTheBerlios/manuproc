// $Id: Artikelpreis_sql.pgcc,v 1.7 2002/05/09 12:45:59 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include "Artikel/Artikelpreis.h"
//#include <Artikel/Misc.h>
#include <Aux/CacheStatic.h>
#include <Artikel/ArtikelBaum.h>
#include <Artikel/Prozesspreis.h>
exec sql include sqlca;

namespace // index_t and payload_t should not be globally visible
{

struct index_t
{  Kunde::ID liste;
   ArtikelBase::ID art;
   index_t(Kunde::ID l, ArtikelBase::ID a) : liste(l), art(a) {} 
   bool operator==(const index_t &b) const 
   { return liste==b.liste && art==b.art; }
   bool operator<(const index_t &b) const 
   { return liste<b.liste || (liste==b.liste && art<b.art); }
};

struct payload_t
{  Preis preis;
   bool errechnet;
   payload_t(const Preis &p,bool e=true)
   	: preis(p), errechnet(e) {}
   payload_t() : errechnet(false) {}
};

typedef CacheStatic<index_t,payload_t> cache_t;

static cache_t cache;

Artikelpreis::Artikelpreis(const PreisListe::ID liste,const ArtikelBase &a)
	: errechnet(false), gefunden(false)
{  payload_t *cached=cache.lookup(index_t(liste,a.Id()));
   if (cached) { setPreis(cached->preis,cached->errechnet); }
   else
   {  exec sql begin declare section;
      int artikelid=a.Id();
      int kundennr=liste;
      double preis;
      double preismenge;
      int waehrung;
      exec sql end declare section;
      
      exec sql select preis, coalesce(preismenge,1), waehrung
      	into :preis, :preismenge, :waehrung
      	from artikelpreise
      	where artikelid=:artikelid and kundennr=:kundennr;
      SQLerror::test(__FILELINE__,100);
      if (!sqlca.sqlcode) 
         setPreis(Preis(preis, Waehrung::ID(waehrung), preismenge),false);
         
      cache.Register(index_t(liste,a.Id()), payload_t(getPreis(),istErrechnet()));
   }
}

void Artikelpreis::UnCache(const PreisListe::ID liste,const ArtikelBase &ab)
{  cache.deregister(index_t(liste,ab.Id()));
};

Artikelpreis::Artikelpreis(const cH_Kunde &k,const ArtikelBase &a)
	: errechnet(false), gefunden(false)
{  Artikelpreis ap=Artikelpreis(k->preisliste(), a);
   if (ap.Gefunden()) { *this=ap; return; }
#if 0   
   for (list<PreisListe::ID>::const_iterator i=k->Sonderpreislisten()->begin();
   
#endif

   // oder für alle?   	
#ifdef PETIG_EXTENSIONS // errechnen
         Preis p;
         ArtikelBaum AB(a);
         for (ArtikelBaum::const_iterator i=AB.begin(); i!=AB.end(); ++i)
         {  p+= Prozesspreis(liste, (*i).erzeugung->Id()) 
         	+ (*i).menge * Artikelpreis(k, (*i).rohartikel);
         }
         setPreis(p,true);
#endif         
}

};
