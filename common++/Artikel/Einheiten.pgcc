// $Id: Einheiten.pgcc,v 1.9 2002/02/08 21:47:14 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 2001 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

exec sql include sqlca;

#include <Artikel/Einheiten.h>
#include <Artikel/ArtikelStamm.h>
#include <Aux/SQLerror.h>
#include <Aux/Transaction.h>

Einheit::cache_t Einheit::cache;

Einheit::Einheit(const ArtikelBase &ab) throw(SQLerror)
{   *this=ArtikelStamm(ab).getEinheit();
}

Einheit::operator std::string() const
{  std::string a=StueckEinheit(),
	b=MengenEinheit();
   if (!a.empty() && !b.empty()) return a+"*"+b;
   return a+b;
}

std::string Einheit::TeX() const
{  std::string a=StueckEinheit_TeX(),
	b=MengenEinheit_TeX();
   if (!a.empty() && !b.empty()) return a+"\\times{}"+b;
   return a+b;
}

Einheit::Einheit(ID id) : einh(id)
{  Einheit *cached=cache.lookup(id);
   if (cached) *this=*cached;
   else
   {  exec sql begin declare section;
      int eid=id;
      char bez_anz[60],tex_anz[60],bez_men[60],tex_men[60];
      exec sql end declare section;
      *bez_anz=*tex_anz=*bez_men=*tex_men=0;
      
      exec sql select 
      		coalesce(bez_anzahl,''),coalesce(tex_anzahl,bez_anzahl,''),
	      	coalesce(bez_menge,''),coalesce(tex_menge,bez_menge,'')
	into :bez_anz, :tex_anz, :bez_men, :tex_men
      	from einheiten
      	where id=:eid;
      SQLerror::test(__FILELINE__, 100);
      if (!sqlca.sqlcode) 
      {  bez_anzahl=bez_anz;
         tex_anzahl=tex_anz;
         bez_menge=bez_men;
         tex_menge=tex_men;
      }
      cache.Register(id,*this);
   }
}


std::vector<Einheit> Einheit::alleEinheiten()
{
 std::vector<Einheit> V;
 exec sql begin declare section;
   int db_id;
 exec sql end declare section;
 exec sql declare einheitc cursor for 
   select id from einheiten;
 Transaction tr;
 exec sql open einheitc;
 while(true)
  {
   exec sql fetch einheitc into :db_id;
   SQLerror::test(__FILELINE__, 100);
   if (sqlca.sqlcode) break;
   V.push_back(Einheit(Einheit::ID(db_id)));
  }
 return V;
}

