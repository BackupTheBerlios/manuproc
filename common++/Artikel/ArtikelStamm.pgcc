// $Id: ArtikelStamm.pgcc,v 1.30 2003/03/24 10:23:02 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Artikel/ArtikelStamm.h>
#include <Artikel/ArtikelBezeichnung.h>
#include <Instanzen/ppsInstanz.h>
#include <Misc/Trace.h>
#include <Misc/FetchIStream.h>

ArtikelStamm::cache_t ArtikelStamm::cache;

FetchIStream &operator>>(FetchIStream &is, ArtikelTypID::enum_t &e)
{  e = ArtikelTypID::enum_t(is.Fetch<int>());
   return is;
}

FetchIStream &operator>>(FetchIStream &is, Einheit &e)
{  e = Einheit(Einheit::ID(is.Fetch<int>()));
   return is;
}

ArtikelStamm::ArtikelStamm(const ArtikelBase &ab)  throw (SQLerror)
	: art(ab)
{
   ManuProC::Trace _t(trace_channel, __FUNCTION__,ab.Id());  
   payload_t *cached(cache.lookup(ab.Id()));
   if (cached) 
   {  payload=*cached;
      return;
   }
   int ieinheit=0;

   Query q("select warengruppe,coalesce(internwarengruppe,warengruppe),"
	"bestellen_bei,defaultschema,einheit"
#ifdef MABELLA_EXTENSIONS	
	",mindbestand"
#endif
	" from artikelstamm where id=?");
   q << ab.Id();
   FetchIStream is=q.FetchOne();
   is >> payload.typ >> payload.interntyp
      >> FetchIStream::MapNull<cH_ppsInstanz>(payload.bestellen_bei,ppsInstanzID::None)
      >> FetchIStream::MapNull<ExtBezSchema_ID>(payload.defaultschema,1)
      >> FetchIStream::WithIndicator(payload.einh,ieinheit)
#ifdef MABELLA_EXTENSIONS
      >> FetchIStream::MapNull<int>(payload.mindbest,NO_CHECK)
#endif
      ;
      
   if (ieinheit) 
   {  payload.einh=EinheitID::St_;

#if defined(PETIG_EXTENSIONS) && defined(MANUPROC_DYNAMICENUMS_CREATED)
      switch(payload.interntyp)
      {  case ArtikelTypID::Jumborollen:
            payload.einh=EinheitID::m; break;
         
         case ArtikelTypID::Band:
            {  cache.Register(ab.Id(),payload); 
               // since ArtikelBaum tries to read bestellen_bei
               // we would loop forever if not registered here
               cH_ArtikelBezeichnung AB(ab);
               // this is because Prozess_sql.pgcc is mad (Jumbo = 1m)
               if (!AB->Jumbo()) payload.einh=EinheitID::St_;
               else payload.einh=EinheitID::m;
               break;
            }

         case ArtikelTypID::Garn:
            payload.einh=EinheitID::kg; break;
         
         case ArtikelTypID::Lohn:
            payload.einh=EinheitID::Fd_km; break;
            
         default: ; // Stueck
      }
#endif      

   }
   cache.Register(ab.Id(),payload);
}

void ArtikelStamm::set_BestellenBei(const ArtikelBase &artikel,const ppsInstanz::ID instanz)
{
  Query("update artikelstamm set stand=now(),bestellen_bei=? "
  	"where id=? and (bestellen_bei!=? or bestellen_bei is null)").lvalue()
  	<< Query::NullIf<ppsInstanz::ID>(instanz,ppsInstanzID::None)
  	<< artikel.Id() 
  	<< instanz;
  SQLerror::test(__FILELINE__,100);

  // Und nun noch raus aus dem Cache
  cache.deregister(artikel.Id());
}

void ArtikelStamm::setEinheit(const ArtikelBase &artikel,const Einheit e)
{
  Query("update artikelstamm set stand=now(),einheit=? "
  	"where id=? and (einheit!=? or einheit is null)").lvalue()
  	<< e.Id()
  	<< artikel.Id() 
  	<< e.Id();
  SQLerror::test(__FILELINE__,100);

  // Und nun noch raus aus dem Cache
  cache.deregister(artikel.Id());
}


void ArtikelStamm::setAktive(const ArtikelBase &artikel, bool ak) throw(SQLerror)
{ Query("update artikelstamm set stand=now(),aktiv=? where id=?").lvalue()
  	<< ak << artikel.Id();
  SQLerror::test(__FILELINE__,100);

  cache.deregister(artikel.Id());
}

bool ArtikelStamm::getAktive() const throw(SQLerror)
{  return (Query("select aktiv from artikelstamm where id=?") << art.Id())
	.FetchOne<bool>();
}


void ArtikelStamm::setMindBest(int mb) throw(SQLerror)
{ Query("update artikelstamm set stand=now(),mindbestand=? where id=?").lvalue()
  	<< Query::NullIf<int>(mb,NO_CHECK) << art.Id();
  SQLerror::test(__FILELINE__,100);

 cache.deregister(art.Id());
}


const UniqueValue::value_t ArtikelStamm::trace_channel
      = ManuProC::Tracer::channels.get();

const int ArtikelStamm::NO_CHECK;
