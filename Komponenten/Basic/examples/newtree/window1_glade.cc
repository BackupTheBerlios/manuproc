// generated 2002/12/11 11:53:36 CET by christof@puck.petig-baender.de
// using glademm V1.1.3c_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- newtree.glade
// for gtk 2.0.9 and gtkmm 2.0.1
//
// Please modify the corresponding derived classes in ././window1.cc

#include "config.h"
#include "window1_glade.hh"
#include <gtkmm/image.h>
#include <gdkmm/pixbufloader.h>

static const unsigned char _data[] = 
{       
};

#include <gtkmm/label.h>
#include <gtkmm/box.h>
#include <gtkmm/alignment.h>
#include <gtkmm/button.h>
#include <gtkmm/buttonbox.h>

window1_glade::window1_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  window1 = this;
   scrolledwindow1 = manage(new class Gtk::ScrolledWindow());
   
   Glib::RefPtr<Gdk::PixbufLoader> _image1_loader=Gdk::PixbufLoader::create();
   _image1_loader->write(_data, sizeof _data);
   _image1_loader->close();
   
   Gtk::Image *image1 = manage(new class Gtk::Image(Gtk::StockID("gtk-add"), Gtk::IconSize(4)));
   Gtk::Label *label1 = manage(new class Gtk::Label("Dazu"));
   Gtk::HBox *hbox1 = manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment1 = manage(new class Gtk::Alignment());
   Gtk::Button *button1 = manage(new class Gtk::Button());
   Glib::RefPtr<Gdk::PixbufLoader> _image4_loader=Gdk::PixbufLoader::create();
   _image4_loader->write(_data, sizeof _data);
   _image4_loader->close();
   
   Gtk::Image *image4 = manage(new class Gtk::Image(Gtk::StockID("gtk-delete"), Gtk::IconSize(4)));
   Gtk::Label *label4 = manage(new class Gtk::Label("Weg"));
   Gtk::HBox *hbox4 = manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment4 = manage(new class Gtk::Alignment());
   Gtk::Button *button2 = manage(new class Gtk::Button());
   Glib::RefPtr<Gdk::PixbufLoader> _image3_loader=Gdk::PixbufLoader::create();
   _image3_loader->write(_data, sizeof _data);
   _image3_loader->close();
   
   Gtk::Image *image3 = manage(new class Gtk::Image(Gtk::StockID("gtk-refresh"), Gtk::IconSize(4)));
   Gtk::Label *label3 = manage(new class Gtk::Label("refresh"));
   Gtk::HBox *hbox3 = manage(new class Gtk::HBox(false, 2));
   Gtk::Alignment *alignment3 = manage(new class Gtk::Alignment());
   Gtk::Button *button3 = manage(new class Gtk::Button());
   Gtk::HButtonBox *hbuttonbox1 = manage(new class Gtk::HButtonBox(Gtk::BUTTONBOX_DEFAULT_STYLE, 4));
   Gtk::VBox *vbox1 = manage(new class Gtk::VBox(false, 0));
   scrolledwindow1->set_flags(Gtk::CAN_FOCUS);
   scrolledwindow1->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   image1->set_alignment(0.5,0.5);
   image1->set_padding(0,0);
   label1->set_alignment(0.5,0.5);
   label1->set_padding(0,0);
   label1->set_justify(Gtk::JUSTIFY_LEFT);
   label1->set_line_wrap(false);
   label1->set_use_markup(false);
   hbox1->pack_start(*image1, Gtk::PACK_SHRINK, 0);
   hbox1->pack_start(*label1, Gtk::PACK_SHRINK, 0);
   alignment1->add(*hbox1);
   button1->set_flags(Gtk::CAN_FOCUS);
   button1->set_relief(Gtk::RELIEF_NORMAL);
   button1->add(*alignment1);
   image4->set_alignment(0.5,0.5);
   image4->set_padding(0,0);
   label4->set_alignment(0.5,0.5);
   label4->set_padding(0,0);
   label4->set_justify(Gtk::JUSTIFY_LEFT);
   label4->set_line_wrap(false);
   label4->set_use_markup(false);
   hbox4->pack_start(*image4, Gtk::PACK_SHRINK, 0);
   hbox4->pack_start(*label4, Gtk::PACK_SHRINK, 0);
   alignment4->add(*hbox4);
   button2->set_flags(Gtk::CAN_FOCUS);
   button2->set_relief(Gtk::RELIEF_HALF);
   button2->add(*alignment4);
   image3->set_alignment(0.5,0.5);
   image3->set_padding(0,0);
   label3->set_alignment(0.5,0.5);
   label3->set_padding(0,0);
   label3->set_justify(Gtk::JUSTIFY_LEFT);
   label3->set_line_wrap(false);
   label3->set_use_markup(false);
   hbox3->pack_start(*image3, Gtk::PACK_SHRINK, 0);
   hbox3->pack_start(*label3, Gtk::PACK_SHRINK, 0);
   alignment3->add(*hbox3);
   button3->set_flags(Gtk::CAN_FOCUS);
   button3->set_relief(Gtk::RELIEF_NORMAL);
   button3->add(*alignment3);
   hbuttonbox1->pack_start(*button1);
   hbuttonbox1->pack_start(*button2);
   hbuttonbox1->pack_start(*button3);
   vbox1->pack_start(*scrolledwindow1);
   vbox1->pack_start(*hbuttonbox1, Gtk::PACK_SHRINK, 0);
   window1->set_title("window1");
   window1->set_modal(false);
   window1->property_window_position().set_value(Gtk::WIN_POS_NONE);
   window1->set_resizable(true);
   window1->add(*vbox1);
   scrolledwindow1->show();
   image1->show();
   label1->show();
   hbox1->show();
   alignment1->show();
   button1->show();
   image4->show();
   label4->show();
   hbox4->show();
   alignment4->show();
   button2->show();
   image3->show();
   label3->show();
   hbox3->show();
   alignment3->show();
   button3->show();
   hbuttonbox1->show();
   vbox1->show();
   window1->show();
   button1->signal_clicked().connect(SigC::slot(*this, &window1_glade::add_one));
   button2->signal_clicked().connect(SigC::slot(*this, &window1_glade::eine_weg));
   button3->signal_clicked().connect(SigC::slot(*this, &window1_glade::refresh));
}

window1_glade::~window1_glade()
{  
}
