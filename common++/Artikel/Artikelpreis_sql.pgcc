// $Id: Artikelpreis_sql.pgcc,v 1.8 2002/06/20 06:29:52 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include "Artikel/Artikelpreis.h"
//#include <Artikel/Misc.h>
#include <Aux/CacheStatic.h>
#include <Artikel/ArtikelBaum.h>
#include <Artikel/Prozesspreis.h>
#include <Aux/Transaction.h>
exec sql include sqlca;

namespace // index_t and payload_t should not be globally visible
{

struct index_t
{  Kunde::ID liste;
   ArtikelBase::ID art;
   index_t(Kunde::ID l, ArtikelBase::ID a) : liste(l), art(a) {} 
   bool operator==(const index_t &b) const 
   { return liste==b.liste && art==b.art; }
   bool operator<(const index_t &b) const 
   { return liste<b.liste || (liste==b.liste && art<b.art); }
};

struct payload_t
{  Preis preis;
   bool errechnet;
   payload_t(const Preis &p,bool e=true)
   	: preis(p), errechnet(e) {}
   payload_t() : errechnet(false) {}
};

typedef CacheStatic<index_t,payload_t> cache_t;

static cache_t cache;

Artikelpreis::Artikelpreis(const PreisListe::ID liste,const ArtikelBase &a)
	: errechnet(false), gefunden(false), gefunden_in(ManuProcEntity::none_id)
{  payload_t *cached=cache.lookup(index_t(liste,a.Id()));
   if (cached) { setPreis(a.Id(),cached->preis,liste,cached->errechnet); }
   else
   {  exec sql begin declare section;
      int ARTIKELID=a.Id();
      int kundennr=liste;
      double preis;
      double preismenge;
      int waehrung;
      exec sql end declare section;
      
      exec sql select preis, coalesce(preismenge,1), waehrung
      	into :preis, :preismenge, :waehrung
      	from artikelpreise
      	where artikelid=:ARTIKELID and kundennr=:kundennr;
      SQLerror::test(__FILELINE__,100);
      if (!sqlca.sqlcode) 
         setPreis(ARTIKELID,Preis(preis, Waehrung::ID(waehrung), preismenge),liste,false);
         
      cache.Register(index_t(liste,a.Id()), payload_t(getPreis(),istErrechnet()));
   }
}

void Artikelpreis::UnCache(const PreisListe::ID liste,const ArtikelBase &ab)
{  cache.deregister(index_t(liste,ab.Id()));
};

Artikelpreis::Artikelpreis(const cH_Kunde &k,const ArtikelBase &a)
	: errechnet(false), gefunden(false), gefunden_in(ManuProcEntity::none_id)
{  Artikelpreis ap;

   for (std::list<pair<int,PreisListe::ID> >::const_reverse_iterator i=k->Preislisten().rbegin();
   	i!=k->Preislisten().rend();++i)
   {  ap=Artikelpreis(i->second,a);
      if (ap.Gefunden()) { *this=ap; return; }
   }

   // oder für alle?   	
#ifdef PETIG_EXTENSIONS // errechnen
         Preis p;
         ArtikelBaum AB(a);
         for (ArtikelBaum::const_iterator i=AB.begin(); i!=AB.end(); ++i)
         {  p+= Prozesspreis(k->preisliste(), (*i).erzeugung->Id()) 
         	+ (*i).menge * Artikelpreis(k, (*i).rohartikel);
         }
         setPreis(a.Id(),p,ManuProcEntity::none_id,true);
#endif         
}


const Artikelpreis Artikelpreis::create(const PreisListe::ID liste,
		const Preis &p, const ArtikelBase &a) throw(SQLerror)
{
 exec sql begin declare section;
 int ARTIKELID;
 float PREIS;
 int PREISMENGE;
 int PRLSID;
 int WAEHRUNG;
 exec sql end declare section;

 Transaction tr;
 
 ARTIKELID=a.Id();
 PREIS=p.Wert();
 PREISMENGE=p.PreisMenge();
 PRLSID=liste;
 WAEHRUNG=p.getWaehrung()->Id();
 
 exec sql insert into artikelpreise 
 	(artikelid,kundennr,preis,preismenge,waehrung) values
 	(:ARTIKELID,:PRLSID,:PREIS,:PREISMENGE,:WAEHRUNG);
 SQLerror::test(__FILELINE__);	
 
 tr.commit();
 
 return Artikelpreis(liste,a);
}


void Artikelpreis::changePreis(const Preis &p) throw(SQLerror)
{
 exec sql begin declare section;
 int ARTIKELID=artikel;
 float PREIS=p.Wert();
 int PREISMENGE=p.PreisMenge();
 int PRLSID=gefunden_in;
 int WAEHRUNG=p.getWaehrung()->Id();
 exec sql end declare section;

 if(gefunden_in == PreisListe::none_id) return;

 Transaction tr;
 
 exec sql update artikelpreise set
 	preis=:PREIS,preismenge=:PREISMENGE,
	waehrung =:WAEHRUNG
	where (artikelid,kundennr)=(:ARTIKELID,:PRLSID);
 SQLerror::test(__FILELINE__);	
 
 tr.commit();
 getPreis()=p;
}

void Artikelpreis::remove(const PreisListe::ID liste,const ArtikelBase &a) throw(SQLerror)
{
 exec sql begin declare section;
  int ARTIKELID=a.Id();
  int PRLSID=liste;
 exec sql end declare section;
 exec sql delete from artikelpreise 
	where kundennr=:PRLSID and artikelid=:ARTIKELID;
 SQLerror::test(__FILELINE__);	
}

};
