// $Id: AufEintragBase_sql.pgcc,v 1.16 2001/12/23 21:42:15 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Auftrag/AufEintragBase.h>
#include <Auftrag/AuftragsBaum.h>
#include <stdio.h>
#include <Aux/string0.h>
#include <Aux/Transaction.h>
#include "auftrag_status.h"
#include <Aux/Changejournal.h>
#include "selFullAufEntry.h"
#include <Auftrag/AuftragsEntryZuordnung.h>

exec sql include sqlca;

void AufEintragBase::setStatus(AufStatVal _status) throw(SQLerror)
{exec sql begin declare section;
 int AUFTRAGID = auftragid;
 int INSTANZ=instanz->Id();
 int ZEILENNR = zeilennr;
 int STATUS=_status;
 exec sql end declare section;

// Braucht man die Warnung noch? 14.11.2001 MAT
#warning was ist mit status (Auftragsstatus), kann das ignoriert werden?
 if(entrystatus == CLOSED) return; // nichts geht mehr
 if(_status == UNCOMMITED) return; // zurück geht nicht, nur vor
 if(entrystatus == _status) return;     // nichts geändert

#warning Das kann nicht mehr vorkommen MAT 5.12.01 und darf weg, oder?
 if(_status == OPEN && entrystatus != UNCOMMITED) return; // nur UNCOMMITED->OPEN

 Transaction tr; 
 exec sql lock auftragentry in exclusive mode;
 SQLerror::test("setStatus: lock table auftragentry");
  
 
 exec sql update auftragentry set status= :STATUS
	where auftragid= :AUFTRAGID and zeilennr= :ZEILENNR 
   and instanz =:INSTANZ;
 SQLerror::test("setStatus: update auftragentry");

 if(STATUS==OPEN && status==UNCOMMITED)
    setStatusAuftragBase(_status);

 // Status für die Instanzen setzen
 setInstanzen(_status,getLieferdatum(),getStueck());

 if(_status==OPEN)
  {try 
   {
    pps_ChJournalEntry::newChange(
			instanz,
			AufEintragBase2(instanz,AUFTRAGID,ZEILENNR),
			artikel,
			(double)bestellt,
			(double)bestellt,
			pps_ChJournalEntry::CH_MENGE);
   }
   catch(SQLerror &e)
     {tr.rollback(); throw; }
  }
 else if(_status==CLOSED && entrystatus!=UNCOMMITED) 
 // UNCOMMITED->CLOSED => kein Eintrag
  {try 
   {
    pps_ChJournalEntry::newChange(
			instanz,
			AufEintragBase2(instanz,AUFTRAGID,ZEILENNR),
			artikel,
			(double)geliefert,
			(double)geliefert-bestellt,
			pps_ChJournalEntry::CH_MENGE);
   }
   catch(SQLerror &e)
     {tr.rollback(); throw; }
  } 

 entrystatus=(AufStatVal)STATUS;
 tr.commit(); 
}

void AufEintragBase::setInstanzen(AufStatVal status,Petig::Datum lieferdate,mengen_t Menge,int myznr,int yourznr)
{
 std::list<AufEintragZu::st_reflist> KindListe = AufEintragZu(*this).get_Referenz_list(*this,true);
 for(std::list<AufEintragZu::st_reflist>::const_iterator i=KindListe.begin();i!=KindListe.end();++i)
  {
    ArtikelBaum::menge_t f=ArtikelBaum(artikel).Faktor(i->AB);
    mengen_t M=Menge*f;    
cout << "setStatusInstanz: Ich bin  : "<<Instanz()<<' '<<Id()<<' '<<ZNr()<<'\t';
cout << " Kinde ist: "<<i->AEB2.Instanz()<<' '<<i->AEB2.Id()<<' '<<i->AEB2.ZNr()<<'\n';
   AufEintragBase AEB(i->AEB2);
   // AufEintrag splitten und Anlegen in der Zuordnungsliste
   int znr=0,newznr=0; long menge=0;
   if(!i->AEB2.existEntry(i->AB,lieferdate,znr,newznr,menge,status))
     {
cout << "DEBUG 2\n";
      znr=AEB.insertNewEntry(M,lieferdate,i->AB,status,Preis(),0,false);
      if(Instanz()==ppsInstanz::INST_KNDAUF) 
            AufEintragZu(*this).setKindZnr(AEB,znr);
      else 
         {
            AufEintragZu(*this).AuftragsEntryZuordnung(M,AEB,znr,myznr);
//            AufEintragZu(*this).setMenge(i->Menge-M,AEB,AEB.ZNr());
            AufEintragZu(*this).setMengeDiff(-M,AEB,AEB.ZNr());
         }
cout << "DEBUG 3\n";
     }
   else
     {
//cout << "existEntry :"<<myznr<<' '<<yourznr<<' '<<znr<<' '<<newznr<<'\n';
      AufEintragBase(class AufEintragBase2(AEB,znr)).updateStk(menge+M,false);
      if(Instanz()==ppsInstanz::INST_KNDAUF) 
            AufEintragZu(*this).setKindZnr(AEB,znr);
      else 
         {
//cout<<"Reduce:   "<<Id()<<' '<<ZNr()<<'\t'<<AEB.Id()<<' '<<AEB.ZNr()<<'\t'<<i->Menge<<'\n';
            AufEintragZu(*this).setMengeDiff(-M,AEB,AEB.ZNr());
//cout<<"Increase: "<<Id()<<' '<<myznr<<'\t'<<AEB.Id()<<' '<<znr<<'\n';
            if(!AufEintragZu(class AufEintragBase2(*this,myznr)).setMengeDiff(M,AEB,znr))
                AufEintragZu(class AufEintragBase2(*this,myznr)).AuftragsEntryZuordnung(M,AEB,znr);
         }
     }
   AEB.updateStk(AEB.getStueck()-M,false);
   AufEintragBase(i->AEB2).setInstanzen(status,lieferdate,M,znr,newznr);
  }
}


void AufEintragBase::updateStk(long stk,bool instanz) throw(SQLerror)
{
 if(status==OPEN || status==UNCOMMITED)
  {
   Transaction tr;
   exec sql lock auftragentry in exclusive mode;
   SQLerror::test("updateStk: lock table auftragentry");

   AufEintragBase2::updateStk(stk,stk-bestellt,artikel,status);
   if(instanz) updateStkInstanz(stk,bestellt);
   bestellt=stk;
   tr.close();
  }
}

void AufEintragBase::updateStkInstanz(long neu_stk,long alt_stk) throw(SQLerror)
{
  std::list<AufEintragZu::st_reflist> KindListe = AufEintragZu(*this).get_Referenz_list(*this,true);
  for(std::list<AufEintragZu::st_reflist>::const_iterator i=KindListe.begin();i!=KindListe.end();++i)
   {
     AufEintragBase AEB(i->AEB2);
     ArtikelBaum::menge_t faktor = ArtikelBaum(ArtId()).Faktor(i->AB);
//cout << i->AEB2.Instanz()<<' '<<i->AEB2.ZNr()<<'\t';
//cout << i->Menge<<' '<<AEB.getStueck()<<' '<<getStueck()*faktor<<' '<<alt_stk*faktor<<' '<<neu_stk*faktor<<' '<<'\n';
     long neue_menge=long(neu_stk*faktor+0.5);
     long alte_menge=long(alt_stk*faktor+0.5);
     AEB.updateStk(AEB.getStueck()+neue_menge-alte_menge,true);
     AufEintragZu(*this).setMengeDiff(-long(i->Menge-neu_stk*faktor+.5),i->AEB2,i->AEB2.ZNr());
   }
}


void AufEintragBase::updatePreis(const Preis &pr) throw(SQLerror)
{exec sql begin declare section;
 int AUFTRAGID = auftragid;
 int ZEILENNR = zeilennr;
 int INSTANZ=instanz->Id();
 float PREIS=pr.Wert();
 float PREISMENGE=pr.PreisMenge();
 exec sql end declare section;
 
 exec sql update auftragentry 
 	set preis= :PREIS, preismenge= :PREISMENGE
 	where auftragid= :AUFTRAGID and zeilennr= :ZEILENNR
   and instanz=:INSTANZ;
 SQLerror::test("updatePreis: update preis in auftragentry");
 preis=pr;
}


void AufEintragBase::updateRabatt(int rb) throw(SQLerror)
{exec sql begin declare section;
 int AUFTRAGID = auftragid;
 int INSTANZ=instanz->Id();
 int ZEILENNR = zeilennr;
 int RABATT = rb;
 exec sql end declare section;

 exec sql update auftragentry set rabatt= :RABATT/100.0
 	where auftragid= :AUFTRAGID and zeilennr= :ZEILENNR
   and instanz=:INSTANZ;
 SQLerror::test("updateRabatt: update rabatt in auftragentry");
 
 rabatt=RABATT;
}


void AufEintragBase::updateLieferdatum(const Petig::Datum &ld) throw(SQLerror)
{exec sql begin declare section;
 int AUFTRAGID = auftragid;
 int INSTANZ=instanz->Id();
 int ZEILENNR = zeilennr;
 char LIEFERDATUM[21];
 exec sql end declare section;

 Transaction tr;
 exec sql lock auftragentry in exclusive mode;
 SQLerror::test("updateLieferdatum: lock table auftragentry");
  
 ld.write_postgres(LIEFERDATUM,sizeof LIEFERDATUM);
 
 exec sql update auftragentry set lieferdate= :LIEFERDATUM
 	where auftragid= :AUFTRAGID and zeilennr= :ZEILENNR
   and instanz=:INSTANZ;
 SQLerror::test("updateLiefDatum: update lieferdate in auftragentry");

 //update Lieferdatum für Instanzen
 setInstanzen(status,ld,getStueck());

 if(status==OPEN)
  {
   try 
    {
     pps_ChJournalEntry::newChange(
  			instanz,
  			AufEintragBase2(instanz,AUFTRAGID,ZEILENNR),
  			artikel,
  			ld,
  			(double)(ld-getLieferdatum()),
  			pps_ChJournalEntry::CH_LIEFDAT);
    }
   catch(SQLerror &e)
     {tr.rollback(); throw; }
  }
 
 lieferdatum=ld;
 tr.commit(); 
}

void AufEintragBase::split(int newmenge, const Petig::Datum &newld) throw(SQLerror)
{
 exec sql begin declare section;
 int AUFTRAGID=auftragid;
 int INSTANZ=instanz->Id();
 int ZEILENNR_OLD=zeilennr;
 long ARTIKELID=artikel.Id();
 long BESTELLT=newmenge;
 long BESTELLT_OLD=bestellt-newmenge;
 int STATUS=status;
 float PREIS = preis.Wert();
 int RABATT = rabatt;
 float PREISMENGE = preis.PreisMenge();
 int WAEHRUNG=preis.getWaehrung()->Id();

 int ZEILENNR;
 long GELIEFERT;
 long GELIEFERT_OLD;
 char LIEFERDATUM[21];
 exec sql end declare section;
 
 if(status==CLOSED) return;

 newld.write_postgres(LIEFERDATUM,sizeof LIEFERDATUM);
 
 if(lieferdatum>newld)
   {GELIEFERT=geliefert>BESTELLT ? (BESTELLT) : geliefert;
    GELIEFERT_OLD=geliefert>BESTELLT ? geliefert-BESTELLT : 0;}
 else
   {GELIEFERT_OLD=geliefert>BESTELLT_OLD ? (BESTELLT_OLD) : geliefert;
    GELIEFERT=geliefert>BESTELLT_OLD ? geliefert-BESTELLT_OLD : 0;}
    
 Transaction tr;
// exec sql lock auftragentry in share mode;
 // don't we need access exclusive mode???
 // what if two people split concurrently seperate lines - second will fail
 exec sql lock auftragentry in exclusive mode;
 SQLerror::test("split: lock table auftragentry");

 insertNewEntry(newmenge,newld,artikel,status,preis,rabatt,true);
 updateStk(bestellt-newmenge,true);
#warning WAS IST MIT DER GELIEFERTEN MENGE
 
/*   
 exec sql select (max(zeilennr))+1 into :ZEILENNR from auftragentry
	where auftragid= :AUFTRAGID and instanz =:INSTANZ;
 SQLerror::test("split: select max(zeielnnr) auftragentry");

 exec sql insert into auftragentry (auftragid, zeilennr, artikelid,
		bestellt, geliefert, lieferdate,
		status,preis,rabatt,preismenge, waehrung)
	values ( :AUFTRAGID, :ZEILENNR, :ARTIKELID,
		:BESTELLT, :GELIEFERT, :LIEFERDATUM,
		:STATUS, :PREIS, :RABATT/100.0,
		:PREISMENGE, :WAEHRUNG);
 SQLerror::test("split: insert into auftragentry");
*/
/*
 exec sql update auftragentry set bestellt= :BESTELLT_OLD,
	geliefert= :GELIEFERT_OLD
	where auftragid= :AUFTRAGID and zeilennr= :ZEILENNR_OLD
   and instanz=:INSTANZ;
 SQLerror::test("split: update auftragentry");
*/


 if(STATUS==OPEN)
   {
    try 
      {
       pps_ChJournalEntry::newChange(
    			instanz,
    			AufEintragBase2(instanz,AUFTRAGID,ZEILENNR_OLD),
    			ArtikelBase(ARTIKELID),
    			(double)BESTELLT_OLD,
    			(double)(BESTELLT_OLD-bestellt),
    			pps_ChJournalEntry::CH_MENGE);

       pps_ChJournalEntry::newChange(
    			instanz,
    			AufEintragBase2(instanz,AUFTRAGID,ZEILENNR),
    			ArtikelBase(ARTIKELID),
    			(double)BESTELLT,
    			(double)BESTELLT,
    			pps_ChJournalEntry::CH_MENGE);
      }
     catch(SQLerror &e)
       {tr.rollback(); throw; }
   }

 tr.commit();
}

AufEintragBase::AufEintragBase(const AufEintragBase2 &aebb) throw (SQLerror)
  : AufEintragBase2(aebb), 
    artikel(0),
    prozess(Prozess::default_id)
{
 try{
  SelectedFullAufList aufids((SQLFullAuftragSelector)
    (SQLFullAuftragSelector::sel_AufidZnr(aebb)));
  assert(aufids.aufidliste.size()==1);
  (*this)=aufids.aufidliste[0];
 } catch (SQLerror &e) {std::cerr << e <<'\n';}
}




