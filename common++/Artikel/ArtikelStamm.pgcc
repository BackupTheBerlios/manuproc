// $Id: ArtikelStamm.pgcc,v 1.47 2006/05/17 07:35:33 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Artikel/ArtikelStamm.h>
#include <Artikel/ArtikelBezeichnung.h>
#include <Instanzen/ppsInstanz.h>
#include <Misc/Trace.h>
#include <Misc/Query.h>
#include <unistd.h>

ArtikelStamm::cache_t ArtikelStamm::cache;

Query::Row &operator>>(Query::Row &is, ArtikelTypID::enum_t &e)
{  e = ArtikelTypID::enum_t(is.Fetch<int>());
   return is;
}
template<>
const Oid Query::NullIf_s<ppsInstanz::ID>::postgres_type=Query::NullIf_s<int>::postgres_type;
template<>
const Oid Query::NullIf_s<Einheit::ID>::postgres_type=Query::NullIf_s<int>::postgres_type;

Query::Row &operator>>(Query::Row &is, Einheit &e)
{  e = Einheit(Einheit::ID(is.Fetch<int>()));
   return is;
}

void ArtikelStamm::UnCache(ArtikelBase const& a)
{ cache.erase(a.Id());
#warning Propagate via Database Event?
}

ArtikelStamm::ArtikelStamm(const ArtikelBase &ab)  throw (SQLerror)
	: art(ab)
{
   ManuProC::Trace _t(trace_channel, __FUNCTION__,ab.Id());  
   payload_t *cached(cache.lookup(ab.Id()));
   if (cached) 
   {  payload=*cached;
      return;
   }
   int ieinheit=0;

   static PreparedQuery pq("select warengruppe,internwarengruppe,"
	"bestellen_bei,defaultschema,einheit,mindbestand,lagern_in "
	"from artikelstamm where id=?");
   Query q(pq);
   q << ab.Id();
   int lagern_in;
   Query::Row is=q.FetchOne();
   is >> payload.typ;
   is >> Query::Row::MapNull(payload.interntyp,payload.typ)
      >> Query::Row::MapNull(payload.bestellen_bei,ppsInstanzID::None)
      >> Query::Row::MapNull(payload.defaultschema,1)
      >> Query::Row::WithIndicator(payload.einh,ieinheit)
      >> Query::Row::MapNull(payload.mindbest,NO_CHECK)
      >> Query::Row::MapNull(lagern_in,-2)
      ;
   if (lagern_in!=-2) payload.lagern_in=ppsInstanz::ID(lagern_in);
      
   if (ieinheit) 
   {  payload.einh=EinheitID::St_;

#if defined(PETIG_EXTENSIONS) && defined(MANUPROC_DYNAMICENUMS_CREATED)
      switch(payload.interntyp)
      {  case ArtikelTypID::Jumborollen:
            payload.einh=EinheitID::m; break;
         
         case ArtikelTypID::Band:
            {  cache.Register(ab.Id(),payload); 
               // since ArtikelBaum tries to read bestellen_bei
               // we would loop forever if not registered here
               cH_ArtikelBezeichnung AB(ab);
               // this is because Prozess_sql.pgcc is mad (Jumbo = 1m)
               if (!AB->Jumbo()) payload.einh=EinheitID::St_;
               else payload.einh=EinheitID::m;
               break;
            }

         case ArtikelTypID::Garn:
            payload.einh=EinheitID::kg; break;
         
         case ArtikelTypID::Lohn:
            payload.einh=EinheitID::Fd_km; break;
            
         default: ; // Stueck
      }
#endif      

   }
   cache.Register(ab.Id(),payload);
}

void ArtikelStamm::set_BestellenBei(const ArtikelBase &artikel,const ppsInstanz::ID instanz)
{
  Query("update artikelstamm set stand=now(),bestellen_bei=? "
  	"where id=? ")
  	<< Query::NullIf(instanz,ppsInstanzID::None)
  	<< artikel.Id();
  SQLerror::test(__FILELINE__,100);

  // Und nun noch raus aus dem Cache
  cache.deregister(artikel.Id());
}

void ArtikelStamm::setEinheit(const ArtikelBase &artikel,const Einheit e)
{
  Query("update artikelstamm set stand=now(),einheit=? "
  	"where id=? and (einheit!=? or einheit is null)").lvalue()
  	<< e.Id()
  	<< artikel.Id() 
  	<< e.Id();
  SQLerror::test(__FILELINE__,100);

  // Und nun noch raus aus dem Cache
  cache.deregister(artikel.Id());
}


void ArtikelStamm::setAktive(const ArtikelBase &artikel, bool ak
		, bool all_color) throw(SQLerror)
{ 
 std::string table=cH_ExtBezSchema(ExtBezSchema::default_id,ArtikelTyp::default_ID)->TableName();

 if(all_color)
   {
    std::string query("update artikelstamm set stand=now(), "
    	              "aktiv=? where id in ");
    query+=std::string(" (SELECT b1.id from ")+
    	table+" b1 join "+table+" b2 "+
	"  on (b1.artikel=b2.artikel and b1.breite=b2.breite "+
	"      and b1.aufmachung=b2.aufmachung and b2.id=?)) ";
    Query(query) << ak << artikel.Id();
   }
 else
   Query("update artikelstamm set stand=now(),aktiv=? where id=?")
  	<< ak << artikel.Id();

  SQLerror::test(__FILELINE__,100);

  cache.deregister(artikel.Id());
}

bool ArtikelStamm::getAktive() const throw(SQLerror)
{  return (Query("select aktiv from artikelstamm where id=?") << art.Id())
	.FetchOne<bool>();
}


void ArtikelStamm::setMindBest(int mb) throw(SQLerror)
{ Query("update artikelstamm set stand=now(),mindbestand=? where id=?").lvalue()
  	<< Query::NullIf(mb,NO_CHECK) << art.Id();
  SQLerror::test(__FILELINE__,100);

 cache.deregister(art.Id());
}


const UniqueValue::value_t ArtikelStamm::trace_channel
      = ManuProC::Tracer::channels.get();

const int ArtikelStamm::NO_CHECK;

// for initial inventory
#include <Lager/FertigWarenLager.h>

ArtikelBase ArtikelStamm::Anlegen(ArtikelTyp::ID warengruppe,
		int default_Schema,ppsInstanz::ID bestellen_bei,
		Einheit::ID einheit)
{  ArtikelBase db_id;
   Query("select nextval('artikelbezeichnun_artikelid_seq')").FetchOne(db_id);

   int mindbest=NO_CHECK;
#if defined(MABELLA_EXTENSIONS) && defined(MANUPROC_DYNAMICENUMS_CREATED)
   if(ArtikelTyp::hasAttribute(ArtikelTyp(warengruppe),ArtikelTypAttr::lagerartikel))
     mindbest=0;
#endif
   Query("insert into artikelstamm "
	"(id,warengruppe,defaultschema,bestellen_bei,einheit,uid,mindbestand) "
	"values (?,?,?,?,?,?,?)")
     << db_id << warengruppe << default_Schema 
     << Query::NullIf(bestellen_bei,ppsInstanzID::None)
     << Query::NullIf(einheit,EinheitID::None) << getuid()
     << Query::NullIf(mindbest,NO_CHECK);

#if defined(MABELLA_EXTENSIONS) && defined(MANUPROC_DYNAMICENUMS_CREATED)
   if(ArtikelTyp::hasAttribute(ArtikelTyp(warengruppe),ArtikelTypAttr::lagerartikel))
    {FertigWaren fw(db_id,FertigWaren::eInventur,0);
     FertigWarenLager fwl(fw,FertigWarenLager::default_lagerid);
     fwl.Inventur();
    }
#endif


   return db_id;
}

void ArtikelStamm::set_LagernIn(ArtikelBase const& art, cH_ppsInstanz const& instanz)
{ Query q("update artikelstamm set lagern_in=? where id=?");
  if (!instanz) q << Query::null<int>();
  else q << instanz->Id();
  q << art.Id();
  q.Check100();
}
