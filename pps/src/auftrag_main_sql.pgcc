#include "auftrag_main.hh"
#include <Aux/Transaction.h>
#include <Aux/SQLerror.h>
#include <Aux/Datum.h>
#include <Auftrag/AufEintragBase2.h>
exec sql include sqlca;

map<int,std::string> auftrag_main::get_all_instanz()
{
 std::map<int,std::string> v;
 exec sql begin declare section;  
   int db_i;
   char db_s[50];
 exec sql end declare section;  
 exec sql declare ins_ein cursor for select insid,name from prod_instanz order by name;
 Transaction tr;
 exec sql open ins_ein;
 SQLerror::test(__FILELINE__);
 while (true)
   {
     exec sql fetch ins_ein into :db_i, :db_s;
     SQLerror::test(__FILELINE__,100);
     if (sqlca.sqlcode) break;
     v[db_i]=db_s;
   }
 return v;
}

/*
vector<AufEintragBase2> auftrag_main::get_new_aufids(cH_ppsInstanz instanz)
{
 std::vector<AufEintragBase2> vec_newaufein;
 exec sql begin declare section;
  int AUFTRAGID,ZEILENNR;
  char query[1024];
 exec sql end declare section;
 cH_ppsInstanz ivon(ppsInstanz::INST_KNDAUF);
 std::string squery = "SELECT auftragid,zeilennr from 
    auftragentry where instanz ='"+itos(ivon->Id())+"' and 
      lasteditdate > (select cast(wert as timestamp) 
      from global_settings where userid=0 and program='pps'
      and name='"+instanz->get_Name()+"')";
 strncpy(query,squery.c_str(),sizeof(query));
//std::cout << query << '\n';
 Transaction tr;
 exec sql prepare newidein_ from :query;
 exec sql declare newidein cursor for newidein_;
 exec sql open newidein;
 SQLerror::test(__FILELINE__);
 while (true)
  {
   exec sql fetch newidein into :AUFTRAGID,:ZEILENNR;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break; 
   AufEintragBase2 a(ivon,AUFTRAGID,ZEILENNR);
   vec_newaufein.push_back(a);               
  }
 exec sql close newidein;
 tr.close();
 return vec_newaufein;
}
*/
/*
void auftrag_main::AuftragsEntryZuordnung(const AufEintragBase& AEB,long menge, const AuftragBase& AB,int znr)
{
 exec sql begin declare section;
  int db_aaid=AEB.getAuftragid();
  int db_ains=AEB.getAuftragInstanz();
  int db_aznr=AEB.getZnr();
  long db_menge=menge;
  int db_naid=AB.Id();
  int db_nins=AB.Instanz();
  int db_nznr=znr;
 exec sql end declare section;
 exec sql insert into auftragsentryzuordnung 
   (altauftragid,altinstanz,altzeilennr,menge,neuauftragid,neuinstanz,neuzeilennr) values
   (:db_aaid,:db_ains,:db_aznr,:db_menge,:db_naid,:db_nins,:db_nznr);
 SQLerror::test(__FILELINE__);
}
*/