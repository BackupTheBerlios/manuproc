/* $Id: Zahlungsart_sql.pgcc,v 1.22 2005/10/12 08:32:55 christof Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "Zahlungsart.h"
#include <Misc/FetchIStream_ops.h>

static const char * const to_select = 
	"kurzbezeichnung,bezeichnung,"
	"zahlungsfrist,"
	"skontosatz_1,skontofrist_1,"
	"skontosatz_2,skontofrist_2,"
	"skontosatz_3,skontofrist_3"
#ifdef MABELLA_EXTENSIONS
	",einzugrabatt,bankeinzug,"
	"monatsende,verfahren,frist_monate,textid"
#endif	
	;

Query::Row &operator>>(Query::Row &is, Zahlungsart &za)
{  int frist[4]; // [0] is not used 
   fixedpoint<2> satz[4];
   std::string verfahren;
   
   is >> Query::Row::MapNull(za.kurzbezeichung,std::string())
      >> Query::Row::MapNull(za.bezeichnung,std::string())
      >> Query::Row::MapNull(za.zahlungsfrist,0)
      >> Query::Row::MapNull(satz[1],0)
      >> Query::Row::MapNull(frist[1],0)
      >> Query::Row::MapNull(satz[2],0)
      >> Query::Row::MapNull(frist[2],0)
      >> Query::Row::MapNull(satz[3],0)
      >> Query::Row::MapNull(frist[3],0)
#ifdef MABELLA_EXTENSIONS      
      >> Query::Row::MapNull(za.einzugrabatt,0)
      >> Query::Row::MapNull(za.bankeinzug,false)
      >> Query::Row::MapNull(za.monatsende,false)
      >> Query::Row::MapNull(verfahren,std::string())
      >> Query::Row::MapNull(za.frist_monate,0)
      >> Query::Row::MapNull(za.textid,0)
#endif      
      ;
   if (!verfahren.empty()) za.setVerfahren(verfahren);
   else za.verfahren=Zahlungsart::NONE;

   if(satz[1]!=0) za.vec_skonto.push_back(Zahlungsart::st_skonto(frist[1],satz[1]));
   if(satz[2]!=0) za.vec_skonto.push_back(Zahlungsart::st_skonto(frist[2],satz[2]));
   if(satz[3]!=0) za.vec_skonto.push_back(Zahlungsart::st_skonto(frist[3],satz[3]));
   return is;      
}

Zahlungsart::Zahlungsart(ID _id) throw (SQLerror)
: ManuProcHandle<>(_id),bankeinzug(false),einzugrabatt(0),zahlungsfrist(0),
	monatsende(false), frist_monate(0), verfahren(NONE)
{ if(_id == Zahlungsart::none_id) return;

  Query("select "+std::string(to_select)+" from "
  		"rechnung_zahlungsart where id=?") 
  	<< _id
  	>> *this;
}
