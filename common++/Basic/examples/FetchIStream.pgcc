// $Id: FetchIStream.pgcc,v 1.8 2002/05/06 13:41:22 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 2001 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include <Aux/FetchIStream.h>
#include <Aux/dbconnect.h>
#include <Aux/Transaction.h>
exec sql include sqlca;

exec sql whenever sqlerror do X();
#define X() throw SQLerror(__FILELINE__)

int main()
{  Petig::dbconnect(Petig::Connection("","template1"));
   exec sql allocate descriptor mydesc;
   
   Transaction tr;
  {Query query("select now(),date('yesterday'),null,null,200,20.5,'t'");
   std::string s,s2,s3,s4;
   bool b;
   int i;
   float f;
   int ind3=0;
   
   FetchIStream is=query.Fetch();
   is >> s >> s2 >> FetchIStream::WithIndicator<std::string>(s3,ind3)
      >> FetchIStream::MapNull<std::string>(s4,"<NULL>")
      >> i >> f >> b;
   std::cout << s << ", " << s2 << ", " << ind3 << ", " << s4 << '\n';
   std::cout << i << ", " << f << ", " << b << '\n';
  }
  {Query query("select relname from pg_class limit 10");
   FetchIStream is;
   while ((query>>is).good())
   {  std::string s;
      is >> s;
      std::cout << s << '\n';
   }
  }
// test nasty error?
{
  std::cout << "------\n";
  Transaction tr2;
   Query query2("select 1;");
   FetchIStream is2;
   while ((query2>>is2).good())
   {  std::string s;
      is2 >> s;
      std::cout << s << '\n';
   }
   Query query3("select 2;");
   FetchIStream is3;
   while ((query3>>is3).good())
   {  std::string s;
      is3 >> s;
      std::cout << s << '\n';
   }
}   
//   
   tr.commit();
   Petig::dbdisconnect();
   return 0;
}
