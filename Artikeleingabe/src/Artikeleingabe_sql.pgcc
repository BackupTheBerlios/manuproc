// $Id: Artikeleingabe_sql.pgcc,v 1.6 2004/11/29 10:45:22 christof Exp $
/*  Artikeleingabe: ManuProC's article management program
 *  Copyright (C) 2004 Adolf Petig GmbH & Co. KG
 *  written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "Artikeleingabe.hh"
#include <Aux/EntryValueIntString.h>
#include <Auftrag/AuftragBase.h>
#include "Auftrag/auftrag_status.h"
#include <Artikel/ArtikelBezeichnung.h>
exec sql include sqlca;

void Artikeleingabe::get_artikel_list(ppsInstanz::ID instanz)
{
 try{
  vec_artbase.clear();
  exec sql begin declare section;
   unsigned long int ID;
   char query[1024];
  exec sql end declare section;
  std::string squery;
  if(checkbutton_offene_auftraege->get_active()) 
   {
     AufStatVal status = OPEN;  

     squery = "SELECT distinct artikelid from auftragentry "
      		"where status="+itos(status);
   }
  else
   squery ="select id from artikelstamm where bestellen_bei="+itos(instanz);

  snprintf(query,sizeof(query),squery.c_str());
  exec sql prepare allartein_ from :query;
  exec sql declare allartein cursor for allartein_;
  Transaction tr;
  exec sql open allartein;
  SQLerror::test(__FILELINE__,100);
  while(true)
   {
     exec sql fetch allartein into :ID;
     SQLerror::test(__FILELINE__,100);
     if(sqlca.sqlcode) break;
     vec_artbase.push_back(ArtikelBase(ID));
   }
  exec sql close allartein;
  tr.close();
 } catch (SQLerror &e) {}
}

void Artikeleingabe::fill_eingabebox(int nr)
{
   if (nr==AuftragBase::plan_auftrag_id) 
    { vec_eingabe.clear();
      list_sig.clear();
    }
   if (nr==AuftragBase::dispo_auftrag_id) 
    { vec_alias_eingabe.clear();
      list_sig2.clear();
    }
   exec sql begin declare section;
      int db_atyp, db_aid, db_sigV[20];
      char db_bezV[20][50],db_spaV[20][50]; 
   exec sql end declare section;
   cH_ExtBezSchema schema = artikelbox->getBezSchema();
   if(nr==AuftragBase::plan_auftrag_id)
     {
      db_atyp=schema->Typ();
      db_aid =schema->Id();
     }
   if(nr==AuftragBase::dispo_auftrag_id)
     {
      if(alias_schema->get_value()==1) 
         db_atyp=alias_warengruppe->get_value();
      else 
         db_atyp=schema->Typ();
      db_aid =alias_schema->get_value();
//cout << db_atyp<<'\n';
     }
   // genau das tut ExtBezSchema::ExtBezSchema, warum verdoppelt ?? CP
   exec sql select signifikanz, bezkomptext, spaltenname 
      into :db_sigV,:db_bezV,:db_spaV
      from extbezschema where artikeltyp = :db_atyp  
      and extartbezid = :db_aid 
      and spaltenname!='id'
      order by signifikanz,bezkomptype limit 20;
   SQLerror::test(__FILELINE__,100);
   if (!sqlca.sqlcode)
   {  
     int sanz = sqlca.sqlerrd[2];
     if(nr==AuftragBase::plan_auftrag_id) eingabebox->set_size(sanz);
     if(nr==AuftragBase::dispo_auftrag_id) alias_eingabe->set_size(sanz);
     cH_ArtikelBezeichnung AB(artikelbox->get_value(),db_aid);
     int sigmem=-99;
     int x=-1;
     for (int i=0;i<sanz;++i)
      {
//        if (!strncmp(db_bezV[i],"ID",sizeof db_bezV[i] )) continue;
        if (nr==AuftragBase::plan_auftrag_id) 
           { vec_eingabe.push_back(st_eingabe(db_spaV[i],db_sigV[i]));
             list_sig.push_back(db_sigV[i]); }
        if (nr==AuftragBase::dispo_auftrag_id) 
           { vec_alias_eingabe.push_back(st_eingabe(db_spaV[i],db_sigV[i]));
             list_sig2.push_back(db_sigV[i]); }
        if(nr==AuftragBase::plan_auftrag_id)eingabebox->set_label(i,db_bezV[i]);
        if(nr==AuftragBase::dispo_auftrag_id)alias_eingabe->set_label(i,db_bezV[i]);
        if(sigmem==db_sigV[i]) ++x;
        else {x=0;sigmem=db_sigV[i];}
        if(nr==AuftragBase::plan_auftrag_id)eingabebox->set_value(i,AB->Komponente(x,db_sigV[i]));
	if(nr==AuftragBase::dispo_auftrag_id)
	  {alias_eingabe->set_value(i,"");
	   if(((ExtBezSchema::ID)db_aid)==AB->getExtBezSchema()->Id()) 
	     alias_eingabe->set_value(i,AB->Komponente(x,db_sigV[i]));
	  }
	
      }
     list_sig.sort();
     list_sig.unique();
     list_sig2.sort();
     list_sig2.unique();
   }
}

