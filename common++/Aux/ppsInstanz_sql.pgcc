#include "ppsInstanz.h"
#include <Aux/SQLerror.h>
exec sql include sqlca;

cH_ppsInstanz::cache_t cH_ppsInstanz::cache;

cH_ppsInstanz::cH_ppsInstanz(ppsInstanz::ID iid) 
{ 
 cH_ppsInstanz *cached(cache.lookup(iid));
 if (cached) *this=*cached;
 else 
  { *this=cH_ppsInstanz(new ppsInstanz(iid));
    cache.Register(iid,*this);
  }
}


void ppsInstanz::get_name()
{
 exec sql begin declare section;
   char db_name[50];
   int db_nr=instid,db_lager_fuer;
   int IN=INST_NONE;
 exec sql end declare section;
 exec sql select name,coalesce(lager_fuer,:IN) 
      into :db_name,:db_lager_fuer 
      from prod_instanz where insid= :db_nr;
 SQLerror::test(__FILELINE__,100);
 if(sqlca.sqlcode) *db_name=0;
 name=db_name;
 lager_fuer=ppsInstId(db_lager_fuer);
}

cH_Prozess ppsInstanz::get_Prozess() const
{
  int pid;
  switch(instid) {
	case  INST_FAERB : return cH_Prozess(Prozess::Faerben);break;
	case  INST_DRUCK : return cH_Prozess(Prozess::Drucken);break;
	case  INST_WEB : return cH_Prozess(Prozess::Weben);break;
	case  INST_SCHAER : return cH_Prozess(Prozess::Schaeren);break;
	case  INST_SPRITZ : return cH_Prozess(Prozess::Giessen);break;
        default : return cH_Prozess(Prozess::Verarbeitung); break;
	}
}

bool ppsInstanz::LagerInstanz(ppsInstId instanz)
{
  if       (instanz == ppsInstanz::INST_BANDLAGER) return true;
  else if  (instanz == ppsInstanz::INST_ROHLAGER ) return true;
  return false;
}
