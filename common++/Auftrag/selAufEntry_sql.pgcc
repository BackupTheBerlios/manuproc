// $Id: selAufEntry_sql.pgcc,v 1.12 2001/11/05 08:58:29 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Auftrag/selFullAufEntry.h>
#include <Aux/Transaction.h>
#include <Aux/Datum.h>

exec sql include sqlca;

SelectedFullAufList::SelectedFullAufList
	(const SQLFullAuftragSelector &selector)
throw(SQLerror)
{
 exec sql begin declare section;
 int AUFID[20];
 int INSTANZ[20];
 int ZNUMMER[20];
 int KDNR[20];
 int ARTIKELID[20];
 int ROHARTIKELID[20];
 int BESTELLT[20], GELIEFERT[20];
 char LIEFERDATUM[20][21];
 int ILIEFERDATUM[20];
 int PROZESSID[20];
 char PROZESSDATUM[20][11];
 int STATUS[20];
 int ENTRYSTATUS[20];
 char LASTEDITDATE[20][21];
 int DISPOENTNR[20];
 int DISPONR[20];
 int JAHRGANG[20];
 int IDISPOENTNR[20], IDISPONR[20];
 char YOURAUFNR[20][21];
 int IYOURAUFNR[20];
 int IROHARTIKELID[20];
 float PREIS[20];
 int RABATT[20];
 int PREISMENGE[20];
 int WAEHRUNG[20];
 int IPREIS[20],IRABATT[20],IWAEHRUNG[20];
 char *clausel;
 exec sql end declare section;
	
	clausel = (char *)selector.getClausel().c_str();

	Transaction tr;
	exec sql prepare MYQ from :clausel;
	exec sql declare AUFENTRYFULL cursor for MYQ;
	exec sql open AUFENTRYFULL;
	SQLerror::test(__FILELINE__":SelectedFullAufList: select all auftragids",100);

	while(1)
	  {
	   exec sql fetch 20 in AUFENTRYFULL
	   into :INSTANZ, :AUFID, :ZNUMMER,
		:BESTELLT, :ARTIKELID, :ROHARTIKELID:IROHARTIKELID,
		:LIEFERDATUM:ILIEFERDATUM,
		:GELIEFERT, :JAHRGANG,
		:STATUS, :KDNR, :YOURAUFNR:IYOURAUFNR,
		:PROZESSID, :PROZESSDATUM,
		:PREIS:IPREIS, :RABATT:IRABATT, :PREISMENGE,
		:WAEHRUNG:IWAEHRUNG,
		:ENTRYSTATUS, :LASTEDITDATE;
   SQLerror::test(__FILELINE__":SelectedFullAufList: fetch all auftragids",
						"AUFENTRYFULL",100);

	   int j=sqlca.sqlerrd[2];
           for (int i=0;i<j;++i)
           { 
         try {
//         Petig::Datum datum(); datum->from_postgres(PROZESSDATUM[i]);
	      aufidliste.push_back(
			AufEintragBase((ppsInstanz::ID)INSTANZ[i],
			AUFID[i], ZNUMMER[i], BESTELLT[i], ARTIKELID[i],
      	ILIEFERDATUM[i] ? Petig::Datum() : Petig::Datum(LIEFERDATUM[i]),
			GELIEFERT[i],
			IDISPOENTNR[i] ? 0 : DISPOENTNR[i],
			IDISPONR[i] ? 0 : DISPONR[i],
			JAHRGANG[i], (AufStatVal)STATUS[i], KDNR[i],
			IYOURAUFNR[i] ? std::string("") : std::string(YOURAUFNR[i]),
			Petig::Datum(PROZESSDATUM[i])
//Petig::Datum()
         ,PROZESSID[i],
			Preis(IPREIS[i] ? 0 : PREIS[i],
				IWAEHRUNG[i] ? Waehrung::ID(0):Waehrung::ID(WAEHRUNG[i]),
				PREISMENGE[i]),
			IRABATT[i] ? 0 : RABATT[i],
		(AufStatVal)ENTRYSTATUS[i],Petig::Datum(LASTEDITDATE[i])	));
	      } catch (SQLerror &e)
	      {  std::cerr << e << '\n';
	      }
	   }

	   if (j<20) break;
	  }	   	

	exec sql close AUFENTRYFULL;
	tr.commit();
}


#warning Argument in AufEntryBase2 wandeln!
void SelectedFullAufList::insert(const AuftragBase& auftrag, int znr) throw(SQLerror)
{
 exec sql begin declare section;
 int INSTANZ;
 int AUFID;
 int ZNUMMER;
 int KDNR;
 int ARTIKELID;
 int ROHARTIKELID;
 int BESTELLT, GELIEFERT;
 char LIEFERDATUM[21];
 int ILIEFERDATUM;
 int PROZESSID;
 char PROZESSDATUM[11];
 int STATUS;
 int ENTRYSTATUS;
 char LASTEDITDATE[21];
 int DISPOENTNR=0;
 int DISPONR=0;
 int JAHRGANG;
 int IDISPOENTNR=-1, IDISPONR=-1;
 char YOURAUFNR[21];
 int IYOURAUFNR;
 int IROHARTIKELID;
 float PREIS;
 int RABATT;
 int PREISMENGE;
 int WAEHRUNG;
 int IPREIS,IRABATT,IWAEHRUNG;
 char *clausel;
 exec sql end declare section;

 std::string cmd=SQLFullAuftragSelector(
		SQLFullAuftragSelector::sel_AufidZnr(auftrag,znr)).getClausel();
	clausel = (char *)cmd.c_str();

	Transaction tr;
	exec sql prepare MYQ from :clausel;
	exec sql declare AUFENTRYINSERT cursor for MYQ;
	exec sql open AUFENTRYINSERT;
	SQLerror::test(__FILELINE__":SelectedFullAufList::insert: select all auftragids");

	   exec sql fetch in AUFENTRYINSERT
	   into :INSTANZ, :AUFID, :ZNUMMER,
		:BESTELLT, :ARTIKELID, :ROHARTIKELID:IROHARTIKELID,
		:LIEFERDATUM:ILIEFERDATUM,
		:GELIEFERT, :JAHRGANG,
		:STATUS, :KDNR, :YOURAUFNR:IYOURAUFNR,
		:PROZESSID, :PROZESSDATUM,
		:PREIS:IPREIS, :RABATT:IRABATT, :PREISMENGE,
		:WAEHRUNG:IWAEHRUNG,
		:ENTRYSTATUS, :LASTEDITDATE;
   SQLerror::test(__FILELINE__":SelectedFullAufList::insert: fetch all auftragids",
						"AUFENTRYINSERT");

	      aufidliste.push_back(
			AufEintragBase((ppsInstanz::ID)INSTANZ,
			AUFID, ZNUMMER, BESTELLT, ARTIKELID,
      	ILIEFERDATUM ? Petig::Datum() : Petig::Datum(LIEFERDATUM),
			GELIEFERT,
			IDISPOENTNR ? 0 : DISPOENTNR,
			IDISPONR ? 0 : DISPONR,
			JAHRGANG, (AufStatVal)STATUS, KDNR,
			IYOURAUFNR ? std::string("") : std::string(YOURAUFNR),
			Petig::Datum(PROZESSDATUM),PROZESSID,
			Preis(IPREIS ? 0 : PREIS,
				IWAEHRUNG ? Waehrung::ID(0):Waehrung::ID(WAEHRUNG),
				PREISMENGE),
			IRABATT ? 0 : RABATT,
			(AufStatVal)ENTRYSTATUS,Petig::Datum(LASTEDITDATE)
			));

	exec sql close AUFENTRYINSERT;
	tr.commit();
}

