/*  pps: ManuProC's production planning system
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include"AuftragFull.h"
#include"auftrag_main.hh"
#include<string.h>
#include<strstream>
#include<Misc/SQLerror.h>
#include<Auftrag/selAufEntry.h>
#include <Misc/Transaction.h>
exec sql include sqlca;

extern auftrag_main *auftragmain;

void Auftrag::deleteAuftrag() throw(SQLerror)
{exec sql begin declare section;
 int AUFTRAGID;
 exec sql end declare section;

 AUFTRAGID=Id();

 Transaction tr;

 exec sql lock table auftragentry in row exclusive mode;
 exec sql lock table auftrag in row exclusive mode;
 exec sql delete from auftragentry where auftragid= :AUFTRAGID;
 exec sql delete from auftrag where auftragid= :AUFTRAGID;    
 SQLerror::test(__FILELINE__"Löschen des Auftrags");

 tr.commit();
}


void Auftrag::setJahrgang(int jahr) throw(SQLerror)
{
 exec sql begin declare section;
 int JAHRGANG;
 int AUFTRAGID;
 exec sql end declare section;

 AUFTRAGID = Id();
 JAHRGANG = jahr;
 
 exec sql update auftrag set jahrgang = :JAHRGANG where auftragid= :AUFTRAGID;
 SQLerror::test(__FILELINE__"Jahrgang setzen");
}



void Auftrag::setStatusAuftrag(AufStatVal st) throw(SQLerror)
{exec sql begin declare section;
 int AUFTRAGID;
 int STATUS=st;
 exec sql end declare section;

 AUFTRAGID=Id();

 exec sql update auftrag set stat= :STATUS
		 where auftragid= :AUFTRAGID;    
 SQLerror::test(__FILELINE__"Status setzen");
 status=st;
}



void AuftragFull::deleteEintrag(int zeilennr, int idx) throw(SQLerror)
{Auftrag::deleteEintrag(zeilennr);
 AufEintragList::iterator i = eintragliste.begin()+idx;
 eintragliste.erase(i);    
}

void Auftrag::deleteEintrag(int zeilennr) throw(SQLerror)
{exec sql begin declare section;
 int AUFTRAGID;
 int ZEILENNR;
 exec sql end declare section;

 AUFTRAGID=Id();
 ZEILENNR=zeilennr;

 Transaction tr;
 
 exec sql lock table auftragentry in share row exclusive mode;
 exec sql delete from auftragentry where zeilennr= :ZEILENNR
 		and auftragid= :AUFTRAGID;
 SQLerror::test(__FILELINE__"Auftragszeile löschen");

 exec sql update auftragentry set zeilennr=zeilennr-1
 	where zeilennr> :ZEILENNR and auftragid= :AUFTRAGID;
 SQLerror::test(__FILELINE__"Auftragszeilennr aktualisieren");
 
 tr.commit();
}

Auftrag::Auftrag(int aufid) throw(SQLerror)
{
 exec sql begin declare section;
 int AUFTRAGID = aufid;
 int KUNDENNR;
 char DATUM[11];
 int STATUS;
 char YOURAUFNR[21];
 char BEMERKUNG[21];
 int JAHRGANG;
 int WAEHRUNG;
 short IKUNDENNR, IDATUM, IYOURAUFNR, IBEMERKUNG, IWAEHRUNG;
 exec sql end declare section;

 exec sql select kundennr, date(datum), stat, youraufnr, bemerkung,
		jahrgang, coalesce(waehrung,1)
	into 	:KUNDENNR:IKUNDENNR, :DATUM:IDATUM, 
		:STATUS, :YOURAUFNR:IYOURAUFNR, :BEMERKUNG:IBEMERKUNG,
		:JAHRGANG, :WAEHRUNG:IWAEHRUNG
	from auftrag where auftragid = :AUFTRAGID;
 SQLerror::test(__FILELINE__"Auftrag laden");

 auftragid = aufid;
 kundennr = IKUNDENNR ? 0 : KUNDENNR;
 datum.from_postgres(DATUM);
 wrkstatus = LOADED;
 status = (AufStatVal)STATUS;
 youraufnr = IYOURAUFNR ? "" : YOURAUFNR;
 bemerkung = IBEMERKUNG ? "" : BEMERKUNG;
 jahrgang = JAHRGANG;
 waehrung = cP_Waehrung(WAEHRUNG);
}

AuftragFull::AuftragFull(int aufid) throw(SQLerror)
	: Auftrag(aufid)
{
 exec sql begin declare section;
 int AUFTRAGID = aufid;
 exec sql end declare section;

 SelectedFullAufList aufids((SQLFullAuftragSelector)
 			(SQLFullAuftragSelector::sel_Aufid(aufid)));
 for(std::vector<AufEintragBase>::iterator i = aufids.aufidliste.begin();
				 	 i!=aufids.aufidliste.end(); i++)
 {  try{
       eintragliste.push_back(AufEintrag(*i));
      }
    catch (SQLerror &e)
    {  if(e.Code() != 100) throw;
       meldung->Show(e); 
    } 
 }
}

AuftragFull::AuftragFull(long kundennr, int jahr) throw(SQLerror)
	: Auftrag(kundennr,jahr)
{  // braucht nicht geladen zu werden
}

Auftrag::Auftrag(long kdnr,int jahr) throw(SQLerror)
{
 exec sql begin declare section;
 int AUFTRAGID;
 char DATUM[11];
 int YEAR;
 int KUNDENNR=kdnr;
 int JAHRGANG=jahr;
 int STATUS;
 exec sql end declare section;

 Transaction tr;

 exec sql lock table auftrag in exclusive mode;
 SQLerror::test(__FILELINE__"lock table auftrag");

 exec sql select date_part('year',date(now()))%100.0 into :YEAR;
 SQLerror::test(__FILELINE__"select year");
 
 exec sql select coalesce(max(auftragid)+1,:YEAR*10000) 
 		into :AUFTRAGID from auftrag 
 		where int4(float4(auftragid / 10000))= :YEAR;
 SQLerror::test("Auftrag: select neue auftragid");

 STATUS = OPEN;
 exec sql insert into auftrag (auftragid, kundennr, status, jahrgang, 
				stat, waehrung)
 	values (:AUFTRAGID, :KUNDENNR, :STATUS, :JAHRGANG, 0, 1);
 SQLerror::test(__FILELINE__" insert into auftrag");
  
 exec sql select date(datum) into :DATUM from auftrag where auftragid= :AUFTRAGID;
 SQLerror::test("Aufrtag: select datum");

 auftragid = AUFTRAGID;
 kundennr = kdnr;
 datum.from_postgres(DATUM);
 wrkstatus= INSERTED;
 status=(AufStatVal)STATUS;
 jahrgang = JAHRGANG;

 tr.commit();
}

void Auftrag::setBemerkung(const std::string &bem) throw(SQLerror)
{
 exec sql begin declare section;
 int AUFTRAGID;
 char BEMERKUNG[21];
 short IBEMERKUNG;
 exec sql end declare section;

 bemerkung=bem;
 AUFTRAGID=Id();

 if(bemerkung!="")
   {strncpy(BEMERKUNG,bemerkung.c_str(),20);BEMERKUNG[20]=0;IBEMERKUNG=0;}
 else  
   {BEMERKUNG[0]=0;IBEMERKUNG=-1;}
   
 exec sql update auftrag set bemerkung= :BEMERKUNG:IBEMERKUNG
	where auftragid= :AUFTRAGID;
 SQLerror::test("setBemerkung: update bemerkung");
}


void Auftrag::setYourAufNr(const std::string &yanr) throw(SQLerror)
{
 exec sql begin declare section;
 int AUFTRAGID;
 char YOURAUFNR[21];
 short IYOURAUFNR;
 exec sql end declare section;

 youraufnr=yanr;
 AUFTRAGID=Id();

 if(youraufnr!="")
   {strncpy(YOURAUFNR,youraufnr.c_str(),20);YOURAUFNR[20]=0;IYOURAUFNR=0;}
 else  
   {YOURAUFNR[0]=0;IYOURAUFNR=-1;}

 exec sql update auftrag set youraufnr= :YOURAUFNR:IYOURAUFNR
	where auftragid= :AUFTRAGID;
 SQLerror::test("setYourAufNr: update youraufnr");
}



int Auftrag::getIdFromYourAufId(const char *youraufid) throw(SQLerror)
{
 exec sql begin declare section;
 int AUFTRAGID;
 char YOURAUFNR[21];
 exec sql end declare section;

 strncpy(YOURAUFNR,youraufid,20); YOURAUFNR[20]=0;

 exec sql select auftragid into :AUFTRAGID from auftrag
	where youraufnr= :YOURAUFNR;
 SQLerror::test("getIdFromYourAufId: select auftragid");
 return AUFTRAGID;
}
