// $Id: Telefon.pgcc,v 1.10 2001/10/19 09:35:58 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include"Telefon.h"
#include<Aux/Transaction.h>
exec sql include sqlca;
#include<Aux/itos.h>


Telefon::Telefon(ID _tid) throw(SQLerror)
{
 exec sql begin declare section;
 int TELID=_tid;
 int KUNDENNR;
 int PERSNR;
 char NUMMER[21];
 char ART[2];
 char *QU;
 exec sql end declare section;
 
 Transaction tr;

 std::string qu = std::string ("select coalesce(kundennr,0),coalesce(persnr,0),"
			"nummer,art from ku_telefon where ");
 qu = qu+" telid="+itos(TELID);

 QU = (char*)qu.c_str();

 exec sql prepare telqu from :QU;
 exec sql declare TELCUR cursor for telqu;
 exec sql open TELCUR;
 SQLerror::test(__FILELINE__);

 exec sql fetch TELCUR into :KUNDENNR, :PERSNR, :NUMMER, :ART;
 SQLerror::test(__FILELINE__,"TELCUR");
 
 person=PERSNR;
 kunde=KUNDENNR;
 nummer=NUMMER;
 telart=(TelArt)ART[0];

 exec sql close TELCUR;
 tr.close();

}

vector<Telefon::st_tel> Telefon::get_Telefon(int nr,const std::string& mod) throw(SQLerror)
{
/*
 exec sql begin declare section;
 int TELID;
 int KUNDENNR;
 int PERSNR;
 char *QU;
 exec sql end declare section;
*/
 exec sql begin declare section;
 char *QU;
 char NUMMER[21];
 char ART[2];
 int KUNDENNR;
 int PERSNR;
 exec sql end declare section;
 
 Transaction trk;

// std::string qu = std::string ("select coalesce(kundennr,0),coalesce(persnr,0),"
//			"nummer,art from kunden_telefon where ");
 std::string qu = std::string ("select nummer,art,coalesce(kundennr,"+itos(Kunde::none_id)+"), \
      coalesce(persnr,"+itos(Person::none_id)+") from ku_telefon where ");
 if (mod=="kundennr")  qu = qu+" kundennr="+itos(nr);
 else if (mod=="persnr")   qu = qu+"   persnr="+itos(nr);
 else abort();

 QU = (char*)qu.c_str();
 exec sql prepare telqu from :QU;
 exec sql declare TEL cursor for telqu;
 exec sql open TEL;
 SQLerror::test(__FILELINE__);

 while (true)
  { 
   exec sql fetch TEL into :NUMMER,:ART,:KUNDENNR,:PERSNR;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   vec_telefon.push_back(st_tel(NUMMER,ART,KUNDENNR,PERSNR));
  } 
 exec sql close TEL;
 trk.close();
 return vec_telefon;
}

void Telefon::update() const throw(SQLerror)
{
 exec sql begin declare section;
 int TELID=telid;
 int KUNDENNR;
 int PERSNR;
 char *NUMMER;
 char ART[1];
 exec sql end declare section;
 
 Transaction tr;

 KUNDENNR=kunde;
 PERSNR=person;
 NUMMER=(char*)nummer.c_str();
 ART[0]=telart; 
 
 if(kunde==Kunde::none_id && person==Person::none_id)
   throw(__FILELINE__"Kunde und Person dürfen nicht beide NULL sein");

 exec sql update ku_telefon set nummer= :NUMMER, art= :ART, 
	kundennr= :KUNDENNR, persnr= :PERSNR where telid= :TELID;
 SQLerror::test(__FILELINE__);

 tr.commit();

}



cH_Telefon::cH_Telefon(const Telefon::ID _tnr)
{
 *this = cH_Telefon(new Telefon(_tnr));
}


std::string Telefon::ArtString() const 
{
 switch(telart)
	{
	case TEL_TEL : return("Telefon"); break;
	case TEL_FAX : return("Fax"); break;
	case TEL_MOB : return("Mobil"); break;
	default : return("-");
	}
 return("-");
}


const cH_Telefon Telefon::newTelefon(const Kunde::ID kid,const Person::ID pid,
 		const std::string &nr, const TelArt art) throw(SQLerror)
{
 exec sql begin declare section;
 int TELID;
 int KUNDENNR;
 int PERSNR;
 int NUMMER;
 char ART[1];
 int IKUNDENNR=0, IPERSNR=0;
 exec sql end declare section;
 if(kid==Kunde::none_id && pid==Person::none_id)
   throw(__FILELINE__"Kunde und Person dürfen nicht beide NULL sein");

 Transaction tr;

 if(kid == Kunde::none_id) IKUNDENNR=-1;
 else KUNDENNR=kid;
 if(pid == Person::none_id) IPERSNR=-1;
 else PERSNR=pid;

 NUMMER=atoi(nr.c_str());
 ART[0]=art; 
 
 exec sql select nextval('kunden_telefon_telid_seq') into :TELID;
 SQLerror::test(__FILELINE__);

 exec sql insert into ku_telefon
		(telid,kundennr,persnr,telnr,art)
	values 
		(:TELID,:KUNDENNR:IKUNDENNR,:PERSNR:IPERSNR,:NUMMER,:ART);
 SQLerror::test(__FILELINE__);

 tr.commit();

 return cH_Telefon(TELID);
}

void Telefon::delTelefon(const ID tid) throw(SQLerror)
{
 exec sql begin declare section;
 int TELID=tid;
 exec sql end declare section;

 Transaction tr;

 exec sql delete from ku_telefon where telid= :TELID;

 SQLerror::test(__FILELINE__,100);

 tr.commit();
}


void Telefon::delPersonsTelefon(const ID pid) throw(SQLerror)
{
 exec sql begin declare section;
 int PERSID=pid;
 exec sql end declare section;

 Transaction tr;

 exec sql delete from ku_telefon where persnr= :PERSID;

 SQLerror::test(__FILELINE__,100);

 tr.commit();
}




