// $Id: ArtikelTyp.pgcc,v 1.19 2005/10/12 08:59:38 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2002 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Artikel/ArtikelTyp.h>
#include <Artikel/ArtikelStamm.h>
#include <ExtBezSchema/ExtBezSchema.h>
#include <Misc/SQLerror.h>
#include <Misc/ExtraColumns.h>
#include <DynamicEnums/DynamicDescr.h>
exec sql include sqlca;

std::map<ArtikelTyp::ID,std::vector<bool> > ArtikelTyp::attributes;
std::map<std::string, int> ArtikelTyp::spez_signifikanz;

bool ArtikelTyp::hasAttribute(ID typ, AttrID attrid)
{
 if(attributes.empty())
   {
    std::string cols;
    int attr_num=
	sizeof ManuProC::DynamicDescriptions::ArtikelTyp_Attributes::attrcolumns
	/ 
	sizeof *ManuProC::DynamicDescriptions::ArtikelTyp_Attributes::attrcolumns;

    std::string query("select id ");
    
    for(int i=0; i<attr_num; i++)
      cols+=std::string(",")+
	ManuProC::DynamicDescriptions::ArtikelTyp_Attributes::attrcolumns[i];

    query+=cols;
    
    query+=" from artbez_warengruppe ";
    Query q(query);

    Query::Row is;
    std::vector<bool> attr_val;
    while((q>>is).good()) 
      {
       std::vector<bool> attr_val;       
       int in_typ;
       
       is >> in_typ;
       for(int i=0;i<attr_num;i++)
         {
          bool in;
          is >> Query::Row::MapNull(in,false);
          attr_val.push_back(in); 
         }
       attributes[(ID)in_typ]=attr_val;       
      }
   }
   
 return attributes[typ][attrid];  

}


ArtikelTyp::ArtikelTyp(const ArtikelBase &ab) throw (SQLerror)
{  ArtikelStamm AS(ab);
   t=AS.Warengruppe();
}

ArtikelTyp::ArtikelTyp(const ArtikelBase &ab,ID id) throw (SQLerror)
{  ArtikelStamm AS(ab);
   if (id==ExtBezSchema::default_id)  t=AS.InternWarengruppe();
   else         t=AS.Warengruppe();
}

std::string ArtikelTyp::get_string(ID t)
{
  exec sql begin declare section;
   char TYP[50];
   int id=t;
  exec sql end declare section;
  exec sql select text into :TYP from artbez_warengruppe  where id  = :id;
 SQLerror::test(__FILELINE__,100);
 if (sqlca.sqlcode) *TYP = 0;
 return TYP;
}


cH_PreisListe ArtikelTyp::EK_PL() const throw(SQLerror)
{
 ExtraColumns at("artikelgruppen","warengruppe");
 at << Id();
 PreisListe::ID pid=PreisListe::none_id;
 if(at.hasColumn("ek_prls"))
   Query("select ek_prls from artikelgruppen where warengruppe=?")
     << Id() >> Query::Row::MapNull(pid,PreisListe::none_id);
     
 if(pid==PreisListe::none_id) return cH_PreisListe();    

 return cH_PreisListe(pid);    
}


int ArtikelTyp::SpecialSignifikanz(const std::string setting_name) const throw(SQLerror)
{
 std::string wert;
 Query::Row is;
 int spez_sign=none_id;
 
 std::map<std::string, int>::const_iterator f=
     spez_signifikanz.find(setting_name);
 if(f!=spez_signifikanz.end())    
   return (*f).second;
   
 Query q("select coalesce(wert,'-1')::integer from global_settings "
       " where userid=0 and program='' and name=?");
 q << setting_name;      
 if((q >> is).good())
   { is >> wert;
     spez_sign=atoi(wert.c_str());
   }
   
 spez_signifikanz[setting_name]=spez_sign;  
   
 return spez_sign;
}

// to be honest this belongs into ArtikelBase.cc
#if __GNUC__>2
const ArtikelBase::ID ArtikelBase::none_id;
#endif
