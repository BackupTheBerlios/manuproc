/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 2001 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include"RechnungEntry.h"
#include"Rechnung.h"
#include<Aux/Transaction.h>

exec sql include sqlca;


RechnungEntry::RechnungEntry(const RechnungBase& rechnung)
{
 exec sql begin declare section;
   int ARTIKELID, ZEILENNR, STUECK, LFRSID;
   float PREISMENGE;
   float MENGE;
   float PREIS;
  char LIEFERDATUM[21];
   int RNGID;
   float RABATT;
 exec sql end declare section;
 RNGID=rechnung.Id();
 Transaction tr;
 exec sql declare rein cursor for
   select ry.artikelid,
      ry.zeilennr, coalesce(ry.menge,0), coalesce(ry.preis,0),
      coalesce(ry.stueck,1), coalesce(ry.preismenge,1), coalesce(ry.rabatt,0),
      coalesce(l.geliefertam,l.datum,date('today')), ry.lfrsid
   from rechnungentry ry 
   left join lieferschein l on ry.lfrsid=l.lfrsid
   where ry.rngid = :RNGID 
   order by ry.zeilennr;
 exec sql open rein;
 SQLerror::test(__FILELINE__);
 while (true)
   {
    exec sql fetch rein into
         :ARTIKELID, :ZEILENNR, :MENGE, :PREIS, :STUECK, 
         :PREISMENGE, :RABATT, :LIEFERDATUM, :LFRSID ;
    SQLerror::test(__FILELINE__,100);
    if (sqlca.sqlcode) break;

    zeilennr = ZEILENNR;
    artikel=ARTIKELID;
    stueck=STUECK;
    menge=MENGE;
    preis=Preis(PREIS,Rechnung(rechnung.Id()).getWaehrung(),PREISMENGE);
    rabatt=RABATT;
    lieferdatum.from_postgres(LIEFERDATUM);
    lfrsid=LFRSID;
   }
 exec sql close rein;
 tr.close();
}


void RechnungEntry::deleteEntry(const RechnungEntry &re) throw(SQLerror)
{
 exec sql begin declare section;
 int RNGID;
 int ZNR;
 exec sql end declare section;

 Transaction tr;

 RNGID=re.Id();
 ZNR=re.Zeile();

 
 exec sql delete from rechnungentry where rngid= :RNGID and 
		zeilennr= :ZNR;
 SQLerror::test(__FILELINE__);

 tr.commit();

}

void RechnungEntry::setzePreis(const Preis &p) throw (SQLerror)
{  preis=p;
   exec sql begin declare section;
   int RNGID,ZNR,PREISMENGE,WAEHRUNG;
   float PREIS;
   exec sql end declare section;
   
   RNGID=Id();
   ZNR=Zeile();
   PREISMENGE=p.BezugsMenge();
   PREIS=p.Wert();
   
   exec sql update rechnungentry
   	set preismenge=:PREISMENGE, preis=:PREIS
   	where rngid= :RNGID and zeilennr= :ZNR;
   SQLerror::test(__FILELINE__);
}
