// $Id: Prozess_sql.pgcc,v 1.12 2003/03/24 10:41:19 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Artikel/Prozess.h>
#include <Misc/Rundungsmacros.h>
#include <Misc/FetchIStream.h>

exec sql include sqlca;

Prozess::Prozess(ID pid) throw(SQLerror)
{exec sql begin declare section;
 int PROZESSID=pid;
 float METERPROSTK=0;
 char LABEL[16];
 char TEXT[21];
 exec sql end declare section;
 
#ifdef PETIG_EXTENSIONS 
 exec sql select label, coalesce(meterprostk,1), coalesce(text,'')
        into :LABEL,:METERPROSTK,:TEXT
 	from prozesse where prozessid= :PROZESSID;
#elif defined MABELLA_EXTENSIONS
 exec sql select label, coalesce(meterprostk,1), coalesce(text,'')
        into :LABEL,:METERPROSTK,:TEXT
 	from prozesse where prozessid= :PROZESSID;
#else
 exec sql select label, coalesce(text,'')
        into :LABEL,:TEXT
 	from prozesse where prozessid= :PROZESSID;
 if(sqlca.sqlcode) throw SQLerror("Prozess: select from prozesse");
#endif
 
 prozessid=pid;
 meterprostk=METERPROSTK;
 label=LABEL;
 text=TEXT;
}

cH_Prozess::cache_t cH_Prozess::cache;

cH_Prozess::cH_Prozess(Prozess::ID pid)
{  cH_Prozess *cached(cache.lookup(pid));
   if (cached) *this=*cached;
   else
   {  
      if (pid==default_pid) *this=cH_Prozess(new Prozess());
      else *this=cH_Prozess(new Prozess(pid));
      cache.Register(pid,*this);
   }
}

FetchIStream &operator>>(FetchIStream &is, Prozess::ID &v)
{  int i;
   is >> FetchIStream::MapNull(i,ProzessID::None);
   v=Prozess::ID(i);
   return is;
}

FetchIStream &operator>>(FetchIStream &is, cH_Prozess &v)
{  int i;
   is >> FetchIStream::MapNull(i,ProzessID::None);
   v=Prozess::ID(i);
   return is;
}

