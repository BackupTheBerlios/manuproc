/* $Id: Lieferschein_sql.pgcc,v 1.42 2006/10/31 16:03:12 christof Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include"Lieferschein.h"
#include<Misc/Transaction.h>
exec sql include sqlca;
#include <Misc/TraceNV.h>
#include <Misc/Query.h>
#include <Lager/FertigWarenLager.h>

Lieferschein::Lieferschein(const cH_ppsInstanz& _instanz,int lid) throw(SQLerror)
: LieferscheinBase(_instanz,lid),kunde(Kunde::default_id), notiz_valid(false)
{

ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,_instanz,NV("LieferscheinId",lid)); 

 int KDNR;
 char LSART;

 std::string query="select coalesce(lsart,'L'), kundennr, date(datum), "
		   " rngid, date(coalesce(geliefertam,datum)) ";

#ifdef DPD_LIEFERSCHEINE
 query += ",paeckchen,pakete,dpdliefnr,brutto_kg,netto_kg,verknr ";
#endif

 query+=" from lieferschein where (instanz,lfrsid) = (?,?)";

 Query q(query);

 q << Instanz()->Id() << Id();
 SQLerror::test(__FILELINE__);

 Query::Row fi=q.Fetch();

 fi >> LSART >> KDNR
    >> lsdatum 
    >> Query::Row::MapNull(rngid,ManuProcEntity<>::none_id) 
    >> geliefertam
#ifdef DPD_LIEFERSCHEINE
    >> Query::Row::MapNull(paeckchen,0) 
    >> Query::Row::MapNull(pakete,0) 
    >> Query::Row::MapNull(dpdliefnr,ManuProcEntity<>::none_id)
    >> Query::Row::MapNull(brutto_kg,0)
    >> Query::Row::MapNull(netto_kg,0)
    >> Query::Row::MapNull(verknr,Kunde::none_id)
#endif
    ;

 lsart=(LsArt)LSART;
 kunde=cH_Kunde(KDNR);
}

Lieferschein::Lieferschein(const cH_ppsInstanz& _instanz,cH_Kunde k,
			int jahr, LsArt la) throw(SQLerror)
	: LieferscheinBase(_instanz,none_id), lsdatum(ManuProC::Datum::today()),
      kunde(k),rngid(ManuProcEntity<>::none_id)
#ifdef DPD_LIEFERSCHEINE
 	,dpdliefnr(-1) ,paeckchen(0),pakete(0)
#endif
 ,notiz_valid(false)
,verknr(Kunde::none_id)
{
ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,_instanz,NV("Kunde",k),NV("Jahr",jahr)); 

 exec sql begin declare section;
  int INSTANZ=_instanz->Id();
  int LFRSID;
  char LSART[1];
  int KUNDENNR;
  int JAHR=jahr;
 exec sql end declare section;

 LSART[0]=la;
 
 if (!JAHR) JAHR=AuftragBase::aktuellesJahr();
 JAHR%=100;

 KUNDENNR=k->Id();
 Transaction tr;
  
 exec sql lock table lieferschein in exclusive mode;
 
 exec sql select coalesce(max(lfrsid)+1,:JAHR*10000)
 		into :LFRSID
 		from lieferschein where instanz=:INSTANZ and lfrsid 
 		between :JAHR*10000 and (:JAHR+1)*10000-1;
 SQLerror::test(__FILELINE__":Lieferschein: select next lfrsid");
 
 exec sql insert into lieferschein (instanz,lfrsid, kundennr)
 	values (:INSTANZ,:LFRSID, :KUNDENNR);
 SQLerror::test(__FILELINE__":Lieferschein: insert into lieferschein");	

#ifdef MABELLA_EXTENSIONS
 exec sql update lieferschein set notiz=(select lief_notiz from kunden
        where kundennr=:KUNDENNR) where lfrsid=:LFRSID and instanz=:INSTANZ;
 SQLerror::test(__FILELINE__":Lieferschein: update lieferschein");
#endif

 if(la!=LART_NONE)
   {
    exec sql update lieferschein set lsart=:LSART
        where lfrsid=:LFRSID and instanz=:INSTANZ;
    SQLerror::test(__FILELINE__":Lieferschein: update lieferschein set lsart");
   }

 lieferid=LFRSID; 
 instanz=_instanz; 
 lsart=la;

 rngid=ManuProcEntity<>::none_id;

 tr.commit();
}

