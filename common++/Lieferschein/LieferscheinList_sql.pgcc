/* $Id: LieferscheinList_sql.pgcc,v 1.17 2003/01/08 09:46:57 christof Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include <Lieferschein/LieferscheinList.h>
#include <Misc/Transaction.h>

exec sql include sqlca;

LieferscheinList::LieferscheinList()
: instanz(ppsInstanz::default_id),kundenid(ManuProcEntity<>::none_id),
artikelid(ArtikelBase::none_id),zusatzinfo(false),
arttyp(ArtikelTyp::ID(ManuProcEntity<>::none_id)),
first_komponent(false),hole_entries(false)
{
#ifdef MABELLA_EXTENSIONS
 arttyp=ArtikelTyp::default_ID;
#endif
 vom=ManuProC::Datum(1,1,1970);
 bis=ManuProC::Datum::today();
}

void LieferscheinList::build_list()
{
 std::string squery = SQuery();
 std::string nametable = "artbez_3_1";

 squery += " where li.instanz="+itos(instanz->Id());

 if(kundenid!=ManuProcEntity<>::none_id)
   squery+= " and li.kundennr="+itos(kundenid);

 if(vom.valid() && bis.valid())
   {squery+= " and coalesce(li.geliefertam,datum)"
   	" between '"+vom.to_iso()+"' and '"+(bis+1).to_iso()+"'";
   }

 if(hole_entries)
   {
    squery+=" and le.zusatzinfo="+(zusatzinfo?std::string("true "):std::string("false "));

 if(artikelid!=ArtikelBase::none_id && !first_komponent)
     squery+=" and le.artikelid="+itos(artikelid);

 if (arttyp!=ManuProcEntity<>::none_id)
     squery+= " and exists (select true from "
	" artikelstamm a where a.id=le.artikelid and "
	" a.warengruppe="+itos(arttyp) + ")";

// sehr Mabella spezifisch (da ab.artikel) statt ExtArtBez
 if(artikelid!=ArtikelBase::none_id && first_komponent)
     {cH_ArtikelBezeichnung ab(artikelid);
      std::string komp1=ab->Komponente(0);
      squery+=" and exists (select true from "+nametable+" ab "
	" where ab.id=le.artikelid and ab.artikel="+komp1+")";
     }

   }
 else
   {
    squery+= " and exists (select true from lieferscheinentry e"
	" join artikelstamm a on (a.id=e.artikelid";
    if (arttyp!=ManuProcEntity<>::none_id)
	squery+= " and a.warengruppe="+itos(arttyp);

 if(artikelid!=ArtikelBase::none_id && !first_komponent)
     squery+=" and a.id="+itos(artikelid);
 squery+=")"; // on endet hier

 if(artikelid!=ArtikelBase::none_id && first_komponent)
     {cH_ArtikelBezeichnung ab(artikelid);
      std::string komp1=ab->Komponente(0);
      squery+=" join "+nametable+" ab on (ab.id=e.artikelid and ab.artikel="+komp1+")";
     }

   squery+=" where e.instanz=lieferschein.instanz and "
	" e.lfrsid=lieferschein.lfrsid and e.zusatzinfo="+
	(zusatzinfo?std::string("true"):std::string("false"))+")";
  }
 
 fuelle(squery);
}

LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz) throw(SQLerror)
: instanz(_instanz),first_komponent(false),hole_entries(false)
{
 std::string squery = SQuery();
 fuelle(squery);
}

LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz,const sel_KundenId &selparam) throw(SQLerror)
: instanz(_instanz),first_komponent(false),hole_entries(false)
{
 std::string squery = SQuery();
 squery += " where (instanz,kundennr) = ("
   +itos(instanz->Id())+","+itos(selparam.id)+")";
 fuelle(squery);
}
LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz,const sel_ArtikelId &selparam) throw(SQLerror)
: instanz(_instanz),first_komponent(false),hole_entries(false)
{
 std::string squery = SQuery();
 squery += " where exists (select true from lieferscheinentry ly where 
     ly.lfrsid =  lieferschein.lfrsid and
     ly.instanz =  lieferschein.instanz
     and ly.instanz ="+itos(instanz->Id())+
     " and artikelid ="+itos(selparam.id)+")";
 fuelle(squery);
}

std::string LieferscheinList::SQuery() 
{
 std::string squery;

 if(hole_entries)
   squery = "select lfrsid,zeile,kundennr,datum,coalesce(rngid,-1),
      coalesce(pakete,0),coalesce(paeckchen,0),
      coalesce(cast(geliefertam as text),cast(datum as text),''),
      coalesce(dpdliefnr,0) from lieferschein li join lieferscheinentry le"
	" using (lfrsid,instanz) ";
 else
   squery = "select lfrsid,0,kundennr,datum,coalesce(rngid,-1),
      coalesce(pakete,0),coalesce(paeckchen,0),
      coalesce(cast(geliefertam as text),cast(datum as text),''),
      coalesce(dpdliefnr,0) from lieferschein li";

 return squery;
}

void LieferscheinList::fuelle(const std::string &squery) throw(SQLerror)
{
 exec sql begin declare section;
 int LFRSID[100];
 int KDNR[100];
 int RNGID[100];
 char DATUM[100][11];
 int PAECKCHEN[100], PAKETE[100];
 char GELIEFERTAM[100][11];
 int DPDLIEFNR[100];
 int ZEILE[100];
 char *query;
 exec sql end declare section;

 query = (char*) squery.c_str();

 Transaction tr;
 exec sql prepare llist_ein_ from :query ;
 exec sql declare llist_ein cursor for llist_ein_ ;
 exec sql open llist_ein;
 SQLerror::test(__FILELINE__,100);
 if(sqlca.sqlcode) return;

 // wann ändert sich der Lieferschein beim holen
 int akt_lfrsid=ManuProcEntity<>::none_id;

 while(true)
   {
    exec sql fetch 100 in llist_ein
		into :LFRSID, :ZEILE, :KDNR, :DATUM, :RNGID,
			:PAKETE, :PAECKCHEN,
			:GELIEFERTAM, :DPDLIEFNR;
    SQLerror::test(__FILELINE__,100);
    if(sqlca.sqlcode) break;

    int geholt=sqlca.sqlerrd[2];
    for(int j=0; j<geholt; j++)
	{
	 if(LFRSID[j]!=akt_lfrsid)
	   {
        	ManuProC::Datum d,gelam;
        	d.from_postgres(DATUM[j]);
        	std::string geliefertam = GELIEFERTAM[j];
        	if(geliefertam=="") gelam=ManuProC::Datum();
        	else gelam.from_postgres(GELIEFERTAM[j]);
        	sellist.push_back(new Lieferschein(
    			LieferscheinBase(instanz,LFRSID[j]),d,
        			KDNR[j],RNGID[j],PAECKCHEN[j],PAKETE[j],
    			gelam,DPDLIEFNR[j]) );
	    akt_lfrsid=LFRSID[j];
	   }
	 liefzeilen[LFRSID[j]].push_back(
		LieferscheinEntryBase(LieferscheinBase(instanz,LFRSID[j]),ZEILE[j]));
	}
    if(geholt < 100) break;

   } 
 exec sql close llist_ein;

 tr.close();

}


#ifdef DPD_LIEFERSCHEINE

LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz,const sel_DPDLNr &sp) throw(SQLerror)
: instanz(_instanz),first_komponent(false),hole_entries(false)
{
 std::string squery = SQuery();
 squery += " where dpdliefnr = "+itos(sp.dpdlnr)+" and instanz ="+itos(instanz->Id());
 fuelle(squery);
}

LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz,const sel_GeliefStat &sp) throw(SQLerror)
: instanz(_instanz),first_komponent(false),hole_entries(false)
{
 std::string squery = SQuery();
 if(sp.geliefert)
	 squery += " where dpdliefnr is not null";
 else
	 squery += " where dpdliefnr is null and geliefertam is null";
 squery += " and instanz = "+itos(instanz->Id());

 squery+=" order by lfrsid";

 fuelle(squery);
}


// caller needs to roll back if transaction is already open and false is given
// back
bool LieferscheinList::setDPDData(int dpdlnr) throw(SQLerror)
{
 Transaction tr;
 exec sql lock lieferschein in share row exclusive mode;
 SQLerror::test(__FILELINE__"lock");

 try{
   for(std::vector<cH_Lieferschein>::iterator i = sellist.begin();
	i!=sellist.end(); ++i)
       {(*i)->setDPDlnr(dpdlnr);
        (*i)->setDPDDatum();
       }
    }         

 catch(SQLerror &e)
   {tr.rollback();
    return false;
   }
 
 tr.commit();
 return true;
}


#endif
