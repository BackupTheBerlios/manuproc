// generated 2006/5/22 16:46:05 CEST by christof@vesta.petig-baender.de
// using glademm V2.12.1
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- auftrag.glade
// for gtk 2.8.17 and gtkmm 2.8.5
//
// Please modify the corresponding derived classes in ./src/auftrag_provision.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#include <sigc++/bind.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "auftrag_provision_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/buttonbox.h>
#include <gtkmm/label.h>
#include <gtkmm/frame.h>
#include <gtkmm/box.h>
#include <gtkmm/table.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/scrolledwindow.h>
#ifndef ENABLE_NLS
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif


auftrag_provision_glade::auftrag_provision_glade(
)
{  auftrag_provision = this;
   gmm_data = new GlademmData(get_accel_group());
   prov_ok = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-close")));
   prov_aufkunde = new class KundenBox2();
   
   Gtk::Label *label160 = Gtk::manage(new class Gtk::Label(_("Kunde")));
   Gtk::Frame *frame49 = Gtk::manage(new class Gtk::Frame());
   prov_aufnr = Gtk::manage(new class Gtk::Entry());
   
   Gtk::Label *label161 = Gtk::manage(new class Gtk::Label(_("Nummer")));
   Gtk::Frame *frame47 = Gtk::manage(new class Gtk::Frame());
   prov_aufdatum = new class datewin();
   
   Gtk::Label *label162 = Gtk::manage(new class Gtk::Label(_("vom")));
   Gtk::Frame *frame48 = Gtk::manage(new class Gtk::Frame());
   Gtk::HBox *hbox28 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Table *table27 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::Label *label159 = Gtk::manage(new class Gtk::Label(_("Auftrag")));
   main_frame = Gtk::manage(new class Gtk::Frame());
   prov_enable = Gtk::manage(new class Gtk::CheckButton(_("Provision gewähren")));
   prov_verkaeufer = new class KundenBox2();
   
   Gtk::Label *label164 = Gtk::manage(new class Gtk::Label(_("Verkäufer")));
   Gtk::Frame *frame51 = Gtk::manage(new class Gtk::Frame());
   Gtk::Label *label100 = Gtk::manage(new class Gtk::Label(_("Provision setzten auf ")));
   Gtk::Adjustment *prov_provsatz_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 100, 1, 10, 10));
   prov_provsatz = Gtk::manage(new class Gtk::SpinButton(*prov_provsatz_adj, 1, 2));
   
   Gtk::Label *label108 = Gtk::manage(new class Gtk::Label(_("%")));
   prov_apply = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-apply")));
   
   Gtk::HBox *hbox27 = Gtk::manage(new class Gtk::HBox(false, 0));
   prov_aufentries = Gtk::manage(new class Gtk::TreeView());
   
   Gtk::ScrolledWindow *scrolledwindow17 = Gtk::manage(new class Gtk::ScrolledWindow());
   Gtk::Label *label166 = Gtk::manage(new class Gtk::Label(_("Auftragspositionen")));
   entry_frame = Gtk::manage(new class Gtk::Frame());
   
   Gtk::VBox *vbox22 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::VBox *vbox21 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label165 = Gtk::manage(new class Gtk::Label(_("Provisionierung")));
   Gtk::Frame *frame52 = Gtk::manage(new class Gtk::Frame());
   Gtk::VBox *vbox20 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label163 = Gtk::manage(new class Gtk::Label(_("Verkäufer & Provision")));
   verkprov_frame = Gtk::manage(new class Gtk::Frame());
   
   Gtk::VBox *vbox19 = Gtk::manage(new class Gtk::VBox(false, 0));
   prov_ok->set_flags(Gtk::CAN_FOCUS);
   prov_ok->set_flags(Gtk::CAN_DEFAULT);
   prov_ok->set_relief(Gtk::RELIEF_NORMAL);
   auftrag_provision->get_action_area()->property_layout_style().set_value(Gtk::BUTTONBOX_END);
   prov_aufkunde->set_sensitive(false);
   label160->set_alignment(0.5,0.5);
   label160->set_padding(0,0);
   label160->set_justify(Gtk::JUSTIFY_LEFT);
   label160->set_line_wrap(false);
   label160->set_use_markup(false);
   label160->set_selectable(false);
   frame49->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame49->set_label_align(0,0.5);
   frame49->add(*prov_aufkunde);
   frame49->set_label_widget(*label160);
   prov_aufnr->set_sensitive(false);
   prov_aufnr->set_flags(Gtk::CAN_FOCUS);
   prov_aufnr->set_visibility(true);
   prov_aufnr->set_editable(false);
   prov_aufnr->set_max_length(0);
   prov_aufnr->set_text("");
   prov_aufnr->set_has_frame(true);
   prov_aufnr->set_activates_default(false);
   label161->set_alignment(0.5,0.5);
   label161->set_padding(0,0);
   label161->set_justify(Gtk::JUSTIFY_LEFT);
   label161->set_line_wrap(false);
   label161->set_use_markup(false);
   label161->set_selectable(false);
   frame47->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame47->set_label_align(0,0.5);
   frame47->add(*prov_aufnr);
   frame47->set_label_widget(*label161);
   prov_aufdatum->set_sensitive(false);
   label162->set_alignment(0.5,0.5);
   label162->set_padding(0,0);
   label162->set_justify(Gtk::JUSTIFY_LEFT);
   label162->set_line_wrap(false);
   label162->set_use_markup(false);
   label162->set_selectable(false);
   frame48->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame48->set_label_align(0,0.5);
   frame48->add(*prov_aufdatum);
   frame48->set_label_widget(*label162);
   hbox28->pack_start(*frame47, Gtk::PACK_SHRINK, 0);
   hbox28->pack_start(*frame48, Gtk::PACK_SHRINK, 0);
   table27->set_row_spacings(0);
   table27->set_col_spacings(0);
   table27->attach(*frame49, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table27->attach(*hbox28, 0, 1, 1, 2, Gtk::AttachOptions(), Gtk::AttachOptions(), 0, 0);
   label159->set_alignment(0.5,0.5);
   label159->set_padding(0,0);
   label159->set_justify(Gtk::JUSTIFY_LEFT);
   label159->set_line_wrap(false);
   label159->set_use_markup(false);
   label159->set_selectable(false);
   main_frame->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   main_frame->set_label_align(0,0.5);
   main_frame->add(*table27);
   main_frame->set_label_widget(*label159);
   prov_enable->set_flags(Gtk::CAN_FOCUS);
   prov_enable->set_relief(Gtk::RELIEF_NORMAL);
   prov_enable->set_mode(true);
   prov_enable->set_active(true);
   label164->set_alignment(0.5,0.5);
   label164->set_padding(0,0);
   label164->set_justify(Gtk::JUSTIFY_LEFT);
   label164->set_line_wrap(false);
   label164->set_use_markup(false);
   label164->set_selectable(false);
   frame51->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame51->set_label_align(0,0.5);
   frame51->add(*prov_verkaeufer);
   frame51->set_label_widget(*label164);
   label100->set_alignment(0.5,0.5);
   label100->set_padding(0,0);
   label100->set_justify(Gtk::JUSTIFY_CENTER);
   label100->set_line_wrap(false);
   label100->set_use_markup(false);
   label100->set_selectable(false);
   prov_provsatz->set_flags(Gtk::CAN_FOCUS);
   prov_provsatz->set_update_policy(Gtk::UPDATE_ALWAYS);
   prov_provsatz->set_numeric(true);
   prov_provsatz->set_digits(2);
   prov_provsatz->set_wrap(false);
   label108->set_alignment(0.5,0.5);
   label108->set_padding(0,0);
   label108->set_justify(Gtk::JUSTIFY_CENTER);
   label108->set_line_wrap(false);
   label108->set_use_markup(false);
   label108->set_selectable(false);
   prov_apply->set_sensitive(false);
   prov_apply->set_flags(Gtk::CAN_FOCUS);
   prov_apply->set_flags(Gtk::CAN_DEFAULT);
   prov_apply->set_relief(Gtk::RELIEF_NORMAL);
   hbox27->pack_start(*label100, Gtk::PACK_SHRINK, 0);
   hbox27->pack_start(*prov_provsatz, Gtk::PACK_SHRINK, 0);
   hbox27->pack_start(*label108, Gtk::PACK_SHRINK, 0);
   hbox27->pack_start(*prov_apply, Gtk::PACK_SHRINK, 0);
   prov_aufentries->set_flags(Gtk::CAN_FOCUS);
   prov_aufentries->set_headers_visible(true);
   prov_aufentries->set_rules_hint(false);
   prov_aufentries->set_reorderable(false);
   prov_aufentries->set_enable_search(true);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=5
   prov_aufentries->set_fixed_height_mode(false);
   prov_aufentries->set_hover_selection(false);
   prov_aufentries->set_hover_expand(false);
#endif //
   scrolledwindow17->set_shadow_type(Gtk::SHADOW_IN);
   scrolledwindow17->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow17->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow17->add(*prov_aufentries);
   label166->set_alignment(0.5,0.5);
   label166->set_padding(0,0);
   label166->set_justify(Gtk::JUSTIFY_LEFT);
   label166->set_line_wrap(false);
   label166->set_use_markup(false);
   label166->set_selectable(false);
   entry_frame->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   entry_frame->set_label_align(0,0.5);
   entry_frame->add(*scrolledwindow17);
   entry_frame->set_label_widget(*label166);
   vbox22->pack_start(*entry_frame);
   vbox21->pack_start(*hbox27, Gtk::PACK_SHRINK, 0);
   vbox21->pack_start(*vbox22);
   label165->set_alignment(0.5,0.5);
   label165->set_padding(0,0);
   label165->set_justify(Gtk::JUSTIFY_LEFT);
   label165->set_line_wrap(false);
   label165->set_use_markup(false);
   label165->set_selectable(false);
   frame52->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame52->set_label_align(0,0.5);
   frame52->add(*vbox21);
   frame52->set_label_widget(*label165);
   vbox20->pack_start(*prov_enable, Gtk::PACK_SHRINK, 0);
   vbox20->pack_start(*frame51, Gtk::PACK_SHRINK, 0);
   vbox20->pack_start(*frame52);
   label163->set_alignment(0.5,0.5);
   label163->set_padding(0,0);
   label163->set_justify(Gtk::JUSTIFY_LEFT);
   label163->set_line_wrap(false);
   label163->set_use_markup(false);
   label163->set_selectable(false);
   verkprov_frame->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   verkprov_frame->set_label_align(0,0.5);
   verkprov_frame->add(*vbox20);
   verkprov_frame->set_label_widget(*label163);
   vbox19->pack_start(*main_frame, Gtk::PACK_SHRINK, 0);
   vbox19->pack_start(*verkprov_frame);
   auftrag_provision->get_vbox()->set_homogeneous(false);
   auftrag_provision->get_vbox()->set_spacing(8);
   auftrag_provision->get_vbox()->pack_start(*vbox19);
   auftrag_provision->set_title(_("Provisionierung"));
   auftrag_provision->set_default_size(600,500);
   auftrag_provision->set_modal(true);
   auftrag_provision->property_window_position().set_value(Gtk::WIN_POS_NONE);
   auftrag_provision->set_resizable(true);
   auftrag_provision->property_destroy_with_parent().set_value(false);
   auftrag_provision->set_has_separator(true);
   auftrag_provision->add_action_widget(*prov_ok, -7);
   prov_ok->show();
   prov_aufkunde->show();
   label160->show();
   frame49->show();
   prov_aufnr->show();
   label161->show();
   frame47->show();
   prov_aufdatum->show();
   label162->show();
   frame48->show();
   hbox28->show();
   table27->show();
   label159->show();
   main_frame->show();
   prov_enable->show();
   prov_verkaeufer->show();
   label164->show();
   frame51->show();
   label100->show();
   prov_provsatz->show();
   label108->show();
   prov_apply->show();
   hbox27->show();
   prov_aufentries->show();
   scrolledwindow17->show();
   label166->show();
   entry_frame->show();
   vbox22->show();
   vbox21->show();
   label165->show();
   frame52->show();
   vbox20->show();
   label163->show();
   verkprov_frame->show();
   vbox19->show();
   auftrag_provision->show();
   prov_ok->signal_clicked().connect(SigC::slot(*this, &auftrag_provision_glade::on_prov_ok_clicked), false);
   prov_enable->signal_toggled().connect(SigC::slot(*this, &auftrag_provision_glade::on_prov_enable_toggled), true);
   prov_verkaeufer->signal_activate().connect(SigC::slot(*this, &auftrag_provision_glade::on_prov_verk_activate));
   prov_provsatz->signal_changed().connect(SigC::slot(*this, &auftrag_provision_glade::on_prov_provsatz_changed), false);
   prov_apply->signal_clicked().connect(SigC::slot(*this, &auftrag_provision_glade::on_prov_apply_clicked), false);
}

auftrag_provision_glade::~auftrag_provision_glade()
{  delete prov_aufkunde;
   delete prov_aufdatum;
   delete prov_verkaeufer;
   delete gmm_data;
}
