// generated 2004/5/17 16:24:34 CEST by jacek@jaceksdell.(none)
// using glademm V2.0.0.2
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- mpc_agent.glade
// for gtk 2.2.4 and gtkmm 2.2.8
//
// Please modify the corresponding derived classes in ./src/mpc_agent.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include "mpc_agent_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/button.h>
#include <gtkmm/image.h>
#include <gtkmm/stockid.h>
#include <gtkmm/toolbar.h>
#include <gtkmm/box.h>
#include <gtkmm/label.h>
#include <gtkmm/frame.h>
#include <gtkmm/table.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/scrolledwindow.h>

mpc_agent_glade::mpc_agent_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  
   
   Gtk::Window *mpc_agent = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::Toolbar *toolbar1 = Gtk::manage(new class Gtk::Toolbar());
   kunde = new class EingabeBox(3);
   
   Gtk::Toolbar *toolbar3 = Gtk::manage(new class Gtk::Toolbar());
   Gtk::HBox *hbox3 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label3 = Gtk::manage(new class Gtk::Label("customer"));
   Gtk::Frame *frame2 = Gtk::manage(new class Gtk::Frame());
   Gtk::HBox *hbox2 = Gtk::manage(new class Gtk::HBox(false, 0));
   label_orderdate = Gtk::manage(new class Gtk::Label("dated"));
   orderid = new class SearchComboContent<int>();
   
   Gtk::Label *label1 = Gtk::manage(new class Gtk::Label("order ID "));
   label_orderid_prefix = Gtk::manage(new class Gtk::Label("-"));
   
   Gtk::Table *table1 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::Label *label8 = Gtk::manage(new class Gtk::Label("order"));
   Gtk::Frame *frame5 = Gtk::manage(new class Gtk::Frame());
   Gtk::HBox *hbox4 = Gtk::manage(new class Gtk::HBox(false, 0));
   article_entry = new class SearchComboContent<std::string>();
   
   Gtk::HBox *hbox7 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label13 = Gtk::manage(new class Gtk::Label("article"));
   Gtk::Frame *frame7 = Gtk::manage(new class Gtk::Frame());
   width_entry = new class SearchComboContent<std::string>();
   
   Gtk::HBox *hbox8 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label14 = Gtk::manage(new class Gtk::Label("width"));
   Gtk::Frame *frame8 = Gtk::manage(new class Gtk::Frame());
   color_entry = new class SearchComboContent<std::string>();
   
   Gtk::HBox *hbox9 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label15 = Gtk::manage(new class Gtk::Label("color"));
   Gtk::Frame *frame9 = Gtk::manage(new class Gtk::Frame());
   makeup_entry = new class SearchComboContent<std::string>();
   
   Gtk::HBox *hbox10 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label12 = Gtk::manage(new class Gtk::Label("make-up"));
   Gtk::Frame *frame6 = Gtk::manage(new class Gtk::Frame());
   Gtk::HBox *hbox6 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label10 = Gtk::manage(new class Gtk::Label("article ident."));
   ean_entry = new class SearchComboContent<std::string>();
   
   Gtk::HBox *hbox11 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label16 = Gtk::manage(new class Gtk::Label("Code"));
   Gtk::Frame *frame10 = Gtk::manage(new class Gtk::Frame());
   Gtk::Label *label11 = Gtk::manage(new class Gtk::Label("EAN"));
   artikel_notebook = Gtk::manage(new class Gtk::Notebook());
   
   Gtk::HBox *hbox_artikel = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label4 = Gtk::manage(new class Gtk::Label("order row"));
   Gtk::Frame *frame3 = Gtk::manage(new class Gtk::Frame());
   Gtk::Adjustment *menge_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 1000, 1, 10, 10));
   menge = Gtk::manage(new class Gtk::SpinButton(*menge_adj, 1, 0));
   
   Gtk::Label *label2 = Gtk::manage(new class Gtk::Label("amount"));
   Gtk::Frame *frame1 = Gtk::manage(new class Gtk::Frame());
   Gtk::Toolbar *toolbar2 = Gtk::manage(new class Gtk::Toolbar());
   Gtk::Toolbar *toolbar4 = Gtk::manage(new class Gtk::Toolbar());
   Gtk::VBox *vbox3 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::HBox *hbox1 = Gtk::manage(new class Gtk::HBox(false, 0));
   order = new class SimpleTree(6);
   
   Gtk::ScrolledWindow *scrolledwindow1 = Gtk::manage(new class Gtk::ScrolledWindow());
   Gtk::VBox *vbox2 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label5 = Gtk::manage(new class Gtk::Label("order entries"));
   Gtk::Frame *frame4 = Gtk::manage(new class Gtk::Frame());
   Gtk::VBox *vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Quit", *manage(new Gtk::Image(Gtk::StockID("gtk-quit"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *beenden = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("New Order", *manage(new Gtk::Image(Gtk::StockID("gtk-new"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   neu = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Send Order", *manage(new Gtk::Image(Gtk::StockID("gtk-jump-to"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *senden = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Clear", *manage(new Gtk::Image(Gtk::StockID("gtk-clear"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   clear = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Search", *manage(new Gtk::Image(Gtk::StockID("gtk-find"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *customer_search = static_cast<Gtk::Button *>(toolbar3->tools().back().get_widget());
   
   toolbar2->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("OK", *manage(new Gtk::Image(Gtk::StockID("gtk-ok"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   artikel_ok = static_cast<Gtk::Button *>(toolbar2->tools().back().get_widget());
   
   toolbar2->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Cancel", *manage(new Gtk::Image(Gtk::StockID("gtk-cancel"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *artikel_cancel = static_cast<Gtk::Button *>(toolbar2->tools().back().get_widget());
   
   toolbar4->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("delete row", *manage(new Gtk::Image(Gtk::StockID("gtk-delete"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   artikel_del = static_cast<Gtk::Button *>(toolbar4->tools().back().get_widget());
   beenden->set_size_request(60,-1);
   neu->set_sensitive(false);
   toolbar1->set_tooltips(true);
   toolbar1->set_toolbar_style(Gtk::TOOLBAR_BOTH);
   toolbar1->set_orientation(Gtk::ORIENTATION_HORIZONTAL);
   toolbar3->set_tooltips(true);
   toolbar3->set_toolbar_style(Gtk::TOOLBAR_BOTH);
   toolbar3->set_orientation(Gtk::ORIENTATION_HORIZONTAL);
   hbox3->pack_start(*kunde);
   hbox3->pack_start(*toolbar3, Gtk::PACK_SHRINK, 0);
   label3->set_alignment(0.5,0.5);
   label3->set_padding(0,0);
   label3->set_justify(Gtk::JUSTIFY_LEFT);
   label3->set_line_wrap(false);
   label3->set_use_markup(false);
   label3->set_selectable(false);
   frame2->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame2->set_label_align(0,0.5);
   frame2->add(*hbox3);
   frame2->set_label_widget(*label3);
   hbox2->pack_start(*frame2, Gtk::PACK_SHRINK, 0);
   label_orderdate->set_alignment(0,0.5);
   label_orderdate->set_padding(5,0);
   label_orderdate->set_justify(Gtk::JUSTIFY_LEFT);
   label_orderdate->set_line_wrap(false);
   label_orderdate->set_use_markup(false);
   label_orderdate->set_selectable(false);
   label1->set_alignment(0,0.5);
   label1->set_padding(10,0);
   label1->set_justify(Gtk::JUSTIFY_LEFT);
   label1->set_line_wrap(false);
   label1->set_use_markup(false);
   label1->set_selectable(false);
   label_orderid_prefix->set_alignment(0,0.5);
   label_orderid_prefix->set_padding(0,0);
   label_orderid_prefix->set_justify(Gtk::JUSTIFY_RIGHT);
   label_orderid_prefix->set_line_wrap(false);
   label_orderid_prefix->set_use_markup(false);
   label_orderid_prefix->set_selectable(false);
   table1->set_row_spacings(0);
   table1->set_col_spacings(0);
   table1->attach(*label_orderdate, 3, 4, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table1->attach(*orderid, 2, 3, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 0, 0);
   table1->attach(*label1, 0, 1, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table1->attach(*label_orderid_prefix, 1, 2, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   label8->set_alignment(0.5,0.5);
   label8->set_padding(0,0);
   label8->set_justify(Gtk::JUSTIFY_LEFT);
   label8->set_line_wrap(false);
   label8->set_use_markup(false);
   label8->set_selectable(false);
   frame5->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame5->set_label_align(0,0.5);
   frame5->add(*table1);
   frame5->set_label_widget(*label8);
   hbox4->pack_start(*frame5, Gtk::PACK_SHRINK, 0);
   hbox7->pack_start(*article_entry, Gtk::PACK_SHRINK, 0);
   label13->set_alignment(0.5,0.5);
   label13->set_padding(0,0);
   label13->set_justify(Gtk::JUSTIFY_LEFT);
   label13->set_line_wrap(false);
   label13->set_use_markup(false);
   label13->set_selectable(false);
   frame7->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame7->set_label_align(0,0.5);
   frame7->add(*hbox7);
   frame7->set_label_widget(*label13);
   hbox8->pack_start(*width_entry, Gtk::PACK_SHRINK, 0);
   label14->set_alignment(0.5,0.5);
   label14->set_padding(0,0);
   label14->set_justify(Gtk::JUSTIFY_LEFT);
   label14->set_line_wrap(false);
   label14->set_use_markup(false);
   label14->set_selectable(false);
   frame8->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame8->set_label_align(0,0.5);
   frame8->add(*hbox8);
   frame8->set_label_widget(*label14);
   hbox9->pack_start(*color_entry, Gtk::PACK_SHRINK, 0);
   label15->set_alignment(0.5,0.5);
   label15->set_padding(0,0);
   label15->set_justify(Gtk::JUSTIFY_LEFT);
   label15->set_line_wrap(false);
   label15->set_use_markup(false);
   label15->set_selectable(false);
   frame9->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame9->set_label_align(0,0.5);
   frame9->add(*hbox9);
   frame9->set_label_widget(*label15);
   hbox10->pack_start(*makeup_entry, Gtk::PACK_SHRINK, 0);
   label12->set_alignment(0.5,0.5);
   label12->set_padding(0,0);
   label12->set_justify(Gtk::JUSTIFY_LEFT);
   label12->set_line_wrap(false);
   label12->set_use_markup(false);
   label12->set_selectable(false);
   frame6->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame6->set_label_align(0,0.5);
   frame6->add(*hbox10);
   frame6->set_label_widget(*label12);
   hbox6->pack_start(*frame7, Gtk::PACK_SHRINK, 0);
   hbox6->pack_start(*frame8, Gtk::PACK_SHRINK, 0);
   hbox6->pack_start(*frame9, Gtk::PACK_SHRINK, 0);
   hbox6->pack_start(*frame6, Gtk::PACK_SHRINK, 0);
   label10->set_alignment(0.5,0.5);
   label10->set_padding(0,0);
   label10->set_justify(Gtk::JUSTIFY_LEFT);
   label10->set_line_wrap(false);
   label10->set_use_markup(false);
   label10->set_selectable(false);
   hbox11->pack_start(*ean_entry, Gtk::PACK_SHRINK, 0);
   label16->set_alignment(0.5,0.5);
   label16->set_padding(0,0);
   label16->set_justify(Gtk::JUSTIFY_LEFT);
   label16->set_line_wrap(false);
   label16->set_use_markup(false);
   label16->set_selectable(false);
   frame10->set_sensitive(false);
   frame10->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame10->set_label_align(0,0.5);
   frame10->add(*hbox11);
   frame10->set_label_widget(*label16);
   label11->set_alignment(0.5,0.5);
   label11->set_padding(0,0);
   label11->set_justify(Gtk::JUSTIFY_LEFT);
   label11->set_line_wrap(false);
   label11->set_use_markup(false);
   label11->set_selectable(false);
   artikel_notebook->set_flags(Gtk::CAN_FOCUS);
   artikel_notebook->set_show_tabs(true);
   artikel_notebook->set_show_border(true);
   artikel_notebook->set_tab_pos(Gtk::POS_TOP);
   artikel_notebook->set_scrollable(false);
   artikel_notebook->append_page(*hbox6, *label10);
   artikel_notebook->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   artikel_notebook->append_page(*frame10, *label11);
   artikel_notebook->pages().back().set_tab_label_packing(false, false, Gtk::PACK_START);
   hbox_artikel->pack_start(*artikel_notebook, Gtk::PACK_SHRINK, 0);
   label4->set_alignment(0.5,0.5);
   label4->set_padding(0,0);
   label4->set_justify(Gtk::JUSTIFY_LEFT);
   label4->set_line_wrap(false);
   label4->set_use_markup(false);
   label4->set_selectable(false);
   frame3->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame3->set_label_align(0,0.5);
   frame3->add(*hbox_artikel);
   frame3->set_label_widget(*label4);
   menge->set_flags(Gtk::CAN_FOCUS);
   menge->set_update_policy(Gtk::UPDATE_ALWAYS);
   menge->set_numeric(true);
   menge->set_digits(0);
   menge->set_wrap(false);
   label2->set_alignment(0.5,0.5);
   label2->set_padding(0,0);
   label2->set_justify(Gtk::JUSTIFY_LEFT);
   label2->set_line_wrap(false);
   label2->set_use_markup(false);
   label2->set_selectable(false);
   frame1->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame1->set_label_align(0,0.5);
   frame1->add(*menge);
   frame1->set_label_widget(*label2);
   artikel_ok->set_size_request(60,-1);
   artikel_ok->set_flags(Gtk::CAN_FOCUS);
   artikel_cancel->set_flags(Gtk::CAN_FOCUS);
   toolbar2->set_tooltips(true);
   toolbar2->set_toolbar_style(Gtk::TOOLBAR_BOTH);
   toolbar2->set_orientation(Gtk::ORIENTATION_HORIZONTAL);
   artikel_del->set_sensitive(false);
   toolbar4->set_tooltips(true);
   toolbar4->set_toolbar_style(Gtk::TOOLBAR_BOTH);
   toolbar4->set_orientation(Gtk::ORIENTATION_HORIZONTAL);
   vbox3->pack_start(*toolbar2, Gtk::PACK_SHRINK, 0);
   vbox3->pack_start(*toolbar4, Gtk::PACK_SHRINK, 0);
   hbox1->pack_start(*frame3, Gtk::PACK_SHRINK, 0);
   hbox1->pack_start(*frame1, Gtk::PACK_SHRINK, 0);
   hbox1->pack_start(*vbox3, Gtk::PACK_SHRINK, 0);
   scrolledwindow1->set_flags(Gtk::CAN_FOCUS);
   scrolledwindow1->set_shadow_type(Gtk::SHADOW_NONE);
   scrolledwindow1->set_policy(Gtk::POLICY_ALWAYS, Gtk::POLICY_ALWAYS);
   scrolledwindow1->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow1->add(*order);
   vbox2->pack_start(*scrolledwindow1);
   label5->set_alignment(0.5,0.5);
   label5->set_padding(0,0);
   label5->set_justify(Gtk::JUSTIFY_LEFT);
   label5->set_line_wrap(false);
   label5->set_use_markup(false);
   label5->set_selectable(false);
   frame4->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame4->set_label_align(0,0.5);
   frame4->add(*vbox2);
   frame4->set_label_widget(*label5);
   vbox1->pack_start(*toolbar1, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*hbox2, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*hbox4, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*hbox1, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*frame4);
   mpc_agent->set_title("MPC Agent");
   mpc_agent->set_default_size(800,600);
   mpc_agent->set_modal(false);
   mpc_agent->property_window_position().set_value(Gtk::WIN_POS_NONE);
   mpc_agent->set_resizable(true);
   mpc_agent->property_destroy_with_parent().set_value(true);
   mpc_agent->add(*vbox1);
   toolbar1->show();
   kunde->show();
   toolbar3->show();
   hbox3->show();
   label3->show();
   frame2->show();
   hbox2->show();
   label_orderdate->show();
   orderid->show();
   label1->show();
   label_orderid_prefix->show();
   table1->show();
   label8->show();
   frame5->show();
   hbox4->show();
   article_entry->show();
   hbox7->show();
   label13->show();
   frame7->show();
   width_entry->show();
   hbox8->show();
   label14->show();
   frame8->show();
   color_entry->show();
   hbox9->show();
   label15->show();
   frame9->show();
   makeup_entry->show();
   hbox10->show();
   label12->show();
   frame6->show();
   hbox6->show();
   label10->show();
   ean_entry->show();
   hbox11->show();
   label16->show();
   frame10->show();
   label11->show();
   artikel_notebook->show();
   hbox_artikel->show();
   label4->show();
   frame3->show();
   menge->show();
   label2->show();
   frame1->show();
   toolbar2->show();
   toolbar4->show();
   vbox3->show();
   hbox1->show();
   order->show();
   scrolledwindow1->show();
   vbox2->show();
   label5->show();
   frame4->show();
   vbox1->show();
   mpc_agent->show();
   beenden->signal_clicked().connect(SigC::slot(*this, &mpc_agent_glade::on_beenden_activate));
   neu->signal_clicked().connect(SigC::slot(*this, &mpc_agent_glade::on_neu_clicked));
   senden->signal_clicked().connect(SigC::slot(*this, &mpc_agent_glade::on_senden_clicked));
   clear->signal_clicked().connect(SigC::slot(*this, &mpc_agent_glade::on_clear_activate));
   kunde->signal_activate().connect(SigC::slot(*this, &mpc_agent_glade::on_kunde_activate));
   kunde->signal_activate_entry().connect(SigC::slot(*this, &mpc_agent_glade::on_activate_entry));
   customer_search->signal_clicked().connect(SigC::slot(*this, &mpc_agent_glade::on_customer_search_clicked));
   orderid->signal_activate().connect(SigC::slot(*this, &mpc_agent_glade::on_orderid_activate));
   orderid->signal_search().connect(SigC::slot(*this, &mpc_agent_glade::on_orderid_search));
   article_entry->signal_search().connect(SigC::slot(*this, &mpc_agent_glade::on_article_entry_search));
   article_entry->signal_activate().connect(SigC::slot(*this, &mpc_agent_glade::on_article_entry_activate));
   width_entry->signal_search().connect(SigC::slot(*this, &mpc_agent_glade::on_width_entry_search));
   width_entry->signal_activate().connect(SigC::slot(*this, &mpc_agent_glade::on_width_entry_activate));
   color_entry->signal_search().connect(SigC::slot(*this, &mpc_agent_glade::on_color_entry_search));
   color_entry->signal_activate().connect(SigC::slot(*this, &mpc_agent_glade::on_color_entry_activate));
   makeup_entry->signal_search().connect(SigC::slot(*this, &mpc_agent_glade::on_makeup_entry_search));
   makeup_entry->signal_activate().connect(SigC::slot(*this, &mpc_agent_glade::on_makeup_entry_activate));
   ean_entry->signal_search().connect(SigC::slot(*this, &mpc_agent_glade::on_ean_entry_search));
   ean_entry->signal_activate().connect(SigC::slot(*this, &mpc_agent_glade::on_ean_entry_activate));
   menge->signal_activate().connect(SigC::slot(*this, &mpc_agent_glade::on_menge_editing_done));
   artikel_ok->signal_clicked().connect(SigC::slot(*this, &mpc_agent_glade::on_artikel_ok_clicked));
   artikel_cancel->signal_clicked().connect(SigC::slot(*this, &mpc_agent_glade::on_artikel_cancel_clicked));
   artikel_del->signal_clicked().connect(SigC::slot(*this, &mpc_agent_glade::on_artikel_del_clicked));
   order->signal_leaf_selected().connect(SigC::slot(*this, &mpc_agent_glade::on_order_leaf_selected));
   order->signal_leaf_unselected().connect(SigC::slot(*this, &mpc_agent_glade::on_order_leaf_unselected));
}

mpc_agent_glade::~mpc_agent_glade()
{  delete kunde;
   delete orderid;
   delete article_entry;
   delete width_entry;
   delete color_entry;
   delete makeup_entry;
   delete ean_entry;
   delete order;
   delete gmm_data;
}
