#include "Artikeleingabe.hh"
//#include <Aux/Transaction.h>
#include <Aux/EntryValueIntString.h>
#include "Auftrag/auftrag_status.h"
#include <Auftrag/AuftragBase.h>
#include <Artikel/ArtikelBezeichnung.h>
exec sql include sqlca;

void Artikeleingabe::get_artikel_list(ppsInstanz::ID instanz)
{
 try{
  vec_artbase.clear();
  exec sql begin declare section;
   unsigned long int ID;
   char query[1024];
  exec sql end declare section;
  std::string squery;
  if(checkbutton_offene_auftraege->get_active()) 
   {
     AufStatVal status = OPEN;  

     squery = "SELECT distinct artikelid from auftragentry "
      		"where status="+itos(status);
   }
  else
   squery ="select id from artikelstamm where bestellen_bei="+itos(instanz);

  snprintf(query,sizeof(query),squery.c_str());
  exec sql prepare allartein_ from :query;
  exec sql declare allartein cursor for allartein_;
  Transaction tr;
  exec sql open allartein;
  SQLerror::test(__FILELINE__,100);
  while(true)
   {
     exec sql fetch allartein into :ID;
     SQLerror::test(__FILELINE__,100);
     if(sqlca.sqlcode) break;
     vec_artbase.push_back(ArtikelBase(ID));
   }
  exec sql close allartein;
  tr.close();
 } catch (SQLerror &e) {}
}

void Artikeleingabe::fill_eingabebox(int nr)
{
   if (nr==AuftragBase::plan_auftrag_id) 
    { vec_eingabe.clear();
      list_sig.clear();
    }
   if (nr==AuftragBase::dispo_auftrag_id) 
    { vec_alias_eingabe.clear();
      list_sig2.clear();
    }
   exec sql begin declare section;
      int db_atyp, db_aid, db_sigV[20];
      char db_bezV[20][50],db_spaV[20][50]; 
   exec sql end declare section;
   cH_ExtBezSchema schema = artikelbox->getBezSchema();
   if(nr==AuftragBase::plan_auftrag_id)
     {
      db_atyp=schema->Typ();
      db_aid =schema->Id();
     }
   if(nr==AuftragBase::dispo_auftrag_id)
     {
      if(alias_schema->get_value()==1) 
         db_atyp=alias_warengruppe->get_value();
      else 
         db_atyp=schema->Typ();
      db_aid =alias_schema->get_value();
//cout << db_atyp<<'\n';
     }
   // genau das tut ExtBezSchema::ExtBezSchema, warum verdoppelt ?? CP
   exec sql select signifikanz, bezkomptext, spaltenname 
      into :db_sigV,:db_bezV,:db_spaV
      from extbezschema where artikeltyp = :db_atyp  
      and extartbezid = :db_aid 
      and spaltenname!='id'
      order by signifikanz,bezkomptype limit 20;
   SQLerror::test(__FILELINE__,100);
   if (!sqlca.sqlcode)
   {  
     int sanz = sqlca.sqlerrd[2];
     if(nr==AuftragBase::plan_auftrag_id) eingabebox->set_size(sanz);
     if(nr==AuftragBase::dispo_auftrag_id) alias_eingabe->set_size(sanz);
     cH_ArtikelBezeichnung AB(artikelbox->get_value(),db_aid);
     int sigmem=-99;
     int x=-1;
     for (int i=0;i<sanz;++i)
      {
//        if (!strncmp(db_bezV[i],"ID",sizeof db_bezV[i] )) continue;
        if (nr==AuftragBase::plan_auftrag_id) 
           { vec_eingabe.push_back(st_eingabe(db_spaV[i],db_sigV[i]));
             list_sig.push_back(db_sigV[i]); }
        if (nr==AuftragBase::dispo_auftrag_id) 
           { vec_alias_eingabe.push_back(st_eingabe(db_spaV[i],db_sigV[i]));
             list_sig2.push_back(db_sigV[i]); }
        if(nr==AuftragBase::plan_auftrag_id)eingabebox->set_label(i,db_bezV[i]);
        if(nr==AuftragBase::dispo_auftrag_id)alias_eingabe->set_label(i,db_bezV[i]);
        if(sigmem==db_sigV[i]) ++x;
        else {x=0;sigmem=db_sigV[i];}
        if(nr==AuftragBase::plan_auftrag_id)eingabebox->set_value(i,AB->Komponente(x,db_sigV[i]));
	if(nr==AuftragBase::dispo_auftrag_id)
	  {alias_eingabe->set_value(i,"");
	   if(((ExtBezSchema::ID)db_aid)==AB->getExtBezSchema()->Id()) // defaultschema will ich nicht sehen
	     alias_eingabe->set_value(i,AB->Komponente(x,db_sigV[i]));
	  }
	
      }
     list_sig.sort();
     list_sig.unique();
     list_sig2.sort();
     list_sig2.unique();
   }
}


void Artikeleingabe::save_edited_artikel()
{
  cH_ExtBezSchema schema = artikelbox->getBezSchema();
  std::string squery = "update artbez_"+itos(schema->Typ())+"_"+
         itos(schema->Id())+" set ";

  std::vector<bool> vec_all_empty;
  for(std::list<int>::const_iterator i=list_sig.begin();i!=list_sig.end();++i)
   {
     bool all_empty=true;
     for(unsigned int j=0;j<vec_eingabe.size();++j)
      {
        if( (*i) == vec_eingabe[j].signifikanz && 
            eingabebox->get_value(j) != "" ) all_empty=false ;
      }
     vec_all_empty.push_back(all_empty);
   }
  int count=0;
  int memsig=vec_eingabe[0].signifikanz;
  for (unsigned int i=0;i<vec_eingabe.size();++i)
   {
     if(memsig!=vec_eingabe[i].signifikanz)
      {
        ++count;
        memsig=vec_eingabe[i].signifikanz;
      }
     if(vec_all_empty[count]==true)
        squery += vec_eingabe[i].spalte +"=null, ";
     else
        squery += vec_eingabe[i].spalte +"='"+eingabebox->get_value(i)+"', ";
   }
  squery += " stand=now() where id='"+itos(fuer_artikel.Id())+"'";
  Query::Execute(squery);
  SQLerror::test(__FILELINE__);
}

bool Artikeleingabe::update_edited_artikel2()
{
  std::string squery = "update artbez_"+itos(alias_warengruppe->get_value())+"_"+
         itos(alias_schema->get_value())+" set ";

  std::vector<bool> vec_all_empty;
  for(std::list<int>::const_iterator i=list_sig2.begin();i!=list_sig2.end();++i)
   {
     bool all_empty=true;
     for(unsigned int j=0;j<vec_alias_eingabe.size();++j)
      {
        if( (*i) == vec_alias_eingabe[j].signifikanz && 
            alias_eingabe->get_value(j) != "" ) all_empty=false ;
      }
     vec_all_empty.push_back(all_empty);
   }
  int count=0;
  int memsig=vec_eingabe[0].signifikanz;
  for (unsigned int i=0;i<vec_alias_eingabe.size();++i)
   {
     if(memsig!=vec_alias_eingabe[i].signifikanz)
      {
        ++count;
        memsig=vec_alias_eingabe[i].signifikanz;
      }
     if(vec_all_empty[count]==true)
        squery += vec_alias_eingabe[i].spalte +"=null, ";
     else
        squery += vec_alias_eingabe[i].spalte +"='"+alias_eingabe->get_value(i)+"', ";
   }
  squery += " stand=now() where id='"+itos(fuer_artikel.Id())+"'";
  Query::Execute(squery);
  if(sqlca.sqlcode) return false;
  return true;
}


void Artikeleingabe::save_edited_artikel2()
{
//  cH_ExtBezSchema schema = artikelbox->getBezSchema();

  std::string squery = "insert into artbez_"+itos(alias_warengruppe->get_value())+"_"+
         itos(alias_schema->get_value())+" (id,";

  std::vector<bool> vec_all_empty;
  for(std::list<int>::const_iterator i=list_sig2.begin();i!=list_sig2.end();++i)
   {
     bool all_empty=true;
     
     for(unsigned int j=0;j<vec_alias_eingabe.size();++j)
      {
        if( (*i) == vec_alias_eingabe[j].signifikanz && 
            alias_eingabe->get_value(j) != "" ) all_empty=false ;
      }
     vec_all_empty.push_back(all_empty);
   }
  for (unsigned int i=0;i<vec_alias_eingabe.size();++i)
   {
     squery += vec_alias_eingabe[i].spalte +",";
   }
  squery += "stand) values ("+itos(fuer_artikel.Id())+",";
//cout << von_artikel.Id()<<'\n';
  int count=0;
  int memsig=vec_alias_eingabe[0].signifikanz;
  for (unsigned int i=0;i<vec_alias_eingabe.size();++i)
   {
     if(memsig!=vec_alias_eingabe[i].signifikanz)
      {
        ++count;
        memsig=vec_alias_eingabe[i].signifikanz;
      }
     if(vec_all_empty[count]==true)
        squery += "null,";
     else
        squery += "'"+alias_eingabe->get_value(i)+"',";
   }
  squery += "now())" ;
  Query::Execute(squery);
  SQLerror::test(__FILELINE__);
}


void Artikeleingabe::on_button_verschmelzen_clicked()
{
  ArtikelBase neu_art = artikelbox->get_value();
  ArtikelBase alt_art = artbox_verschmelzen->get_value();
  if(neu_art.Id()==ArtikelBase::none_id || 
	alt_art.Id()==ArtikelBase::none_id) return;
  exec sql begin declare section;

  exec sql end declare section;
  std::vector<std::string> tabellen1; // Spaltenname = id
  std::vector<std::string> tabellen2; // Spaltenname = artikelid
  std::vector<std::string> tabellen3; // Spaltenname = material
  std::vector<std::string> tabellen4; // Spaltenname = artikel
  std::vector<std::string> tabellen5; // Spaltenname = art_id
  tabellen1.push_back("artikelstamm");
  tabellen1.push_back("artikelzusammensetzung");
  tabellen1.push_back("artbez_0_1");
  tabellen1.push_back("artbez_10_1");
  tabellen1.push_back("artbez_3_1");
  tabellen1.push_back("artbez_3_10000");
  tabellen1.push_back("artbez_3_362");
  tabellen1.push_back("artbez_3_629");
  tabellen1.push_back("artbez_3_704");
  tabellen1.push_back("artbez_4_1");
  tabellen1.push_back("artbez_4_10000");
  tabellen1.push_back("artbez_5_1");
  tabellen1.push_back("artbez_8_1");
  tabellen2.push_back("artikelpreise");
  tabellen2.push_back("lieferscheinentry");
  tabellen2.push_back("auftragentry");
  tabellen2.push_back("dispoentry");
  tabellen2.push_back("dispotabelle");
  tabellen2.push_back("extartbez");
  tabellen2.push_back("prod_changejournal");
  tabellen2.push_back("rl_hide");
  tabellen2.push_back("rohjumbo");
  tabellen2.push_back("rohjumbo_archiv");
  tabellen2.push_back("schaertabelle");
  tabellen2.push_back("schussdichte2");
  tabellen3.push_back("bl_inhalt");
  tabellen3.push_back("bl_log");
  tabellen3.push_back("rl_inhalt");
  tabellen3.push_back("rl_inhalt_old");
  tabellen3.push_back("rl_log");
  tabellen4.push_back("ketten_garn");
  tabellen5.push_back("maschinen_geschwindigkeit");
  
  Transaction tr;
  for (std::vector<std::string>::const_iterator i=tabellen1.begin();i!=tabellen1.end();++i)
   {
      Query::Execute("update "+*i+" set id="+itos(neu_art.Id())
         +" where id="+itos(alt_art.Id()));
   }
   {
      Query::Execute("update artikelzusammensetzung set altartikelid="
         +itos(neu_art.Id())
         +" where altartikelid="+itos(alt_art.Id()));
   }
  for (std::vector<std::string>::const_iterator i=tabellen2.begin();i!=tabellen2.end();++i)
   {
      Query::Execute("update "+*i+" set artikelid="+itos(neu_art.Id())
         +" where artikelid="+itos(alt_art.Id()));
   }
  for (std::vector<std::string>::const_iterator i=tabellen3.begin();i!=tabellen3.end();++i)
   {
      Query::Execute("update "+*i+" set material="+itos(neu_art.Id())
         +" where material="+itos(alt_art.Id()));
   }
  for (std::vector<std::string>::const_iterator i=tabellen4.begin();i!=tabellen4.end();++i)
   {
      Query::Execute("update "+*i+" set artikel="+itos(neu_art.Id())
         +" where artikel="+itos(alt_art.Id()));
   }
   {
      Query::Execute("update ketten_garn set garn="
         +itos(neu_art.Id())
         +" where garn="+itos(alt_art.Id()));
   }
  for (std::vector<std::string>::const_iterator i=tabellen5.begin();i!=tabellen5.end();++i)
   {
      Query::Execute("update "+*i+" set art_id="+itos(neu_art.Id())
         +" where art_id="+itos(alt_art.Id()));
   }
 tr.commit();
}


