// $Id: Person_sql.pgcc,v 1.17 2003/01/08 09:46:57 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Kunde/Person.h>
#include <Kunde/Telefon.h>
#include <Kunde/Kunde.h>
#include <Misc/Transaction.h>
#include <Misc/FetchIStream.h>



Person::Person(ID _id) throw(SQLerror) 
: ManuProcEntity<>(_id),anrede(1)
{  
  exec sql begin declare section;
   int ID=_id;
   int ANREDE;
   char NAME[50], VORNAME[50];
   char GEBDATE[21],NOTIZ[1500];
   int IGEBDATE;
   exec sql end declare section;

   if(_id == none_id) return;   
  
   Transaction tr;

   exec sql select name, coalesce(vname,''),
	   gebdat, coalesce(branr,0), coalesce(notiz,' ')
	   into :NAME, :VORNAME, :GEBDATE:IGEBDATE, :ANREDE,:NOTIZ
   	from ku_person where  persnr= :ID;

   SQLerror::test(__FILELINE__);

   name=NAME;
   vorname=VORNAME;
   gebdatum=IGEBDATE ? ManuProC::Datum().today() : ManuProC::Datum(GEBDATE);
   anrede=cH_Anrede(ANREDE);
   notiz=NOTIZ;	
}

int Person::nextval()
{
 exec sql begin declare section;
   unsigned int NR;
 exec sql end declare section;
 exec sql select nextval('kunden_personen_persnr_seq') into :NR;
 SQLerror::test(__FILELINE__);
 return NR;
}

int Person::createPerson(std::string s)
{
  int id=nextval();
  std::string q="insert into ku_person (persnr,name) "
      " values ("+itos(id)+",'')";
  Query::Execute(q);
  SQLerror::test(__FILELINE__);
  return id;
}

/*
void Person::update() throw(SQLerror)
{
 exec sql begin declare section;
 int PERSNR=personennr;
 int KUNDENNR=kundennr;
 int BRANR_ID;
 char *NAME, *VORNAME, *POSITION, GEBURT[15], *NOTIZP,*NOTIZF;   
 exec sql end declare section;

 NAME=(char*)name.c_str();
 VORNAME=(char*)vorname.c_str();
 POSITION=(char*)position.c_str();
 gebdatum.write_postgres(GEBURT,sizeof(GEBURT));
 BRANR_ID=branr_id;
 NOTIZP=(char*)notiz_privat.c_str();   
 NOTIZF=(char*)notiz_firma.c_str();   

 Transaction tr;

 exec sql update ku_person set
      name= :NAME, vname= :VORNAME, 
	   gebdat= :GEBURT, branr= :BRANR_ID, notiz= :NOTIZP
	   where persnr= :PERSNR;
 SQLerror::test(__FILELINE__);
 exec sql update ku_ansprech set
      kundennr=:KUNDENNR, _position= :POSITION, notiz= :NOTIZF
	   where persnr= :PERSNR;
 SQLerror::test(__FILELINE__);

 tr.commit();

}
*/

enum Person::B_UPDATE_BITS &operator++(enum Person::B_UPDATE_BITS &s)
{  ++(int&)s;
   return s;
}

void Person::update_e(UpdateBits e) throw(SQLerror)
{
  std::string query ="update ku_person set ";
  for(B_UPDATE_BITS i=B_UPDATE_BITS(0);i<B_MaxAnz;++i)
   {
     if(!(e&(1<<i))) continue;
     if      (i==B_Name)     query += "name = '"+Name()+"',";
     else if (i==B_Vorname)  query += "vname= '"+Vorname()+"',";
     else if (i==B_GebDatum) query += "gebdat= "+GebDatum().postgres_null_if_invalid()+",";
     else if (i==B_Anrede)   query += "branr= "+itos(Anrede()->Id())+",";
     else if (i==B_Notiz)    query += "notiz= '"+Notiz()+"',";
   }
 query.replace(query.rfind(","),1,"");
 query += " where persnr = "+itos(Id());
 Query::Execute(query);
 SQLerror::test(__FILELINE__);
}



void Person::delPerson(const ID pid) throw(SQLerror)
{
 exec sql begin declare section;
 int PERSNR=pid;
 exec sql end declare section;

 Transaction tr;

 exec sql delete from ku_ansprech where persnr= :PERSNR;
 SQLerror::test(__FILELINE__);
 exec sql delete from ku_person where persnr= :PERSNR;
 SQLerror::test(__FILELINE__);

 tr.commit();

}

/*
const std::vector<cH_Telefon> Person::getTelefon(cH_Kunde k) const
{
 exec sql begin declare section;
   int TELID;
   char *QS;
 exec sql end declare section;
 std::string QUERY;

 Transaction tr;
 
 
 if(k->Id() == Kunde::none_id)
   QUERY = std::string("SELECT telid FROM ku_telefon WHERE persnr=")+itos(Id());
 else
   QUERY = std::string("SELECT telid FROM ku_telefon WHERE persnr=")+itos(Id())+
	"and kundennr= "+itos(k->Id());

 QS=(char*)QUERY.c_str();

 exec sql prepare telein_pers_ from :QS;
 exec sql declare telein_pers cursor for telein_pers_;

 exec sql open telein_pers;
 SQLerror::test(__FILELINE__);

 std::list<cH_Telefon> T;
 while(true)
      {
         exec sql fetch telein_pers into :TELID;
         SQLerror::test(__FILELINE__,"teleein",100);
         if (sqlca.sqlcode) break;
         T.push_back(cH_Telefon(TELID));
      }

 exec sql close telein;
 tr.close(); 
 return T;  
}

*/

