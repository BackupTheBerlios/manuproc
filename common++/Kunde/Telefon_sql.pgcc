// $Id: Telefon_sql.pgcc,v 1.3 2002/05/09 12:46:00 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include"Telefon.h"
#include<Aux/Transaction.h>
#include<Aux/itos.h>


Telefon::Telefon(ManuProcEntity::ID _tid) throw(SQLerror)
: ManuProcEntity(_tid), kunde(none_id), person(none_id)
{
 if(entityid==none_id) return;
 exec sql begin declare section;
 int TELID=_tid;
 int KUNDENNR;
 int PERSNR;
 int NUMMER;
 int VORWAHL;
 int DURCHWAHL;
 int LAND;
 char ART[2];
 char *QU;
 char TEXT[41];
 exec sql end declare section;

 Transaction tr;

 std::string qu = std::string ("select coalesce(kundennr,"+itos(none_id)+"),"
         "coalesce(persnr,"+itos(none_id)+"),"
			"coalesce(telnr,0),coalesce(vorwahl,0),ldkenn,art,"
			"coalesce(durchwahl,-1),"
			"coalesce(substr(text,1,40),'') from ku_telefon where ");
 qu = qu+" telid="+itos(TELID);

 QU = (char*)qu.c_str();

 exec sql prepare telqu from :QU;
 exec sql declare TELCUR cursor for telqu;
 exec sql open TELCUR;
 SQLerror::test(__FILELINE__);

 exec sql fetch TELCUR into :KUNDENNR, :PERSNR, :NUMMER, :VORWAHL,
				:LAND, :ART, :DURCHWAHL, :TEXT;
 SQLerror::test(__FILELINE__,"TELCUR");
 
 person=PERSNR;
 kunde=KUNDENNR;
 nummer=st_nummer(LAND,VORWAHL,NUMMER,DURCHWAHL,(TelArt)ART[0]);
 text = TEXT;

 exec sql close TELCUR;
 tr.close();

}

void Telefon::getTelIDs(std::vector<Telefon::ID> &vec, const TelArt &ta, 
 		const ID kid, const ID pid) throw(SQLerror)
{
 exec sql begin declare section;
 char *QU;
 int TELID;
 exec sql end declare section;
 bool need_and=false;

 Transaction trk;

 std::string qu = std::string ("select telid from ku_telefon where ");
 if (kid!=none_id){qu = qu+" kundennr="+itos(kid); need_and=true;}
 if (pid!=none_id) 
   {if(need_and) qu=qu+" and ";
    qu = qu+"  persnr="+itos(pid); need_and=true;}
 if (ta!=TEL_NONE)
   {if(need_and) qu=qu+" and ";
    qu = qu+"  art='"+(char)ta+"'"; need_and=true;}   

 qu=qu+" order by telid";
 
 QU = (char*)qu.c_str();
 exec sql prepare telqu from :QU;
 exec sql declare TEL cursor for telqu;
 exec sql open TEL;
 SQLerror::test(__FILELINE__);

 while (true)
  { 
   exec sql fetch TEL into :TELID;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
   vec.push_back(TELID);
  } 
 exec sql close TEL;
 trk.close();

}



void Telefon::update() const throw(SQLerror)
{
 exec sql begin declare section;
 int TELID=entityid;
 int KUNDENNR=kunde;
 int PERSNR=person;
 int LAND=nummer.land;
 char *TEXT=(char*)text.c_str();
 int VORWAHL=nummer.vorwahl;
 int NUMMER=nummer.nummer;
 int DURCHWAHL=nummer.durchwahl;
 char ART[1];
 exec sql end declare section;
 
 Transaction tr;

 ART[0]=nummer.art; 
 
 if(kunde==none_id && person==none_id)
   throw(__FILELINE__"Kunde und Person dürfen nicht beide NULL sein");

 exec sql update ku_telefon set land=:LAND, vorwahl=:VORWAHL,
   telnr= :NUMMER, art= :ART, 
	kundennr= :KUNDENNR, persnr= :PERSNR,
	durchwahl= :DURCHWAHL,
	text= :TEXT where telid= :TELID;
 SQLerror::test(__FILELINE__);

 tr.commit();

}



const cH_Telefon Telefon::newTelefon(const ID kid,const ID pid,
 		const st_nummer &nr, const string text) throw(SQLerror)
{
 exec sql begin declare section;
 int TELID;
 int KUNDENNR;
 int PERSNR;
 int LAND=nr.land;
 int VORWAHL=nr.vorwahl;
 int NUMMER=nr.nummer;
 int DURCHWAHL=nr.durchwahl;
 char ART[1];
 char *TEXT=(char*)text.c_str();
 int IKUNDENNR=0, IPERSNR=0;
 exec sql end declare section;
 if(kid==none_id && pid==none_id)
   throw(__FILELINE__"Kunde und Person dürfen nicht beide NULL sein");

 Transaction tr;

 if(kid == none_id) IKUNDENNR=-1;
 else KUNDENNR=kid;
 if(pid == none_id) IPERSNR=-1;
 else PERSNR=pid;

 ART[0]=nr.art; 
 
 exec sql select nextval('kunden_telefon_telid_seq') into :TELID;
 SQLerror::test(__FILELINE__);

 exec sql insert into ku_telefon
	(telid,kundennr,persnr,ldkenn,vorwahl,telnr,art,text,durchwahl)
	values 
		(:TELID,:KUNDENNR:IKUNDENNR,:PERSNR:IPERSNR,:LAND,
		 :VORWAHL,:NUMMER,:ART,:TEXT,:DURCHWAHL);
 SQLerror::test(__FILELINE__);

 tr.commit();

 return cH_Telefon(TELID);
}

void Telefon::delTelefon(const ID tid) throw(SQLerror)
{
 exec sql begin declare section;
 int TELID=tid;
 exec sql end declare section;

 Transaction tr;

 exec sql delete from ku_telefon where telid= :TELID;

 SQLerror::test(__FILELINE__,100);

 tr.commit();
}


void Telefon::delPersonsTelefon(const ID pid) throw(SQLerror)
{
 exec sql begin declare section;
 int PERSID=pid;
 exec sql end declare section;

 Transaction tr;

 exec sql delete from ku_telefon where persnr= :PERSID;

 SQLerror::test(__FILELINE__,100);

 tr.commit();
}


