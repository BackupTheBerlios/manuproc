/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 2002 Adolf Petig GmbH & Co. KG
 *  written by Jacek Jakubowski, Christof Petig, Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "AuftragFull.h"
#include <Auftrag/selFullAufEntry.h>
#include <Aux/Trace.h>


void AuftragFull::push_back(AufEintrag aeb)
{
  eintragliste.push_back(aeb);
}



AufEintragBase AuftragFull::push_back(AuftragBase::mengen_t bestellt,
               ManuProC::Datum lieferdatum, ArtikelBase artid,
               AufStatVal status,int uid,
               Preis preis, fixedpoint<2> rabatt,const cH_PreisListe &preisliste) throw (SQLerror)
{
  ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__);
  AufEintragBase newAEB=Auftrag::push_back(bestellt,lieferdatum,artid,status,uid,true,preis,rabatt,preisliste);
  eintragliste.push_back(AufEintrag(newAEB,
      bestellt,artid,lieferdatum,getStatus(),getKundennr(),getYourAufNr(),
      preis,rabatt,status,uid,preisliste));
  return newAEB;
}


void AuftragFull::deleteEintrag(int zeilennr, int idx) throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__);
 Auftrag::deleteEintrag(zeilennr);
 iterator i = begin()+idx;
 eintragliste.erase(i);    
}

AuftragFull::AuftragFull(const AuftragBase& auftrag,bool with_storno) throw(SQLerror)
	: Auftrag(auftrag)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__);
 SelectedFullAufList aufids((SQLFullAuftragSelector)
 			(SQLFullAuftragSelector::sel_Aufid(auftrag,with_storno)));
 for(SelectedFullAufList::iterator i = aufids.aufidliste.begin();
				 	 i!=aufids.aufidliste.end(); ++i)
 {  try { eintragliste.push_back(*i);
    } catch (SQLerror &e)
    {  if(e.Code() != 100) throw;
       std::cerr << "AuftragFull::AuftragFull: " << e << '\n';
    } 
 }
}

AuftragFull::AuftragFull(Anlegen instanz, long kundennr) throw(SQLerror)
	: Auftrag(instanz, kundennr)
{  
ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__);
// braucht nicht geladen zu werden
}

int AuftragFull::get_index_by_znr(int znr)
{
  ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__);
  int c=0;
  for (AufEintragList::const_iterator i=eintragliste.begin();i!=eintragliste.end();++i,++c)
     { if((*i).getZnr()==znr) return c;}
  assert(!"AuftragFull::get_index_by_znr: nichts gefunden");
  abort();
};

void AuftragFull::setStatusAuftragFull(AufStatVal status,int uid) throw(SQLerror)
{
  ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__);
  Auftrag::setStatusAuftrag_(status);
  for (AufEintragList::iterator i=eintragliste.begin();i!=eintragliste.end();++i)
    i->setStatus(status,uid);
}

bool AuftragFull::existsEntry(const ArtikelBase::ID art, AufStatVal stat)
throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__);
 exec sql begin declare section;
 int AUFID=Id();
 int INSTANZ=Instanz();
 int ARTIKELID=art;
 int STATUS=stat;
 int BESTELLT;
 exec sql end declare section;

 exec sql select bestellt into :BESTELLT from auftragentry where
 	auftragid=:AUFID and instanz=:INSTANZ and 
 	artikelid=:ARTIKELID and
	status=:STATUS;
 SQLerror::test(__FILELINE__,100);
 
 return (sqlca.sqlcode!=100);
}


