/*  pps: ManuProC's production planning system
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "RohwarenLager.h"
#include <Artikel/ArtikelBase.h>
#include <Artikel/ArtikelBezeichnung.h>
#include <Misc/Datum.h>
#include <Misc/string0.h>
#include <Misc/SQLerror.h>
#include <Misc/Transaction.h>
#include <Misc/itos.h>
#include <Misc/Query.h>
#include <unistd.h>
#include <Misc/relops.h>
#include <Misc/TraceNV.h>
#include <Misc/Ausgabe_neu.h> // for uses UTF8

std::string RohwarenLager::st_rohlager::Menge_als_Text(Einheit const& e) const
{  std::string s;
   if (kartons) s+=itos(kartons)+" Kartons Ã  " + itos(kg_pro_karton)+ e.Bezeichnung()+" ";
   if (reste||reste_kg) s+=itos(reste) +" Reste="+ itos(reste_kg) + e.Bezeichnung();
   if (s.empty()) s="nichts";
   return s;
}

AuftragBase::mengen_t RohwarenLager::st_rohlager::Menge_fuer_Auftrag() const
{  return kartons*kg_pro_karton  + reste_kg;
}

bool RohwarenLager::RL_Entnahme(st_rohlager& rohlager,std::string &os,bool force,bool ist_leer,bool fuer_auftrag)
{
  ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,
  	NV("kartons",rohlager.kartons),NV("reste",rohlager.reste),
  	NV("artikel",rohlager.artikel.Id()),
  	NV("position",rohlager.position.SPosition()));
  Transaction tr;
   bool DUMMY=false;

  try 
  { Query("select true from rl_inhalt where position_=?") 
    << rohlager.position.SPosition()
    >> DUMMY;
  } catch (SQLerror &e) {}
  if (!DUMMY) // nichts drin
   {
     os+="An Position " +rohlager.position.SPosition()+" steht nichts mehr.";
     return false;
   }

  st_rohlager was_ist_drin = RL_Inhalt(rohlager.position);
  
  if(!force)
   {
     if(was_ist_drin.artikel!=rohlager.artikel)
      {
        os+="Auf "+rohlager.position.SPosition()+" steht "
           +cH_ArtikelBezeichnung(was_ist_drin.artikel)->Bezeichnung() 
           +" vom "+was_ist_drin.datum.c_str()
           +" ("+was_ist_drin.Menge_als_Text(Einheit(was_ist_drin.artikel))+")\n";
        return false;
      }
     if (ist_leer && (was_ist_drin.kartons!=rohlager.kartons ||
                     was_ist_drin.reste!=rohlager.reste ||
                      was_ist_drin.reste_kg!=rohlager.reste_kg))
     {
         os+="Info: Auf " + rohlager.position.SPosition()
            +" standen noch "+was_ist_drin.Menge_als_Text(Einheit(was_ist_drin.artikel))+'\n';
     }
     else if(!ist_leer && (was_ist_drin.kartons<rohlager.kartons ||
                     was_ist_drin.reste<rohlager.reste ||
                      was_ist_drin.reste_kg<rohlager.reste_kg))
     {  os+="Info: Auf "+rohlager.position.SPosition()
            +" standen nur noch "+was_ist_drin.Menge_als_Text(Einheit(was_ist_drin.artikel)) + '\n';
     }
    }
   else // force
       {
         os+="Info: Auf "+rohlager.position.SPosition() + " stand "
           +cH_ArtikelBezeichnung(was_ist_drin.artikel)->Bezeichnung() 
           +" vom "+was_ist_drin.datum.c_str()
           +" ("+was_ist_drin.Menge_als_Text(Einheit(was_ist_drin.artikel))+")\n";
       }

  std::string misc;
  if(ist_leer || force)
    {
      (Query("delete from rl_inhalt where position_=?")
        << rohlager.position.SPosition()).Check100();
      if(force) misc=(Ausgabe_neu::TeX_uses_UTF8 ? "lÃ¶sc" : "lösc");
      else misc="leer";
      rohlager=was_ist_drin;
    }  
  else 
    {
       int KARTONS;
       int RESTE;
       int RESTE_KG;
      rohlager.kg_pro_karton=was_ist_drin.kg_pro_karton;
      KARTONS=was_ist_drin.kartons-rohlager.kartons;
      if (KARTONS<0) 
      { KARTONS=0; rohlager.kartons=was_ist_drin.kartons; }
      RESTE=was_ist_drin.reste-rohlager.reste;
      if (RESTE<0) 
      { RESTE=0; rohlager.reste=was_ist_drin.reste; }
      RESTE_KG=was_ist_drin.reste_kg-rohlager.reste_kg; ;   
      if (RESTE_KG<0) 
      { RESTE_KG=0; rohlager.reste_kg=was_ist_drin.reste_kg; }

      Query("update rl_inhalt set kartons=?, reste=?,"
          "rest_kg=?, letzte_entnahme=? where position_=?")
          << KARTONS << RESTE << RESTE_KG << rohlager.datum
          << rohlager.position.SPosition();
       SQLerror::test(__FILELINE__);                  
    }

   raus_aus_lager(rohlager.artikel,rohlager.Menge_fuer_Auftrag(),fuer_auftrag);
   RL_Log(rohlager,RLEntnehmen,misc);

   tr.commit();
   return true;
}

void RohwarenLager::RL_Einlagern_real(st_rohlager& rohlager,bool geliefert)
{  if (geliefert) rein_ins_lager(rohlager.artikel,rohlager.Menge_fuer_Auftrag(),true);
   else wiedereinlagern(rohlager.artikel,rohlager.Menge_fuer_Auftrag());
   RL_Log(rohlager,RLEinlagern);
}

bool RohwarenLager::RL_Einlagern(const LagerPlatz position,st_rohlager& rohlager,std::string &os,bool force,bool geliefert)
{
  ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,
  	NV("kartons",rohlager.kartons),NV("reste",rohlager.reste),
  	NV("artikel",rohlager.artikel.Id()),
  	NV("position",position.SPosition()));
  Transaction tr;
  rohlager.setPosition(position);

   int KARTONS=rohlager.kartons;
   int KG_PER_KARTON=rohlager.kg_pro_karton;
   int RESTE=rohlager.reste;
   int RESTE_KG=rohlager.reste_kg;
   int MATERIAL=rohlager.artikel.Id();
   bool DUMMY=false;

  try 
  { Query("select true from rl_inhalt where position_=?") 
      << rohlager.position.SPosition()
      >> DUMMY;
  } catch (SQLerror &e) {}
  if (!DUMMY) // nichts drin also rein damit
   {
      Query("insert into rl_inhalt (position_, kartons, MATERIAL, "
            "KG_PER_KARTON, reste, rest_kg, eingelagert) "
        "values (?,?,?,?,?,?,?)")
        << rohlager.position.SPosition()
        << KARTONS << MATERIAL << KG_PER_KARTON
        << Query::NullIf(RESTE) << Query::NullIf(RESTE_KG)
        << rohlager.datum;
      RL_Einlagern_real(rohlager,geliefert);
      tr.commit();
      return true;
   }
  else  // ups, auf dieser Position liegt schon etwas
   {
     st_rohlager was_ist_drin = RL_Inhalt(rohlager.position);
     if(force) // überschreiben, ohne Rücksicht auf Material
      { // wird nicht als Verbrauch gerechnet
        RL_Entnahme(was_ist_drin,os,true,true,false);
        if (!os.empty()) os+='\n';
        tr.close();
        tr.open(); // neue Transaktion beginnen
        (Query("update rl_inhalt set "
                 "kartons=?, material=?, kg_per_karton=?, reste=?, "
                 "rest_kg=?, eingelagert=? where position_=?")
                  << KARTONS << MATERIAL << KG_PER_KARTON
                  << Query::NullIf(RESTE) << Query::NullIf(RESTE_KG)
                  << rohlager.datum << rohlager.position.SPosition()).Check100();
        RL_Einlagern_real(rohlager,geliefert);
        tr.commit();
        return true;
      }
     else // mal schauen ...
      {
        if(was_ist_drin.artikel==rohlager.artikel)
         {
           if (!was_ist_drin.kg_pro_karton) was_ist_drin.kg_pro_karton=rohlager.kg_pro_karton;
           if (!rohlager.kg_pro_karton) rohlager.kg_pro_karton=was_ist_drin.kg_pro_karton;
             // gleicher Artikel, gleiche PaketgrÃ¶ÃŸe also
             // neue Menge zu alter Menge hinzuaddieren und rein damit
           if (rohlager.kg_pro_karton==was_ist_drin.kg_pro_karton)
            {
              KARTONS = rohlager.kartons + was_ist_drin.kartons;
              KG_PER_KARTON=rohlager.kg_pro_karton;
              RESTE=rohlager.reste + was_ist_drin.reste;
              RESTE_KG=rohlager.reste_kg + was_ist_drin.reste_kg;    
              (Query("update rl_inhalt set "
                 "kartons=?, material=?, kg_per_karton=?, reste=?, "
                 "rest_kg=?, eingelagert=? where position_=?")
                  << KARTONS << MATERIAL << KG_PER_KARTON
                  << Query::NullIf(RESTE) << Query::NullIf(RESTE_KG)
                  << rohlager.datum << rohlager.position.SPosition()).Check100();
              RL_Einlagern_real(rohlager,geliefert);
              tr.commit();
              return true;
            }
           else 
            {
              os = "  an Position " + rohlager.position.SPosition() + " sollen "
                + itos(was_ist_drin.kg_pro_karton) + Einheit(was_ist_drin.artikel).Bezeichnung() +" "
                +  cH_ArtikelBezeichnung(was_ist_drin.artikel)->Bezeichnung()
                +  " im Karton sein.\n";
              return false;
            }
         }
        else // Die Materiaien stimmen nicht überein
         {
           os ="  an Position " +rohlager.position.SPosition()+" befindet sich "
            + cH_ArtikelBezeichnung(was_ist_drin.artikel)->Bezeichnung() + " vom "
            + was_ist_drin.datum.c_str() + " ("+itos(was_ist_drin.kartons)+"K.Ã  "
            + itos(was_ist_drin.kg_pro_karton)+ Einheit(was_ist_drin.artikel).Bezeichnung()+" " +itos(was_ist_drin.reste)+ "R.="
            + itos(was_ist_drin.reste_kg) + Einheit(was_ist_drin.artikel).Bezeichnung()+")\n";
           return false;
         }
      }  
   }
 assert(!" RohwarenLager::RL_Einlagern: Fehler");
}

void RohwarenLager::RL_Log(const st_rohlager& rohlager,RL_LogTyp typ,const std::string& misc)
{
  Query("insert into rl_log "
       "(zeit,position_, kartons, MATERIAL, KG_PER_KARTON, typ, valuta, reste, rest_kg,misc) "
       "values (now(),?,?,?,?,?,?,?,?,?)")
       << rohlager.position.SPosition() << rohlager.kartons
       << rohlager.artikel.Id() << rohlager.kg_pro_karton
       << char(typ) << rohlager.datum << rohlager.reste
       << rohlager.reste_kg << Query::NullIf(misc);
}


RohwarenLager::st_rohlager RohwarenLager::RL_Inhalt(const LagerPlatz position) const
{
  ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__);
   int KARTONS, KG_PER_KARTON, RESTE, RESTE_KG, MATERIAL;
   ManuProC::Datum DATUM;
  
  try
  { Query q("select kartons,reste,kg_per_karton,rest_kg,material, eingelagert "
      "from rl_inhalt where position_=?");
    q << position.SPosition();
    q >> Query::Row::MapNull(KARTONS) >> Query::Row::MapNull(RESTE) 
      >> Query::Row::MapNull(KG_PER_KARTON) >> Query::Row::MapNull(RESTE_KG)
      >> MATERIAL >> DATUM;
    return st_rohlager(position,KARTONS,KG_PER_KARTON,RESTE,RESTE_KG,
                  ArtikelBase(MATERIAL),DATUM);
  }
  catch (SQLerror &e)
   {
     return st_rohlager(position,0,0,0,0, ArtikelBase(),ManuProC::Datum());
   }
}  

std::vector<class LagerInhalt> RohwarenLager::LagerInhalt_(const ArtikelBase& artikel) const
{
  ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__);
   int KG, RESTE_KG, MATERIAL,KARTONS,RESTKARTONS;
   char QUERY[1024];

  std::string squery ="select material,kartons,reste, "
      "sum(kartons*kg_per_karton), sum(coalesce(rest_kg,0)) "
      "from rl_inhalt ";
  if(artikel.valid()) squery += "where material=? ";
  squery +="group by material,kartons,reste";

  Transaction tr;
  Query q("r_summe",squery);
  if (artikel.valid()) q << artikel.Id();
  Query::Row is;
  std::vector<class LagerInhalt> V;
  while((q>>is).good())
   {
     is >> MATERIAL >> Query::Row::MapNull(KARTONS) >> Query::Row::MapNull(RESTKARTONS)
        >> Query::Row::MapNull(KG) >> Query::Row::MapNull(RESTE_KG);
     V.push_back(::LagerInhalt(ArtikelBase(MATERIAL),KARTONS,RESTKARTONS,KG,RESTE_KG));
   }
 return V;
}
