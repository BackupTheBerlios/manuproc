// $Id: AufEintragBase2.pgcc,v 1.14 2001/10/19 11:17:54 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Auftrag/AufEintragBase2.h>
#include <Aux/Transaction.h>
#include <Auftrag/auftrag_status.h>

exec sql include sqlca;

void AufEintragBase2::setVerarbeitung(const cH_Prozess p) const throw(SQLerror)
{
 assert (Instanz()==ppsInstanz::Kundenauftraege);
 exec sql begin declare section;
 int AUFTRAGID=auftragid;
 int ZEILENNR=zeilennr;
 int PROZESSID;
 exec sql end declare section;

 PROZESSID=p->getProzessID();
 
 Transaction tr;
 
 exec sql update auftrag_prozess set prozessid= :PROZESSID,
 	datum= now() where auftragid= :AUFTRAGID and zeilennr= :ZEILENNR ;
 SQLerror::test("Prozessaktualisierung",100);
 
 if((sqlca.sqlcode==100) || sqlca.sqlerrd[2]==0)
   {
    exec sql insert into auftrag_prozess values
    	(:AUFTRAGID, :ZEILENNR, :PROZESSID, now());
    SQLerror::test("Prozessaktualisierung");
   }
 tr.commit();
}


void AufEintragBase2::deleteAuftragEntry() const throw(SQLerror)
{
 // Kundenaufträge DÜRFEN NICHT gelöscht werden !!!
 assert (Instanz()!=ppsInstanz::INST_KNDAUF) ;

 exec sql begin declare section;
 int AUFTRAGID=auftragid;
 int ZEILENNR=zeilennr;
 int INSTANZ=Instanz();
 exec sql end declare section;
 exec sql delete from auftragentry where auftragid=:AUFTRAGID
      and zeilennr =:ZEILENNR and instanz=:INSTANZ;
 SQLerror::test("DELETE AUFTRAG");
}

// gibt geliefert zurück
int AufEintragBase2::abschreiben(int menge) const throw(SQLerror)
{
 exec sql begin declare section;
 int AUFID=Id();
 int AUFZNR=ZNr();
 int INSTANZ=Instanz();
 int STATUS; 
 int BESTELLT;
 int GELIEFERT;
 exec sql end declare section;
 
 Transaction tr;
 exec sql lock table auftragentry in exclusive mode;
 exec sql select bestellt, geliefert, status
   into :BESTELLT, :GELIEFERT, :STATUS
   from auftragentry where
   auftragid = :AUFID and zeilennr = :AUFZNR and instanz=:INSTANZ;
 SQLerror::test(__FILELINE__);
 if(STATUS!=(AufStatVal)OPEN) 
    throw(SQLerror(__FILELINE__,-1,"Auftragszeile ist bereits geschlossen"));
 GELIEFERT+=menge;
 if(GELIEFERT>=BESTELLT) STATUS=(AufStatVal)CLOSED;
 exec sql update auftragentry set geliefert= :GELIEFERT, status= :STATUS
   where auftragid= :AUFID and zeilennr= :AUFZNR and instanz=:INSTANZ;  
 SQLerror::test(__FILELINE__);
 tr.commit();

 return GELIEFERT;
}
