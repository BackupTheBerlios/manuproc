// $Id: IntStringBox_sql.pgcc,v 1.2 2002/04/19 15:26:03 christof Exp $
/*  libKomponenten: GUI components for ManuProC's libcommon++ Copyright (C)
 *  1998-2000 Adolf Petig GmbH & Co. KG, written by Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "IntStringBox.hh"
exec sql include sqlca;

void IntStringBox::int_search(gboolean *_continue, GtkSCContext newsearch)
{  exec sql begin declare section;
     char nummer[16];
     char query[1024];
   exec sql end declare section;
   try
   {  
      std::string squery;
      switch(newsearch)
      {  
         case GTK_SEARCH_OPEN:
             squery = "select "+_int_+" from "+_tabelle_
                  +" where text("+_int_+") like '"
                 +sc_int->get_text()+"%' order by "+_int_;
             strncpy(query,squery.c_str(),sizeof(query));
             exec sql prepare int_cursor_ from :query;
      	    exec sql declare int_cursor cursor for int_cursor_;
      	    tr.open();
      	    exec sql open int_cursor;
      	    SQLerror::test(__FILELINE__);
      	    // fall through
      	 case GTK_SEARCH_FETCH:
      	    exec sql fetch int_cursor into :nummer;
      	    SQLerror::test(__FILELINE__,100);
      	    if (sqlca.sqlcode) return;
      	    sc_int->add_item(nummer);
      	    *_continue=true;
      	    break;
      	 case GTK_SEARCH_CLOSE:
      	    exec sql close int_cursor;
      	    SQLerror::test(__FILELINE__);
      	    tr.commit();
      	    break;
      }
   }
   catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
}

void IntStringBox::stringz_search(gboolean *_continue, GtkSCContext newsearch)
{
   scc_string->reset();
   exec sql begin declare section;
    char name[80];
    char query[1024];
   exec sql end declare section;
   
   try
   {  
     std::string squery;
     switch(newsearch)
      {  case GTK_SEARCH_OPEN:
            tr2.open();
             squery = "select "+_stringz_+" from "+_tabelle_+" where "
               +_stringz_+" ilike '"+scz_string->get_text() 
               +"%' order by "+_stringz_;
             strncpy(query,squery.c_str(),sizeof(query));
             exec sql prepare stringz_cursor_ from :query;
      	    exec sql declare stringz_cursor cursor for stringz_cursor_;
      	    exec sql open stringz_cursor;
      	    SQLerror::test(__FILELINE__);
      	    // fall through
      	 case GTK_SEARCH_FETCH:
       	    exec sql fetch stringz_cursor into :name;
      	    SQLerror::test(__FILELINE__,100);
      	    if (sqlca.sqlcode) return;
      	    scz_string->add_item(name);
      	    *_continue=true;
      	    break;
      	 case GTK_SEARCH_CLOSE:
      	    exec sql close stringz_cursor;
      	    SQLerror::test(__FILELINE__);
      	    tr2.commit();
      	    break;
      }
   }
   catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
}

void IntStringBox::string_search(gboolean *_continue, GtkSCContext newsearch)
{
   exec sql begin declare section;
   char name[80];
   int nummer;
   char query[1024];
   exec sql end declare section;
   
   try
   {  
     std::string squery;
     switch(newsearch)
      {  case GTK_SEARCH_OPEN:
            tr3.open();
             squery = "select "+_string_+",";
             squery +=_int_+" from "+_tabelle_+" where "+_string_+" ilike '"
                  +scc_string->get_text() +"%' ";
             if(!_stringz_.empty()) squery += "and "+_stringz_+" ilike '"
                  +scz_string->get_text()+"%' ";
             squery +=(" order by "+_string_+","+_stringz_);
             strncpy(query,squery.c_str(),sizeof(query));
             exec sql prepare string_cursor_ from :query;
      	    exec sql declare string_cursor cursor for string_cursor_;
      	    exec sql open string_cursor;
      	    SQLerror::test(__FILELINE__);
      	    // fall through
      	 case GTK_SEARCH_FETCH:
       	    exec sql fetch string_cursor into :name, :nummer;
      	    SQLerror::test(__FILELINE__,100);
      	    if (sqlca.sqlcode) return;
      	    scc_string->add_item(name,nummer);
      	    *_continue=true;
      	    break;
      	 case GTK_SEARCH_CLOSE:
      	    exec sql close string_cursor;
      	    SQLerror::test(__FILELINE__);
      	    tr3.commit();
      	    break;
      }
   }
   catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
}

