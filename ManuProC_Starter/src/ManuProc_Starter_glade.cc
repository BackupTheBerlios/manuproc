// generated 2004/6/8 16:35:47 CEST by jacek@jaceksdell.(none)
// using glademm V2.0.0.2
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/jacek/cvs/ManuProC_Starter/manuproc_starter.glade
// for gtk 2.2.4 and gtkmm 2.2.8
//
// Please modify the corresponding derived classes in ./src/ManuProc_Starter.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include "ManuProc_Starter_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/image.h>
#include <gtkmm/stockid.h>
#include <gtkmm/toolbar.h>
#include <gtkmm/box.h>

ManuProc_Starter_glade::ManuProc_Starter_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  
   
   Gtk::Window *ManuProc_Starter = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::Toolbar *toolbar1 = Gtk::manage(new class Gtk::Toolbar());
   Gtk::VBox *vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("PPS", *manage(new Gtk::Image(Gtk::StockID("gtk-execute"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   pps_start = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Kunden", *manage(new Gtk::Image(Gtk::StockID("gtk-open"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   kunden_start = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Lager", *manage(new Gtk::Image(Gtk::StockID("gtk-paste"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   lager_start = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Artikel", *manage(new Gtk::Image(Gtk::StockID("gtk-index"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   artikel_start = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::Space());
   
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("Beenden", *manage(new Gtk::Image(Gtk::StockID("gtk-quit"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   quit = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   toolbar1->set_tooltips(true);
   toolbar1->set_toolbar_style(Gtk::TOOLBAR_BOTH);
   toolbar1->set_orientation(Gtk::ORIENTATION_HORIZONTAL);
   vbox1->pack_start(*toolbar1, Gtk::PACK_SHRINK, 0);
   ManuProc_Starter->set_title("ManuProC_Starter");
   ManuProc_Starter->set_modal(false);
   ManuProc_Starter->property_window_position().set_value(Gtk::WIN_POS_NONE);
   ManuProc_Starter->set_resizable(false);
   ManuProc_Starter->property_destroy_with_parent().set_value(false);
   ManuProc_Starter->add(*vbox1);
   toolbar1->show();
   vbox1->show();
   ManuProc_Starter->show();
   pps_start->signal_clicked().connect(SigC::slot(*this, &ManuProc_Starter_glade::on_pps_start_clicked));
   kunden_start->signal_clicked().connect(SigC::slot(*this, &ManuProc_Starter_glade::on_kunden_start_enter));
   lager_start->signal_clicked().connect(SigC::slot(*this, &ManuProc_Starter_glade::on_lager_start_clicked));
   artikel_start->signal_clicked().connect(SigC::slot(*this, &ManuProc_Starter_glade::on_artikel_start_clicked));
   quit->signal_clicked().connect(SigC::slot(*this, &ManuProc_Starter_glade::on_quit_clicked));
}

ManuProc_Starter_glade::~ManuProc_Starter_glade()
{  delete gmm_data;
}
