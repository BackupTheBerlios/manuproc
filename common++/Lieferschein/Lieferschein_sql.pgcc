/* $Id: Lieferschein_sql.pgcc,v 1.5 2001/10/23 08:45:19 christof Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include"Lieferschein.h"
#include<Aux/Transaction.h>
exec sql include sqlca;

Lieferschein::Lieferschein(int lid) throw(SQLerror)
: LieferscheinBase(lid), kunde(Kunde::default_id)
{
try{
 exec sql begin declare section;
 int LFRSID;
 int KDNR;
 int RNGID;
 char DATUM[11];
 int PAECKCHEN, PAKETE;
 char GELIEFERTAM[21];
 int IGELIEFERTAM;
 int DPDLIEFNR;
 int IDPDLIEFNR;
 exec sql end declare section;

 LFRSID = lid;
 
 exec sql select kundennr, date(datum), coalesce(rngid,0),
		coalesce(paeckchen,0),
		coalesce(pakete,0),date(coalesce(geliefertam,datum)),dpdliefnr
		into :KDNR, :DATUM, :RNGID, :PAECKCHEN, :PAKETE,
		:GELIEFERTAM:IGELIEFERTAM, :DPDLIEFNR:IDPDLIEFNR
 	from lieferschein where lfrsid = :LFRSID;
 SQLerror::test(__FILELINE__);
 
 lieferid=lid;
 kunde=cH_Kunde(KDNR);
 rngid=RNGID;

 lsdatum.from_postgres(DATUM);	
 paeckchen=PAECKCHEN;
 pakete=PAKETE;
 if(IGELIEFERTAM) geliefertam=Petig::Datum();		 
 else geliefertam.from_postgres(GELIEFERTAM);		 
 dpdliefnr=IDPDLIEFNR ? 0 : DPDLIEFNR;
 }catch (SQLerror &e) {cerr <<e<<'\n';}
}

void Lieferschein::setDPDlnr(int dpdlnr) throw(SQLerror)
{
 exec sql begin declare section;
 int DPDLIEFNR=dpdlnr;
 int LFRSID=lieferid;
 exec sql end declare section;

 exec sql update lieferschein set dpdliefnr= :DPDLIEFNR
	where lfrsid= :LFRSID;
 SQLerror::test(__FILELINE__);
}

// und was ist mit setDatum
void Lieferschein::setDPDDatum() throw(SQLerror)
{
 exec sql begin declare section;
 int LFRSID=lieferid;
 exec sql end declare section;

 exec sql update lieferschein set geliefertam=now()
	where lfrsid= :LFRSID;
 SQLerror::test(__FILELINE__);
}

Lieferschein::Lieferschein(cH_Kunde k,int jahr) throw(SQLerror)
	: LieferscheinBase(none_id), lsdatum(Petig::Datum::today()),
 	kunde(k),rngid(0),paeckchen(0),pakete(0),dpdliefnr(0) 
{
 exec sql begin declare section;
 int LFRSID;
 int KUNDENNR;
 int JAHR=jahr;
 exec sql end declare section;

 if (!JAHR)
 {  exec sql select to_char(now(),'yy') into :JAHR;
    SQLerror::test(__FILELINE__);
 }
 else JAHR%=100;

 KUNDENNR=k->Id();
 Transaction tr;
  
 exec sql lock table lieferschein in exclusive mode;
 
 exec sql select coalesce(max(lfrsid)+1,:JAHR*10000)
 		into :LFRSID
 		from lieferschein where lfrsid 
 		between :JAHR*10000 and (:JAHR+1)*10000-1;
 SQLerror::test(__FILELINE__":Lieferschein: select next lfrsid");
 
 exec sql insert into lieferschein (lfrsid, kundennr)
 	values (:LFRSID, :KUNDENNR);
 SQLerror::test(__FILELINE__":Lieferschein: insert into lieferschein");	
 
 lieferid=LFRSID; 
 
 tr.commit();
}

int Lieferschein::maxZnr() throw(SQLerror)
{
 exec sql begin declare section;
 int ZNR;
 int LFRSID;
 exec sql end declare section;
 
 LFRSID=Id();
 exec sql select coalesce(max(zeile),0) into :ZNR from lieferscheinentry where
 	lfrsid= :LFRSID;
 SQLerror::test(__FILELINE__":naxZnr: select from lieferscheinentry");	

 return ZNR;
}

void Lieferschein::setDatum(const Petig::Datum &d) throw(SQLerror)
{  
 exec sql begin declare section;
 int LFRSID=lieferid;
 char DATUM[20];
 exec sql end declare section;
 
 d.write_postgres(DATUM,sizeof DATUM);
 exec sql update lieferschein set geliefertam=:DATUM where lfrsid= :LFRSID;
 SQLerror::test(__FILELINE__);
}
