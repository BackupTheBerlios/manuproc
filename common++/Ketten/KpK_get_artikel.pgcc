// $Id: KpK_get_artikel.pgcc,v 1.15 2003/10/17 12:32:39 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "KettplanKette.h"
#include <iostream>
#include <Misc/SQLerror.h>
#include <Misc/Transaction.h>
#include <Ketten/Kettscheibe.h>
#include <algorithm>

exec sql include sqlca;

const std::vector <ArtikelGang> &KettplanKette::get_artikel_sorted() const
{  if (valid&VA_ARTIKEL) return artikel;
   if (!artikel.empty()) artikel.clear();
   // einlesen, sortieren, erzeugen
   exec sql begin declare section;
     int refmasch;
     char refdate[11];
   int GAENGE[10];
   long ID[10];
   exec sql end declare section;
   write(refmasch,refdate,sizeof refdate);

   exec sql select gaenge,coalesce(artikelid,0)
        into :GAENGE, :ID
   	from schaertabelle s
   	where maschine= :refmasch and schaerdatum= :refdate
   	order by artikelbezeichnung(artikelid) limit 10;
   SQLerror::test(__FILELINE__,100);
   int m=sqlca.sqlerrd[2];
   for (int i=0;i<m;++i)
   {
     artikel.push_back(ArtikelGang(GAENGE[i],ArtikelBase(ID[i]))); // ,true,Kettlaenge()));
   }
   valid|=VA_ARTIKEL;
//   get_kombiartikel();
   return artikel;
}

#if 0
const std::vector <ArtikelGang_Malte>& KettplanKette::get_kombiartikel() const
{
  assert(VA_ARTIKEL);
  exec sql begin declare section;
   int ART1,ART2,GANG1,GANG2,INDEX1,INDEX2;
  exec sql end declare section;
  Transaction tr;
  for(std::vector<ArtikelGang>::iterator i=artikel.begin();i!=artikel.end();++i)
   {
     ART1=i->Artikel().Id();
     GANG1=i->Gaenge();
     for(std::list<Kettscheibe>::iterator j=i->getKettscheiben().begin();j!=i->getKettscheiben().end();++j)
      {
        INDEX1=j->Index();
        exec sql declare kkc cursor for select artikel2,
            gang2,kettenindex2
            from ketten_kombiniert where (artikel1,gang1,kettenindex1)
               =(:ART1,:GANG1,:INDEX1);
        exec sql open kkc;
        while(true)
         {
           exec sql fetch kkc into :ART2,:GANG2,:INDEX2;
           SQLerror::test(__FILELINE__,100);
           if (sqlca.sqlcode) break;
           // ist der gefundene ArtikelGang in der Aktuellen Liste ?
           ArtikelGang A=ArtikelGang(GANG1,ArtikelBase(ART1));
           std::vector<ArtikelGang>::iterator l=std::find(artikel.begin(),artikel.end(),A);
           if(l!=artikel.end())
            {
//cout << "Ich: "<<cH_ArtikelBezeichnung(i->Artikel())->Bezeichnung()
// <<"\tDu: "<<cH_ArtikelBezeichnung(ART2)->Bezeichnung()<<'\t'<<INDEX2<<'\n';
              j->setKombiniert(Kettscheibe::st_kombi(ArtikelBase(ART2),GANG2,INDEX2));
              ArtikelGang B=ArtikelGang(GANG2,ArtikelBase(ART2));
              std::find(artikel.begin(),artikel.end(),B)->setKombinierteKette(INDEX2,Kettscheibe::st_kombi(l->Artikel(),l->Gaenge(),INDEX1));
            }
         }
        exec sql close kkc;
      }
   }
  return artikel;
}

#endif
