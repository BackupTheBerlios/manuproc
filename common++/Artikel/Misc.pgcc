// $Id: Misc.pgcc,v 1.6 2002/05/09 12:45:59 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Artikel/Misc.h>
#include <Artikel/Prozesspreis.h>

exec sql include sqlca;

#if 0
namespace ArtikelMisc {

void LeseProzesse(const ArtikelBase &ab,ProzessListe &out)
{  exec sql begin declare section;
   long artid;
   int kundennr;
   float preis;
   int waehrung;
   float preismenge;
   exec sql end declare section;
   
   kundennr=out.getListe();
   // init output structure
   out.schritte.erase(out.schritte.begin(),out.schritte.end());
   out.endartikel=ab.Id();
   out.rohartikel=0;
   out.rohartikel_preis=0;
   out.rohartikel_preis_index=0;
   out.rohpreis=Preis();
   
   // Preis anhand ID suchen, zurückgeben
   // Prozesspreis addieren, Rohpreis suchen ...
   artid=ab.Id();
   
   unsigned int actual_index=0;
  while(1)
  {if (!out.rohartikel_preis)
   {exec sql select preis,waehrung,preismenge
        into :preis, :waehrung, :preismenge
        from ARTIKELPREISE
   	where Artikelid= :artid and Kundennr= :kundennr;
      if (!sqlca.sqlcode)
      {  out.rohpreis=Preis(preis,waehrung,preismenge);
         out.rohartikel_preis=ProzessListe::ID(artid);
         out.rohartikel_preis_index=actual_index;
         return;
      }
   }
   
   ArtikelBaum ab((ArtikelBase::ID)artid);

   if (!ab.ParentArtikelID() || !ab.getErzeugendenProzess()->Id()) break;
   if (ab.ParentArtikelID()==ArtikelBase::ID(artid)) 
   {  std::cerr << ProzessListe::ID(artid) << " Rohartikel loop\n";
      break; 
   }

   ProzessSchritt ps;
   ps.prozess=ab.getErzeugendenProzess();
   ps.prozessname=ps.prozess->getTyp();
   ps.prozessname+=" \"";
   ps.prozessname+=ps.prozess->getText();
   ps.prozessname+='"'; // ecpg can't handle this ;-) "
   ps.stueckgroesse=ps.prozess->getMtrProStk();

   Prozesspreis pr(out.liste,ps.prozess);
   ps.preis=pr;

   assert(out.schritte.size()==actual_index);
   out.schritte.push_back(ps);
   actual_index++;

   artid=ab.ParentArtikelID();
  }
  out.rohartikel=ProzessListe::ID(artid);
  
  // Stueckgroesse wo angesagt setzen
  for (ArtikelMisc::ProzessListe::iterator i=out.begin();i!=out.end();++i)
  {  if ((*i).stueckgroesse) 
     { (*i).preis.BezugsMenge((*i).stueckgroesse);
       out.rohpreis.BezugsMenge((*i).stueckgroesse);
       for (ArtikelMisc::ProzessListe::iterator j=out.begin();j!=i;++j)
       {  (*j).preis.BezugsMenge((*i).stueckgroesse);
       }
       break; 
     }
  }
}

void ProzessListe::ErzeugePreisArtikelDummy(void)
{  if (rohartikel_preis==ID())
   {  rohartikel_preis=rohartikel;
      rohartikel_preis_index=schritte.size();
   }
}

};

#include <Artikel/Artikelpreis.h>

void Artikelpreis::init(const ArtikelMisc::ProzessListe &pl)
{  Preis p(pl.rohpreis);
   for (ArtikelMisc::ProzessListe::preis_iterator i=pl.preis_begin();i!=pl.preis_end();++i)
   {  p=(*i).preis+p; // jeweils letzter Prozessschritt gibt Einheit an
   }
   setPreis(p);
}

#endif
