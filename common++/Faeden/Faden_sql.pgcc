/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 2002 Adolf Petig GmbH & Co. KG
 *  written by Jacek Jakubowski, Christof Petig, Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// $Id: Faden_sql.pgcc,v 1.5 2002/07/05 12:35:01 christof Exp $

#include <Faden.hh>
#include <Aux/Transaction.h>
exec sql include sqlca;

void Fadenliste::Load(const ArtikelBase &ab,const Bindungsliste &bindungsliste)
{  exec sql begin declare section;
   int ZEILENNUMMER[20], ANZAHL[20], BINDUNG[20], 
   	ANFANGSZEILE[20], ENDZEILE[20], WIEDERHOLUNGEN[20];
   int ARTIKEL, MATERIAL[20];
   exec sql end declare section;

   erase();
   ARTIKEL=ab.Id();

   exec sql declare zn cursor for 
   	select zeilennummer, anzahl, material, bindung 
   	from webang_faeden
        where artikel= :ARTIKEL 
        order by zeilennummer;
   Transaction tr;
   exec sql open zn;
   SQLerror::test(__FILELINE__ "select from webang_faeden",100);
   while (! sqlca.sqlcode)
   {  exec sql fetch 20 from zn into :ZEILENNUMMER, :ANZAHL, :MATERIAL, :BINDUNG;
      SQLerror::test(__FILELINE__ "fetch from webang_faeden",100);
      if (sqlca.sqlcode) break;
      unsigned int lines=sqlca.sqlerrd[2];
      for (unsigned int i=0;i<lines;++i)
         add (Faden (ANZAHL[i], MATERIAL[i], bindungsliste.getById(BINDUNG[i])), -1);
      if (lines<20) break;
   }
   exec sql close zn;

   // request small ones first so we print it right
   exec sql declare wdh cursor for 
   	select anfangszeile, endzeile, wiederholungen 
   	from webang_wiederhol
        where artikel= :ARTIKEL
        order by endzeile-anfangszeile;
   exec sql open wdh;
   SQLerror::test(__FILELINE__ "select from webang_wiederhol",100);
   while (! sqlca.sqlcode)
   {  exec sql fetch 20 from wdh into :ANFANGSZEILE , :ENDZEILE, :WIEDERHOLUNGEN;
      SQLerror::test(__FILELINE__ "fetch from webang_wiederhol",100);
      if (sqlca.sqlcode) break;
      unsigned int lines=sqlca.sqlerrd[2];
      for (unsigned int i=0;i<lines;++i)
         rep_add (ANFANGSZEILE[i], ENDZEILE[i], WIEDERHOLUNGEN[i]);
      if (lines<20) break;
   }
   exec sql close wdh;
   tr.commit();
}
