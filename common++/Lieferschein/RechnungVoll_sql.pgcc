/* $Id: RechnungVoll_sql.pgcc,v 1.24 2006/08/10 15:08:00 christof Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include"RechnungVoll.h"
#include<Misc/Transaction.h>
exec sql include sqlca;


void RechnungVoll::loadEntries(bool order_by_artikel) throw(SQLerror)
{
 int INSTANZ=ppsInstanzID::Kundenauftraege;
 std::string sortstr;
 
 rentry.erase(rentry.begin(),rentry.end());

 if(order_by_artikel)
   {
    sortstr=" l.lfrsid,e.refauftragid ";
    sortstr+=",artikelbezeichnung(e.artikelid)";
   }
 else
    sortstr=" zeilennr ";

 std::string qu("select ry.artikelid, ry.zeilennr");
 Query::Args args;

 qu+=", ry.stueck, ry.menge, ry.rabatt, ry.lfrsid, ry.lfrszeile," 
        "ry.preismenge, l.geliefertam, abs(ry.preis), refauftragid "
	"from (rechnungentry ry "
   	"left join lieferschein l on (?,ry.lfrsid) ="
	"(l.instanz,l.lfrsid))";
 args << INSTANZ;
 qu+= "left join lieferscheinentry e on (l.instanz,l.lfrsid,ry.lfrszeile)"
	"=(e.instanz,e.lfrsid,e.zeile) ";

 qu+=" where ry.rngid=?";
 args << rngid;

 qu+=" order by " + sortstr;

 Query query(qu);
 query << args;

 Query::Row fi; 
 while((query >> fi).good())
   {
    int ARTIKELID, STUECK, ZEILE;
    int LFRSID,LIEFERZEILE;
    int AUFTRAGID;
    float MENGE,RABATT,PREISMENGE,PREIS;
    ManuProC::Datum LIEFERDATUM;

    fi >> ARTIKELID >> ZEILE 
       >> Query::Row::MapNull(STUECK) >> Query::Row::MapNull(MENGE) 
       >> Query::Row::MapNull(RABATT) 
       >> Query::Row::MapNull(LFRSID,AuftragBase::invalid_id) 
       >> Query::Row::MapNull(LIEFERZEILE)
       >> Query::Row::MapNull(PREISMENGE,1)
       >> LIEFERDATUM 
       >> Query::Row::MapNull(PREIS) 
       >> Query::Row::MapNull(AUFTRAGID,AuftragBase::invalid_id);
       
    Preis p(PREIS,getWaehrung(),PREISMENGE);       
    rentry.push_back(RechnungEntry(rngid,ZEILE,
         ARTIKELID,STUECK,MENGE,p,RABATT,LIEFERDATUM,
         LieferscheinEntryBase(ppsInstanz::ID(INSTANZ),LFRSID,LIEFERZEILE),
	 AuftragBase(ppsInstanz::ID(INSTANZ),AUFTRAGID)));       
   }
}

RechnungVoll::RechnungVoll(int rid, bool order_by_artikel) throw(SQLerror)
: Rechnung(rid)
{
 if(rid==none_id) return;
 loadEntries(order_by_artikel);
}


#ifdef DPD_LIEFERSCHEINE
void RechnungVoll::setGewicht() const throw(SQLerror)
{
 Query("select sum(coalesce(netto_kg,0)), sum(coalesce(brutto_kg,0)),"
		"sum(coalesce(pakete,0)) "
	"from lieferschein l where l.rngid=?")
	<< Id()
	>> Query::Row::MapNull(netto_gewicht)
	>> Query::Row::MapNull(brutto_gewicht)
	>> Query::Row::MapNull(pakete);
}

#endif
