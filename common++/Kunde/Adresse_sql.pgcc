/* $Id: Adresse_sql.pgcc,v 1.9 2003/11/07 11:12:50 jacek Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <stdio.h>
#include <ctype.h>
#include <unistd.h>
#include <string.h>
#include "Adresse.h"
#include <Misc/Ausgabe_neu.h>
#include <Misc/string0.h>

exec sql include sqlca;

Adresse::Adresse(int kdnr) throw(SQLerror)
{  exec sql begin declare section;
   int KUNDENNR=kdnr;
   char IDNR[21];
   char FIRMA[61];
   char *NAME2=0;
   char *POSTANWVOR=0;
   char STRASSE[36];
   char *POSTANWNACH=0;
   char HSNR[8];
   char _PLZ[11];
   char POSTFACH[21];
   char POSTFPLZ[11];
   char ORT[31];
   bool RNG_AN_POSTFACH;
   char *LANDNAME=0;
   char *LKZ=0;
   char POSTFACHNAME[41];
//   char ISOCODE[4];

   int IIDNR, ISTRASSE, IHSNR, IPLZ,
      IPOSTFACH, IPOSTFPLZ, IORT, IRNG_AN_POSTFACH, INAME2;

   exec sql end declare section;

   exec sql SELECT firma, name2, coalesce(postanwvor,''), strasse, hsnr, 
		coalesce(postanwnach,''),
         	plz, ort, postfach, postfplz, rng_an_postfach, idnr,
		coalesce(l.name,''),coalesce(l.lkz,'')
	into :FIRMA, :NAME2:INAME2, :POSTANWVOR, :STRASSE:ISTRASSE,
   		:HSNR:IHSNR, :POSTANWNACH, :_PLZ:IPLZ,
   		:ORT:IORT, :POSTFACH:IPOSTFACH, 
   		:POSTFPLZ:IPOSTFPLZ, :RNG_AN_POSTFACH:IRNG_AN_POSTFACH,
   		:IDNR:IIDNR, :LANDNAME, :LKZ
   	FROM kunden left join ku_land l on (landid=id)
   	WHERE kundennr= :KUNDENNR;
   SQLerror::test(__FILELINE__" select from kunden");
   
   if (IRNG_AN_POSTFACH) RNG_AN_POSTFACH=false;
   if (ISTRASSE) STRASSE[0]=0;
   if (IHSNR) HSNR[0]=0;
   if (IORT) ORT[0]=0;
   if (IPLZ) _PLZ[0]=0;
   if (IPOSTFPLZ) POSTFPLZ[0]=0;
   if (IPOSTFACH) POSTFACH[0]=0;

   strncpy0(POSTFACHNAME,"Postfach",sizeof POSTFACHNAME);
   
   kundennr=KUNDENNR;
   strcpyx(IDnr,IDNR);
   firma=FIRMA;
   name2 = INAME2 ? "" : NAME2;
   postanwvor=POSTANWVOR;
   strasse=STRASSE;
   postanwnach=POSTANWNACH;
   hsnr=HSNR;
   ort=ORT;
   PLZ=_PLZ;
   postfach=POSTFACH;
   postfPLZ=POSTFPLZ;
   rng_an_postfach=RNG_AN_POSTFACH;
   landname=LANDNAME;
   lkz=LKZ;
   strcpyx(postfachname,POSTFACHNAME);
   lieferadresse=false;

   ECPGfree_auto_mem();
}

static const std::string Dform(unsigned int i,bool TeX=false) throw()
{  return TeX?FormatiereTeX((unsigned long)i,2):Formatiere((unsigned long)i,2);
}

int Adresse::putIntoNLines(char **buf,int num,int len,bool TeX) const throw()
{  int lines=0,line=0;
   bool postfachflag=false;
//   bool ausland=landname[0]!=0;
   bool postfach_valid = postfach!="" && postfPLZ!="";
   
   for (int i=0;i<num;i++) buf[i][0]=0;
   if (firma!="") lines++;
   if (!postanwvor.empty()) lines++;
   if (strasse!="" && postfach_valid)
   		postfachflag=true;
   else if (rng_an_postfach && !lieferadresse && postfach_valid)
           	postfachflag=true;
   if (postfachflag || strasse[0] || hsnr[0]) lines++;
   if (!postanwnach.empty()) lines++;
   if (ort!="") lines++;
//   if (ausland) lines++;
   
//   if (!ausland && lines<num && num>4) 
   if (lines<num && num>4) 
   { strncpy0(buf[line++],"Firma",len); lines++; }
   if (firma!="") strncpy0(buf[line++],TeX?string2TeX(firma).c_str():firma.c_str(),len);
   if (!postanwvor.empty() && lines<=num) strncpy0(buf[line++],
		TeX?string2TeX(postanwvor).c_str():postanwvor.c_str(),len);
   if (postfachflag) 
   {  if (TeX) snprintf0(buf[line++],len,"%s~%s",
			string2TeX(postfachname).c_str(),
			Dform(atoi(postfach.c_str()),true).c_str());
      else snprintf0(buf[line++],len,"%s %s",postfachname,
			Dform(atoi(postfach.c_str())).c_str());
   }
   else if (strasse!="" || hsnr!="")
   {  if (TeX) snprintf0(buf[line++],len,"%s~%s",string2TeX(strasse).c_str(),
	string2TeX(hsnr).c_str());
      else snprintf0(buf[line++],len,"%s %s",strasse.c_str(),hsnr.c_str());
   }
   if (!postanwnach.empty() && line+1<num) strncpy0(buf[line++],
		TeX?string2TeX(postanwnach).c_str():postanwnach.c_str(),len);
//   if (line+1+ausland<num) { buf[line++][0]=0; lines++; }
   if (line+1<num) { buf[line++][0]=0; lines++; }
   if (ort!="" && line<num) 
   {  if (PLZ!="") 
         snprintf0(buf[line++],len,"%05d%c%s",
         	postfachflag ? atoi(postfPLZ.c_str()) : atoi(PLZ.c_str()),
         	TeX?'~':' ',TeX?string2TeX(ort).c_str():ort.c_str());
      else 
         strncpy0(buf[line++],TeX?string2TeX(ort).c_str():ort.c_str(),len);
   }
/*
   if (ausland)
   {  if (line<num) strncpy0(buf[line++],TeX?string2TeX(landname).c_str():landname,len);
      else 
      {  int ortlen=strlen(buf[line-1]);
      
         if (ortlen+strlen(landname)+1<len)
         {  buf[line-1][ortlen]=' ';
            strncpy0(buf[line-1]+ortlen+1,TeX?string2TeX(landname).c_str():landname,len-ortlen-1);
         }
         else ; // geht halt nicht :-(
      }
   }
*/

   return line;
}

extern "C" {
Adresse *Adresse_by_kdnr(int kdnr) throw()
{  try 
   {  return new Adresse(kdnr);
   } 
   catch (SQLerror& e)
   {  std::cerr << "Datenbankfehler "<< e << '\n';
      if (e.Code()<0) { std::cerr << "Programm beendet sich\n"; abort(); }
      return NULL;
   }
}
void free_Adresse(Adresse *a) throw()
{  delete a;
}
int putIntoNLines(Adresse *a,char **buf,int num,int len,bool TeX) throw()
{  return a->putIntoNLines(buf,num,len,TeX);
}
void mark_Lieferanschrift(Adresse *a) throw()
{  a->mark_Lieferanschrift();
}
	   }

