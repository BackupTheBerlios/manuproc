/*  pps: ManuProC's production planning system
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Auftrag/AuftragFull.h>
#include <string.h>
#include <strstream>
#include <Misc/SQLerror.h>
#include <Misc/Transaction.h>
exec sql include sqlca;
#include <Auftrag/selFullAufEntry.h>
#include <Misc/string0.h>
#include <Kunde/Zahlungsart.h>
#include<Misc/Changejournal.h>
#include <Artikel/ArtikelStamm.h>
#include <Misc/TraceNV.h>
#include <Misc/FetchIStream.h>
#include <sys/types.h>

void Auftrag::deleteAuftrag() throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);

 Transaction tr;

 Query("lock table auftragentry in row exclusive mode");
 Query("lock table auftrag in row exclusive mode");
 Query("delete from auftragentry where (instanz,auftragid)=(?,?)") 
 	<<  Instanz() << Id();
 Query("delete from auftrag where (instanz,auftragid)=(?,?)") 
 	<<  Instanz() << Id();
 SQLerror::test(__FILELINE__"Löschen des Auftrags");

 tr.commit();
}



void Auftrag::setWaehrung(cP_Waehrung w) throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);

 Query("update auftrag set waehrung=? where (instanz,auftragid)=(?,?)")
	<< w->Id()
	<< Instanz() << Id();
 SQLerror::test(__FILELINE__"Waehrung setzen");
}

void Auftrag::Zahlziel(const ManuProC::Datum &zziel) throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this,zziel);
  
 Query("update auftrag set zahlungsziel=? where (instanz,auftragid)=(?,?)")
	<< zziel
	<< Instanz() << Id();
 SQLerror::test(__FILELINE__"Zahlungsziel setzen");
}

void Auftrag::Zahlart(cH_Zahlungsart zart) throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);

 if(zart->Id()==Zahlungsart::none_id)
 {  cH_Kunde k(kundennr);
    cH_Kunde krng(k->Rngan());
    zart = krng->zahlungsart();
 }
  
 Query("update auftrag set zahlart=? where (instanz,auftragid)=(?,?)")
	<< zart->Id()
	<< Instanz() << Id();
 SQLerror::test(__FILELINE__"Zahlungsart setzen");
}


#if 0 // hÃ¶cht gefÃ¤hrlich und vermutlich nicht benutzt
void Auftrag::deleteEintrag(int zeilennr) throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this,NV("ZNr",zeilennr));

 Transaction tr;
 
 Query("lock table auftragentry in share row exclusive mode");
 Query("delete from auftragentry where (instanz,auftragid,zeilennr)=(?,?,?)")
	<< Instanz() << Id() << zeilennr;
 SQLerror::test(__FILELINE__"Auftragszeile lÃ¶schen");

 Query("update auftragentry set zeilennr=zeilennr-1 "
 	"where zeilennr>? and (instanz,auftragid)=(?,?)")
	<< zeilennr
	<< Instanz() << Id();
 SQLerror::test(__FILELINE__"Auftragszeilennr aktualisieren");
 
 tr.commit();
}
#endif

Auftrag::Auftrag(const AuftragBase& _auftrag) throw(SQLerror)
: AuftragBase(_auftrag), zahlart(Zahlungsart::none_id), labelid(0)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);
  int waehrungsid;
  int i_status,zahlartid;
  Query q("select kundennr,datum,stat,youraufnr,bemerkung,"
          "waehrung,rabatt,zahlungsziel,zahlart,notiz,verknr "
          "from auftrag where (instanz,auftragid)=(?,?)");
  q << Instanz() << Id();
  q >> Query::Row::MapNull(kundennr,ManuProcEntity<>::none_id)
    >> Query::Row::MapNull(datum,ManuProC::Datum::today())
    >> i_status
    >> Query::Row::MapNull(youraufnr)
    >> Query::Row::MapNull(bemerkung)
    >> Query::Row::MapNull(waehrungsid,Waehrung::default_id)
    >> Query::Row::MapNull(auftragsrabatt)
    >> zahlziel
    >> Query::Row::MapNull(zahlartid,Zahlungsart::none_id)
    >> Query::Row::MapNull(notiz)
    >> Query::Row::MapNull(verknr);
  waehrung=cP_Waehrung(Waehrung::ID(waehrungsid));
  status=AufStatVal(i_status);
  zahlart=zahlartid;
  notiz_valid=true;
  
 ExtraColumns ec("auftrag","instanz","auftragid");
 ec << Instanz() << Id();
 labelid = ec.get<int>("label");
 
 youraufnr_cache[*this]=youraufnr;
}


Auftrag::Auftrag(Anlegen _instanz, long kdnr, const std::string &yaufnr) throw(SQLerror)
	: AuftragBase(cH_ppsInstanz(_instanz),invalid_id),
	  zahlart(Zahlungsart::none_id)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,
 	NV("Anlegen.instanz",_instanz.instanz),NV("kdnr",kdnr),
 	NV("yaufnr",yaufnr));
 exec sql begin declare section;
 int AUFTRAGID;
 char DATUM[11];
 int YEAR;
 int KUNDENNR=kdnr;
 int STATUS=UNCOMMITED;
 int INSTANZ=Instanz();
 int WAEHRUNG;
 int VERKNR;
 int IVERKNR=0;
 char *YOURAUFNR=(char*)yaufnr.c_str();
 exec sql end declare section;

 exec sql select waehrungid,coalesce(verknr,-1) 
	into :WAEHRUNG,:VERKNR from kunden where kundennr= :KUNDENNR;
 SQLerror::test(__FILELINE__"select waehrung from kunden");

 Transaction tr;

 exec sql lock table auftrag in exclusive mode;
 SQLerror::test(__FILELINE__"lock table auftrag");

 YEAR=AuftragBase::aktuellesJahr()%100;
 
 exec sql select coalesce(max(auftragid)+1,:YEAR*10000) 
 		into :AUFTRAGID from auftrag 
 		where auftragid between (:YEAR*10000) and (:YEAR+1)*10000-1
 		and instanz=:INSTANZ;
 SQLerror::test("Auftrag: select neue auftragid");
 if (AUFTRAGID<handplan_auftrag_id) AUFTRAGID=handplan_auftrag_id;

 exec sql insert into auftrag (auftragid, kundennr, 
				stat, waehrung, instanz)
 	values (:AUFTRAGID, :KUNDENNR, :STATUS, :WAEHRUNG,:INSTANZ);
 SQLerror::test(__FILELINE__" insert into auftrag");
  
#ifdef MABELLA_EXTENSIONS
 if(!yaufnr.empty())
   {exec sql update auftrag set youraufnr=nullif(:YOURAUFNR,'') where
	(auftragid,instanz)=(:AUFTRAGID,:INSTANZ);
    SQLerror::test(__FILELINE__":Auftrag: update youraufnr");	
   }

 if(VERKNR==-1) IVERKNR=-1;
 exec sql update auftrag set verknr=:VERKNR:IVERKNR where
	(auftragid,instanz)=(:AUFTRAGID,:INSTANZ);
 SQLerror::test(__FILELINE__":Auftrag: update auftrag");	

 exec sql update auftrag set notiz=(select auf_notiz from kunden
	where kundennr=:KUNDENNR) where (auftragid,instanz)=
	  (:AUFTRAGID,:INSTANZ);
 SQLerror::test(__FILELINE__":Auftrag: update notiz");	
#endif

 ExtraColumns ec("auftrag","instanz","auftragid");
 ec << INSTANZ << AUFTRAGID;

 if(ec.hasColumn("uid"))
   Query("update auftrag set uid=? where (instanz,auftragid)=(?,?)")
     << getuid() << INSTANZ << AUFTRAGID;
     
 exec sql select date(datum) into :DATUM from auftrag 
   where auftragid= :AUFTRAGID and instanz = :INSTANZ;
 SQLerror::test("Aufrtag: select datum");

 kundennr = kdnr;
 datum.from_postgres(DATUM);
// wrkstatus= INSERTED;
 status=(AufStatVal)STATUS;
 auftragid= AUFTRAGID;
 assert(valid()); 
 waehrung=cP_Waehrung((Waehrung::ID)WAEHRUNG);
 tr.commit();
 youraufnr_cache[*this]=yaufnr;
}

Auftrag::Auftrag(Anlegen2 AB, long kdnr, const std::string &yaufnr) throw(SQLerror)
	: AuftragBase(AB), zahlart(Zahlungsart::none_id)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,NV("Anlegen:",*this),NV("KnNr",kdnr));
 exec sql begin declare section;
 int AUFTRAGID=Id();
 char DATUM[11];
 int KUNDENNR=kdnr;
 int STATUS = OPEN;
 int INSTANZ =Instanz();
 int WAEHRUNG;
 int VERKNR;
 int IVERKNR=0;
 char *YOURAUFNR=(char*)yaufnr.c_str();
 exec sql end declare section;

 exec sql select waehrungid,coalesce(verknr,-1) 
	into :WAEHRUNG,:VERKNR from kunden where kundennr= :KUNDENNR;
 SQLerror::test(__FILELINE__"select waehrung from kunden");

 Transaction tr;
 
 exec sql insert into auftrag (auftragid, kundennr,  
				stat, waehrung, instanz)
 	values (:AUFTRAGID, :KUNDENNR, :STATUS, :WAEHRUNG,:INSTANZ);
 SQLerror::test(__FILELINE__" insert auftrag with auftragid 0");
  
#ifdef MABELLA_EXTENSIONS
 if(!yaufnr.empty())
   {exec sql update auftrag set youraufnr=nullif(:YOURAUFNR,'') where
	(auftragid,instanz)=(:AUFTRAGID,:INSTANZ);
    SQLerror::test(__FILELINE__":Auftrag: update youraufnr");	
   }

 if(VERKNR==-1) IVERKNR=-1;
 exec sql update auftrag set verknr=:VERKNR:IVERKNR where
	(auftragid,instanz)=(:AUFTRAGID,:INSTANZ);
 SQLerror::test(__FILELINE__":Auftrag: update auftrag");	

 exec sql update auftrag set notiz=(select auf_notiz from kunden
	where kundennr=:KUNDENNR) where (auftragid,instanz)=
	  (:AUFTRAGID,:INSTANZ);
 SQLerror::test(__FILELINE__":Auftrag: update notiz");	
#endif

 ExtraColumns ec("auftrag","instanz","auftragid");
 ec << INSTANZ << AUFTRAGID;

 if(ec.hasColumn("uid"))
   Query("update auftrag set uid=? where (instanz,auftragid)=(?,?)")
     << getuid() << INSTANZ << AUFTRAGID;

 exec sql select date(datum) into :DATUM from auftrag 
   where auftragid= :AUFTRAGID and instanz = :INSTANZ;
 SQLerror::test("Aufrtag: select datum");

 kundennr = kdnr;
 datum.from_postgres(DATUM);
// wrkstatus= INSERTED;
 status=(AufStatVal)STATUS;
 youraufnr_cache[*this]=yaufnr;
 tr.commit();
}


void Auftrag::setBemerkung(const std::string &bem) throw(SQLerror)
{
  ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);
  (Query("update auftrag set bemerkung=? where (instanz,auftragid)=(?,?)")
   << Query::NullIf(bem) << Instanz() << Id()).Check100();
  bemerkung=bem;
}


void Auftrag::setVerknr(const Kunde::ID vid) throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);
 (Query("update auftrag set verknr=? where (instanz,auftragid)=(?,?)")
   << Query::NullIf(vid,Kunde::none_id) << Instanz() << Id()).Check100();
 verknr=vid;
}
