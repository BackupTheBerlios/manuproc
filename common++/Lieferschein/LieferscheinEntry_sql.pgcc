/* $Id: LieferscheinEntry_sql.pgcc,v 1.9 2002/02/05 17:15:52 christof Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include"LieferscheinEntry.h"
#include"Lieferschein.h"
#include<Aux/Transaction.h>
#include <Auftrag/AufEintragBase.h>
#include<Auftrag/auftrag_status.h>

exec sql include sqlca;

LieferscheinEntry::LieferscheinEntry(const LieferscheinBase &lsbase, int zeile)
 throw(SQLerror) : LieferscheinBase(lsbase), zeilennr(zeile) 
{
 exec sql begin declare section;
 int INSTANZ=Instanz();
 int LFRSID=Id();
 int ZEILE=Zeile();
 int REFAUFTRAGID;
 int REFZEILENNR;
 int STUECK;
 float MENGE;
 long ARTIKELID;
 bool ZUSATZINFO;
 int PALETTE;
 exec sql end declare section;
 
 exec sql select artikelid, coalesce(refauftragid,0), 
	 	coalesce(refzeilennr,0), stueck, coalesce(menge,0),
	 	coalesce(palette,0), coalesce(zusatzinfo,'f')
	into :ARTIKELID, :REFAUFTRAGID, :REFZEILENNR, :STUECK, :MENGE,
		:PALETTE, :ZUSATZINFO
	from lieferscheinentry 
   where (instanz,lfrsid,zeile) = (:INSTANZ,:LFRSID,:ZEILE);
 SQLerror::test(__FILELINE__);
 
 artikel=ArtikelBase(ARTIKELID);
 refauftrag=AufEintragBase(Instanz(),REFAUFTRAGID,REFZEILENNR);
 stueck=STUECK;
 menge=MENGE;
 palette=PALETTE;
 zusatzinfo=ZUSATZINFO;
}

LieferscheinEntry::LieferscheinEntry(const LieferscheinBase &lsb,
	const AufEintragBase &auf, const ArtikelBase &art, int anzahl,
	mengen_t _menge,int _palette, bool _zusatzinfo)
throw(SQLerror) : LieferscheinBase(lsb),artikel(art),
			refauftrag(auf),stueck(anzahl),menge(_menge),
			palette(_palette), zusatzinfo(_zusatzinfo)
{
 exec sql begin declare section;
 int INSTANZ=Instanz();
 int LFRSID=Id();
 int ARTIKELID=artikel.Id();
 int REFAUFID=refauftrag.Id();
 int REFZEILENNR=refauftrag.ZNr();
 int STK=stueck;
 int ZEILE;
 float MENGE=menge;
 int PALETTE=palette;
 bool ZUSATZINFO=zusatzinfo;
 exec sql end declare section;

 Transaction tr;
 
 exec sql lock table lieferscheinentry in exclusive mode;
 SQLerror::test(__FILELINE__":LieferscheinEntry: lock table");
 
 exec sql select coalesce(max(zeile)+1,1) into :ZEILE from lieferscheinentry
	where (instanz,lfrsid)=(:INSTANZ,:LFRSID) ;
 SQLerror::test(__FILELINE__":LieferscheinEntry: select max(zeilennr)");

 exec sql insert into lieferscheinentry 
 		(instanz,lfrsid,zeile,artikelid, refauftragid, refzeilennr, stueck,
		menge,palette,zusatzinfo)
 	values
 		(:INSTANZ,:LFRSID,:ZEILE,:ARTIKELID,nullif(:REFAUFID,0),
 		 nullif(:REFZEILENNR,0),:STK,nullif(:MENGE,0),:PALETTE,:ZUSATZINFO);
 SQLerror::test(__FILELINE__":LieferscheinEntry: insert into lieferscheinentry");

 zeilennr=ZEILE;
 
 tr.commit();
}


LieferscheinEntry::LieferscheinEntry(const LieferscheinBase &lsb,
			const ArtikelBase &art, int anzahl,
			mengen_t _menge,int _palette, bool zusatz)
							throw(SQLerror) 
{  *this=LieferscheinEntry(lsb,AufEintragBase(Instanz(),0,0),art,anzahl,_menge,_palette,zusatz);
}

void LieferscheinEntry::deleteEntry(const LieferscheinEntry &lse) throw(SQLerror)
{
 exec sql begin declare section;
 int INSTANZ=lse.Instanz();
 int LFRSID=lse.Id();
 int ZEILE=lse.Zeile();
// int AUFID=lse.AufId();  
// int AUFZNR=lse.AufZeile();
// int STATUS;   
// int BESTELLT; 
// int GELIEFERT;
 exec sql end declare section;

 Transaction tr;

 exec sql lock table lieferscheinentry in exclusive mode;
 exec sql lock table auftragentry in exclusive mode;
 
 exec sql delete from lieferscheinentry where
		(instanz,lfrsid,zeile) = (:INSTANZ,:LFRSID,:ZEILE);
 SQLerror::test(__FILELINE__":deleteEntry: delete from lieferscheinentry");
 
 if (lse.AufId() || lse.AufZeile())
 {
//  exec sql select bestellt, geliefert, status
//        into :BESTELLT, :GELIEFERT, :STATUS
//        from auftragentry where
//        auftragid = :AUFID and zeilennr = :AUFZNR;
//    SQLerror::test(__FILELINE__);
 
    AuftragBase::mengen_t geliefert=0;
    if (!lse.Menge()) geliefert = lse.Anzahl();
    else              geliefert = lse.Anzahl()*lse.Menge();
//    if(GELIEFERT<BESTELLT) STATUS=(AufStatVal)OPEN;  
    AufEintragBase(lse.Instanz(),lse.AufId(),lse.AufZeile()).abschreiben(-geliefert);
     
//    exec sql update auftragentry set geliefert= :GELIEFERT, status= :STATUS
//        where auftragid= :AUFID and zeilennr= :AUFZNR;
//    SQLerror::test(__FILELINE__);
 }

 tr.commit();
}
