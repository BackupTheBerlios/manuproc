// $Id: EAN_sql.pgcc,v 1.21 2006/10/31 16:04:21 christof Exp $
/*  libKomponenten: GUI components for ManuProC's libcommon++
 *  Copyright (C) 1998-2001 Adolf Petig GmbH & Co. KG
 *                             written by Christof Petig and Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */ 
    
#include <Misc/Transaction.h>
#include <EAN.h>
#include <Misc/itos.h>
#include <ExtBezSchema/ExtBezSchemaHandle.h>
#include <Misc/Query.h>
#include <Misc/FetchIStream.h>

//std::string EAN::next_value(const ArtikelTyp at)
std::string EAN::next_value()
{
 Transaction tr;
 Query("lock table ean_bereich in ACCESS EXCLUSIVE mode");

 int rid=EAN_Range::NextRangeID();
 unsigned long long next_ean=0;

 if(rid>0)
 {
  EAN_Range range(rid);
  next_ean=range.ReserveNext();
  tr.commit();
 }
 else
   tr.rollback();

 if(next_ean!=0) return EAN::add_Pruefsumme(ulltos(next_ean));

 std::vector<int> ids;

 Query q("SELECT id from artbez_warengruppe where mit_ean=true");

 q.FetchArray(ids);	

 unsigned long long max=0;

 for(std::vector<int>::const_iterator i=ids.begin();i!=ids.end();++i)
   {
    ArtikelTyp at((ArtikelTyp)*i);
    std::string table=cH_ExtBezSchema(ExtBezSchema::default_id,at)->TableName();

    std::string RESULT;

    std::string query("select max(substr(ean,1,12)) from ");
    query+=table;

    Query(query) >> RESULT;


    unsigned long long int ean=strtoll(RESULT.c_str(),NULL,10);
    if(max<ean) max=ean;
   }

 max++;
 return add_Pruefsumme(ulltos(max));    

}    


EAN_Range::EAN_Range(int _id) throw(SQLerror)
: id(_id)
{
 Query("select fixed,von,bis from ean_bereich where id=?")
 << _id >> fixed >> von >> bis;
}


// range id or 0 at error
int EAN_Range::NextRangeID() throw(SQLerror)
{
 int ret=0;
 Query q("SELECT id from ean_bereich where von<=bis "
	 " order by bis-von,fixed limit 1");

 FetchIStream fi=q.Fetch();
 if(fi.good())
    fi >> ret;

 return ret;
}



unsigned long long EAN_Range::ReserveNext() throw(SQLerror)
{
 unsigned long long next=0;
 int old_von=von;

 if(von<=bis)
   {
    if(von==bis) bis=-1;
    else von++;
   }
 else return 0;

 Query("update ean_bereich set von=?,bis=? where id=?")
	<< von << bis << id;

 next=(((unsigned long long)(fixed))*1000)+old_von; 
 return next;    
}




                 