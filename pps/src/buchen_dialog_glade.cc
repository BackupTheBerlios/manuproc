// generated 2006/5/22 16:46:05 CEST by christof@vesta.petig-baender.de
// using glademm V2.12.1
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- auftrag.glade
// for gtk 2.8.17 and gtkmm 2.8.5
//
// Please modify the corresponding derived classes in ./src/buchen_dialog.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#include <sigc++/bind.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "buchen_dialog_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/button.h>
#include <gtkmm/buttonbox.h>
#include <gtkmm/image.h>
#include <gtkmm/stockid.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
#include <gtkmm/toolbutton.h>
#else //
#endif //
#include <gtkmm/toolbar.h>
#include <gtkmm/box.h>
#ifndef ENABLE_NLS
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif


buchen_dialog_glade::buchen_dialog_glade(
)
{  buchen_dialog = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::Button *button34 = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-yes")));
   Gtk::Button *button35 = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-no")));
   Gtk::Button *button36 = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-cancel")));
   Gtk::Button *button41 = Gtk::manage(new class Gtk::Button(_("Nein, nicht mehr fragen")));
   Gtk::Image *button37_img = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-help"), Gtk::IconSize(3)));
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   Gtk::ToolButton *button37 = Gtk::manage(new class Gtk::ToolButton(*button37_img, ""));
#endif //
   Gtk::Toolbar *toolbar17 = Gtk::manage(new class Gtk::Toolbar());
   text = Gtk::manage(new class Gtk::Label(_("label")));
   
   Gtk::VBox *vbox23 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::HBox *hbox34 = Gtk::manage(new class Gtk::HBox(false, 0));
   text2 = Gtk::manage(new class Gtk::Label(_("label")));
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar17->append(*button37);
#else //
   
   
   toolbar17->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("", *button37_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button37 = static_cast<Gtk::Button *>(toolbar17->tools().back().get_widget());
#endif //
   button34->set_flags(Gtk::CAN_FOCUS);
   button34->set_flags(Gtk::CAN_DEFAULT);
   button34->set_relief(Gtk::RELIEF_NORMAL);
   button35->set_flags(Gtk::CAN_FOCUS);
   button35->set_flags(Gtk::CAN_DEFAULT);
   button35->set_relief(Gtk::RELIEF_NORMAL);
   button36->set_flags(Gtk::CAN_FOCUS);
   button36->set_flags(Gtk::CAN_DEFAULT);
   button36->set_relief(Gtk::RELIEF_NORMAL);
   button41->set_flags(Gtk::CAN_FOCUS);
   button41->set_flags(Gtk::CAN_DEFAULT);
   button41->set_relief(Gtk::RELIEF_NORMAL);
   buchen_dialog->get_action_area()->property_layout_style().set_value(Gtk::BUTTONBOX_END);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   button37->set_sensitive(false);
   button37->set_visible_horizontal(true);
   button37->set_visible_vertical(true);
   button37->set_is_important(false);
   button37->set_homogeneous(true);
   button37->set_expand(false);
#endif //
   button37_img->show();
   toolbar17->set_tooltips(true);
   toolbar17->set_toolbar_style(Gtk::TOOLBAR_ICONS);
   toolbar17->set_orientation(Gtk::ORIENTATION_HORIZONTAL);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar17->set_show_arrow(true);
#endif //
   text->set_alignment(0.5,0.5);
   text->set_padding(0,0);
   text->set_justify(Gtk::JUSTIFY_CENTER);
   text->set_line_wrap(false);
   text->set_use_markup(false);
   text->set_selectable(false);
   vbox23->pack_start(*text, Gtk::PACK_SHRINK, 0);
   hbox34->pack_start(*toolbar17, Gtk::PACK_SHRINK, 0);
   hbox34->pack_start(*vbox23, Gtk::PACK_SHRINK, 0);
   text2->set_alignment(0.5,0.5);
   text2->set_padding(0,0);
   text2->set_justify(Gtk::JUSTIFY_CENTER);
   text2->set_line_wrap(false);
   text2->set_use_markup(false);
   text2->set_selectable(false);
   buchen_dialog->get_vbox()->set_homogeneous(false);
   buchen_dialog->get_vbox()->set_spacing(8);
   buchen_dialog->get_vbox()->pack_start(*hbox34, Gtk::PACK_SHRINK, 0);
   buchen_dialog->get_vbox()->pack_start(*text2, Gtk::PACK_SHRINK, 0);
   buchen_dialog->set_title("");
   buchen_dialog->set_modal(true);
   buchen_dialog->property_window_position().set_value(Gtk::WIN_POS_NONE);
   buchen_dialog->set_resizable(true);
   buchen_dialog->property_destroy_with_parent().set_value(false);
   buchen_dialog->set_has_separator(true);
   buchen_dialog->add_action_widget(*button34, -8);
   buchen_dialog->add_action_widget(*button35, -9);
   buchen_dialog->add_action_widget(*button36, -6);
   buchen_dialog->add_action_widget(*button41, -2);
   button34->show();
   button35->show();
   button36->show();
   button41->show();
   button37->show();
   toolbar17->show();
   text->show();
   vbox23->show();
   hbox34->show();
   text2->show();
   buchen_dialog->show();
}

buchen_dialog_glade::~buchen_dialog_glade()
{  delete gmm_data;
}
