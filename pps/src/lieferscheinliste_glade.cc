// generated 2006/5/22 16:46:05 CEST by christof@vesta.petig-baender.de
// using glademm V2.12.1
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- auftrag.glade
// for gtk 2.8.17 and gtkmm 2.8.5
//
// Please modify the corresponding derived classes in ./src/lieferscheinliste.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#include <sigc++/bind.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "lieferscheinliste_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/stockid.h>
#include <gtkmm/image.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
#include <gtkmm/toolbutton.h>
#else //
#include <gtkmm/button.h>
#endif //
#include <gtkmm/toolbar.h>
#include <gtkmm/radiobutton.h>
#include <gtkmm/box.h>
#include <gtkmm/label.h>
#include <gtkmm/frame.h>
#include <gtkmm/menuitem.h>
#include <gtkmm/menu.h>
#include <gtkmm/viewport.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/scrolledwindow.h>
#ifndef ENABLE_NLS
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif


lieferscheinliste_glade::lieferscheinliste_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  
   
   Gtk::Window *lieferscheinliste = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::Image *button_close_img = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-quit"), Gtk::IconSize(3)));
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   Gtk::ToolButton *button_close = Gtk::manage(new class Gtk::ToolButton(*button_close_img, _("Schließen")));
#endif //
   Gtk::Image *button_show_img = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-find"), Gtk::IconSize(3)));
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   Gtk::ToolButton *button_show = Gtk::manage(new class Gtk::ToolButton(*button_show_img, _("Anzeigen")));
#endif //
   Gtk::Image *button_drucken_img = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-print"), Gtk::IconSize(3)));
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   Gtk::ToolButton *button_drucken = Gtk::manage(new class Gtk::ToolButton(*button_drucken_img, _("Drucken")));
#endif //
   Gtk::Toolbar *toolbar11 = Gtk::manage(new class Gtk::Toolbar());
   Gtk::RadioButton::Group _RadioBGroup_radiobutton_alle_kunden;
   radiobutton_alle_kunden = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobutton_alle_kunden, _("alle")));
   radiobutton_nur_kunde = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobutton_alle_kunden, _("einen")));
   radiobutton_kundengruppe = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobutton_alle_kunden, _("Gruppe")));
   
   Gtk::HBox *hbox29 = Gtk::manage(new class Gtk::HBox(false, 0));
   kundenbox = new class KundenBox2();
   kundengruppe = new class Optionmenu_Kundengruppe();
   
   Gtk::HBox *hbox30 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::VBox *fixed3 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label149 = Gtk::manage(new class Gtk::Label(_("Kundenauswahl")));
   Gtk::Frame *frame25 = Gtk::manage(new class Gtk::Frame());
   Gtk::RadioButton::Group _RadioBGroup_radiobutton_alle_artikel;
   radiobutton_alle_artikel = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobutton_alle_artikel, _("Zeige alle Artikel")));
   radiobutton_nur_artikel = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobutton_alle_artikel, _("Zeige nur Artikel")));
   first_komponent = Gtk::manage(new class Gtk::CheckButton(_("nur Art.Nr. \n"
		"einschränken")));
   
   Gtk::HBox *hbox18 = Gtk::manage(new class Gtk::HBox(false, 0));
   artikelbox = new class ArtikelBox(1);
   
   Gtk::VBox *fixed1 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label148 = Gtk::manage(new class Gtk::Label(_("Artikelauswahl")));
   Gtk::Frame *frame26 = Gtk::manage(new class Gtk::Frame());
   Gtk::RadioButton::Group _RadioBGroup_radiobutton_alle_zeit_von;
   radiobutton_alle_zeit_von = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobutton_alle_zeit_von, _("Zeige vom Anfang")));
   radiobutton_nur_zeit_von = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobutton_alle_zeit_von, _("Zeige vom")));
   Wdatum_von = new class datewin();
   
   Gtk::VBox *fixed2 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::RadioButton::Group _RadioBGroup_radiobutton_alle_zeit_bis;
   radiobutton_alle_zeit_bis = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobutton_alle_zeit_bis, _("bis heute")));
   radiobutton_nur_zeit_bis = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobutton_alle_zeit_bis, _("bis zum")));
   Wdatum_bis = new class datewin();
   
   Gtk::VBox *fixed4 = Gtk::manage(new class Gtk::VBox(false, 0));
   date_cumulate = Gtk::manage(new class Gtk::OptionMenu());
   
   Gtk::VBox *vbox12 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label147 = Gtk::manage(new class Gtk::Label(_("Kumulieren")));
   Gtk::Frame *frame28 = Gtk::manage(new class Gtk::Frame());
   Gtk::HBox *hbox19 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label146 = Gtk::manage(new class Gtk::Label(_("Zeitraumauswahl")));
   Gtk::Frame *frame27 = Gtk::manage(new class Gtk::Frame());
   Gtk::HBox *table15 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Viewport *viewport5 = Gtk::manage(new class Gtk::Viewport(*manage(new Gtk::Adjustment(0,0,1)), *manage(new Gtk::Adjustment(0,0,1))));
   Gtk::ScrolledWindow *scrolledwindow18 = Gtk::manage(new class Gtk::ScrolledWindow());
   label_anzahl = Gtk::manage(new class Gtk::Label(_("label81")));
   progressbar = Gtk::manage(new class Gtk::ProgressBar());
   tree = new class SimpleTree(13);
   
   Gtk::ScrolledWindow *scrolledwindow10 = Gtk::manage(new class Gtk::ScrolledWindow());
   Gtk::VBox *table14 = Gtk::manage(new class Gtk::VBox(false, 0));
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar11->append(*button_close);
#else //
   
   
   toolbar11->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem(_("Schließen"), *button_close_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button_close = static_cast<Gtk::Button *>(toolbar11->tools().back().get_widget());
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar11->append(*button_show);
#else //
   
   
   toolbar11->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem(_("Anzeigen"), *button_show_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button_show = static_cast<Gtk::Button *>(toolbar11->tools().back().get_widget());
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar11->append(*button_drucken);
#else //
   
   
   toolbar11->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem(_("Drucken"), *button_drucken_img, Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button_drucken = static_cast<Gtk::Button *>(toolbar11->tools().back().get_widget());
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   button_close->set_visible_horizontal(true);
   button_close->set_visible_vertical(true);
   button_close->set_is_important(false);
   button_close->set_homogeneous(true);
   button_close->set_expand(false);
#endif //
   button_close_img->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   button_show->set_visible_horizontal(true);
   button_show->set_visible_vertical(true);
   button_show->set_is_important(false);
   button_show->set_homogeneous(true);
   button_show->set_expand(false);
#endif //
   button_show_img->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   button_drucken->set_visible_horizontal(true);
   button_drucken->set_visible_vertical(true);
   button_drucken->set_is_important(false);
   button_drucken->set_homogeneous(true);
   button_drucken->set_expand(false);
#endif //
   button_drucken_img->show();
   toolbar11->set_tooltips(true);
   toolbar11->set_toolbar_style(Gtk::TOOLBAR_BOTH);
   toolbar11->set_orientation(Gtk::ORIENTATION_HORIZONTAL);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>=3
   toolbar11->set_show_arrow(false);
#endif //
   radiobutton_alle_kunden->set_flags(Gtk::CAN_FOCUS);
   radiobutton_alle_kunden->set_relief(Gtk::RELIEF_NORMAL);
   radiobutton_alle_kunden->set_mode(true);
   radiobutton_alle_kunden->set_active(true);
   radiobutton_nur_kunde->set_flags(Gtk::CAN_FOCUS);
   radiobutton_nur_kunde->set_relief(Gtk::RELIEF_NORMAL);
   radiobutton_nur_kunde->set_mode(true);
   radiobutton_nur_kunde->set_active(false);
   radiobutton_kundengruppe->set_flags(Gtk::CAN_FOCUS);
   radiobutton_kundengruppe->set_relief(Gtk::RELIEF_NORMAL);
   radiobutton_kundengruppe->set_mode(true);
   radiobutton_kundengruppe->set_active(false);
   hbox29->pack_start(*radiobutton_nur_kunde, Gtk::PACK_SHRINK, 0);
   hbox29->pack_start(*radiobutton_kundengruppe, Gtk::PACK_SHRINK, 0);
   hbox30->pack_start(*kundenbox);
   hbox30->pack_start(*kundengruppe);
   fixed3->pack_start(*radiobutton_alle_kunden, Gtk::PACK_SHRINK, 0);
   fixed3->pack_start(*hbox29, Gtk::PACK_SHRINK, 0);
   fixed3->pack_start(*hbox30, Gtk::PACK_SHRINK, 0);
   label149->set_alignment(0.5,0.5);
   label149->set_padding(0,0);
   label149->set_justify(Gtk::JUSTIFY_LEFT);
   label149->set_line_wrap(false);
   label149->set_use_markup(false);
   label149->set_selectable(false);
   frame25->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame25->set_label_align(0,0.5);
   frame25->add(*fixed3);
   frame25->set_label_widget(*label149);
   radiobutton_alle_artikel->set_flags(Gtk::CAN_FOCUS);
   radiobutton_alle_artikel->set_relief(Gtk::RELIEF_NORMAL);
   radiobutton_alle_artikel->set_mode(true);
   radiobutton_alle_artikel->set_active(true);
   radiobutton_nur_artikel->set_flags(Gtk::CAN_FOCUS);
   radiobutton_nur_artikel->set_relief(Gtk::RELIEF_NORMAL);
   radiobutton_nur_artikel->set_mode(true);
   radiobutton_nur_artikel->set_active(false);
   first_komponent->set_flags(Gtk::CAN_FOCUS);
   first_komponent->set_relief(Gtk::RELIEF_NORMAL);
   first_komponent->set_mode(true);
   first_komponent->set_active(true);
   hbox18->pack_start(*radiobutton_nur_artikel, Gtk::PACK_SHRINK, 0);
   hbox18->pack_start(*first_komponent, Gtk::PACK_SHRINK, 0);
   fixed1->pack_start(*radiobutton_alle_artikel, Gtk::PACK_SHRINK, 0);
   fixed1->pack_start(*hbox18, Gtk::PACK_SHRINK, 0);
   fixed1->pack_start(*artikelbox, Gtk::PACK_SHRINK, 0);
   label148->set_alignment(0.5,0.5);
   label148->set_padding(0,0);
   label148->set_justify(Gtk::JUSTIFY_LEFT);
   label148->set_line_wrap(false);
   label148->set_use_markup(false);
   label148->set_selectable(false);
   frame26->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame26->set_label_align(0,0.5);
   frame26->add(*fixed1);
   frame26->set_label_widget(*label148);
   radiobutton_alle_zeit_von->set_flags(Gtk::CAN_FOCUS);
   radiobutton_alle_zeit_von->set_relief(Gtk::RELIEF_NORMAL);
   radiobutton_alle_zeit_von->set_mode(true);
   radiobutton_alle_zeit_von->set_active(true);
   radiobutton_nur_zeit_von->set_flags(Gtk::CAN_FOCUS);
   radiobutton_nur_zeit_von->set_relief(Gtk::RELIEF_NORMAL);
   radiobutton_nur_zeit_von->set_mode(true);
   radiobutton_nur_zeit_von->set_active(false);
   fixed2->pack_start(*radiobutton_alle_zeit_von, Gtk::PACK_SHRINK, 0);
   fixed2->pack_start(*radiobutton_nur_zeit_von, Gtk::PACK_SHRINK, 0);
   fixed2->pack_start(*Wdatum_von, Gtk::PACK_SHRINK, 0);
   radiobutton_alle_zeit_bis->set_flags(Gtk::CAN_FOCUS);
   radiobutton_alle_zeit_bis->set_relief(Gtk::RELIEF_NORMAL);
   radiobutton_alle_zeit_bis->set_mode(true);
   radiobutton_alle_zeit_bis->set_active(true);
   radiobutton_nur_zeit_bis->set_flags(Gtk::CAN_FOCUS);
   radiobutton_nur_zeit_bis->set_relief(Gtk::RELIEF_NORMAL);
   radiobutton_nur_zeit_bis->set_mode(true);
   radiobutton_nur_zeit_bis->set_active(false);
   fixed4->pack_start(*radiobutton_alle_zeit_bis, Gtk::PACK_SHRINK, 0);
   fixed4->pack_start(*radiobutton_nur_zeit_bis, Gtk::PACK_SHRINK, 0);
   fixed4->pack_start(*Wdatum_bis, Gtk::PACK_SHRINK, 0);
   date_cumulate->set_flags(Gtk::CAN_FOCUS);
   {  
      
      Gtk::Menu *_m(manage(new Gtk::Menu()));
      Gtk::MenuItem *_mi;
      _mi = manage(new Gtk::MenuItem(_("Datum")));
      _m->append(*_mi);
      _mi->show();
      _mi->property_user_data().set_value((gpointer)0);
      _mi = manage(new Gtk::MenuItem(_("Woche")));
      _m->append(*_mi);
      _mi->show();
      _mi->property_user_data().set_value((gpointer)1);
      _mi = manage(new Gtk::MenuItem(_("Monat")));
      _m->append(*_mi);
      _mi->show();
      _mi->property_user_data().set_value((gpointer)2);
      _mi = manage(new Gtk::MenuItem(_("Quartal")));
      _m->append(*_mi);
      _mi->show();
      _mi->property_user_data().set_value((gpointer)3);
      _mi = manage(new Gtk::MenuItem(_("Jahr")));
      _m->append(*_mi);
      _mi->show();
      _mi->property_user_data().set_value((gpointer)4);
      date_cumulate->set_menu(*_m);
      date_cumulate->set_history(0);
   }
   date_cumulate->set_history(0);
   vbox12->pack_start(*date_cumulate, Gtk::PACK_SHRINK, 0);
   label147->set_alignment(0.5,0.5);
   label147->set_padding(0,0);
   label147->set_justify(Gtk::JUSTIFY_LEFT);
   label147->set_line_wrap(false);
   label147->set_use_markup(false);
   label147->set_selectable(false);
   frame28->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame28->set_label_align(0,0.5);
   frame28->add(*vbox12);
   frame28->set_label_widget(*label147);
   hbox19->pack_start(*fixed2, Gtk::PACK_SHRINK, 0);
   hbox19->pack_start(*fixed4, Gtk::PACK_SHRINK, 0);
   hbox19->pack_start(*frame28, Gtk::PACK_SHRINK, 0);
   label146->set_alignment(0.5,0.5);
   label146->set_padding(0,0);
   label146->set_justify(Gtk::JUSTIFY_LEFT);
   label146->set_line_wrap(false);
   label146->set_use_markup(false);
   label146->set_selectable(false);
   frame27->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame27->set_label_align(0,0.5);
   frame27->add(*hbox19);
   frame27->set_label_widget(*label146);
   table15->pack_start(*frame25, Gtk::PACK_SHRINK, 0);
   table15->pack_start(*frame26, Gtk::PACK_SHRINK, 0);
   table15->pack_start(*frame27, Gtk::PACK_SHRINK, 0);
   viewport5->set_shadow_type(Gtk::SHADOW_NONE);
   viewport5->add(*table15);
   scrolledwindow18->set_shadow_type(Gtk::SHADOW_NONE);
   scrolledwindow18->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow18->property_window_placement().set_value(Gtk::CORNER_BOTTOM_RIGHT);
   scrolledwindow18->add(*viewport5);
   label_anzahl->set_alignment(0,0.5);
   label_anzahl->set_padding(0,0);
   label_anzahl->set_justify(Gtk::JUSTIFY_CENTER);
   label_anzahl->set_line_wrap(false);
   label_anzahl->set_use_markup(false);
   label_anzahl->set_selectable(false);
   scrolledwindow10->set_shadow_type(Gtk::SHADOW_NONE);
   scrolledwindow10->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow10->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow10->add(*tree);
   table14->pack_start(*toolbar11, Gtk::PACK_SHRINK, 0);
   table14->pack_start(*scrolledwindow18, Gtk::PACK_SHRINK, 0);
   table14->pack_start(*label_anzahl, Gtk::PACK_SHRINK, 0);
   table14->pack_start(*progressbar, Gtk::PACK_SHRINK, 0);
   table14->pack_start(*scrolledwindow10);
   lieferscheinliste->set_title(_("Lieferscheinliste"));
   lieferscheinliste->set_default_size(800,600);
   lieferscheinliste->set_modal(false);
   lieferscheinliste->property_window_position().set_value(Gtk::WIN_POS_NONE);
   lieferscheinliste->set_resizable(true);
   lieferscheinliste->property_destroy_with_parent().set_value(false);
   lieferscheinliste->set_icon(render_icon(Gtk::StockID("gtk-dnd-multiple"),Gtk::IconSize(Gtk::ICON_SIZE_LARGE_TOOLBAR)));
   lieferscheinliste->add(*table14);
   button_close->show();
   button_show->show();
   button_drucken->show();
   toolbar11->show();
   radiobutton_alle_kunden->show();
   radiobutton_nur_kunde->show();
   radiobutton_kundengruppe->show();
   hbox29->show();
   kundenbox->show();
   hbox30->show();
   fixed3->show();
   label149->show();
   frame25->show();
   radiobutton_alle_artikel->show();
   radiobutton_nur_artikel->show();
   first_komponent->show();
   hbox18->show();
   artikelbox->show();
   fixed1->show();
   label148->show();
   frame26->show();
   radiobutton_alle_zeit_von->show();
   radiobutton_nur_zeit_von->show();
   Wdatum_von->show();
   fixed2->show();
   radiobutton_alle_zeit_bis->show();
   radiobutton_nur_zeit_bis->show();
   Wdatum_bis->show();
   fixed4->show();
   date_cumulate->show();
   vbox12->show();
   label147->show();
   frame28->show();
   hbox19->show();
   label146->show();
   frame27->show();
   table15->show();
   viewport5->show();
   scrolledwindow18->show();
   label_anzahl->show();
   progressbar->show();
   tree->show();
   scrolledwindow10->show();
   table14->show();
   lieferscheinliste->show();
   button_close->signal_clicked().connect(SigC::slot(*this, &lieferscheinliste_glade::on_button_close_clicked), false);
   button_show->signal_clicked().connect(SigC::slot(*this, &lieferscheinliste_glade::on_button_show_clicked), false);
   button_drucken->signal_clicked().connect(SigC::slot(*this, &lieferscheinliste_glade::drucken_clicked), false);
   radiobutton_alle_kunden->signal_toggled().connect(SigC::slot(*this, &lieferscheinliste_glade::on_radiobutton_kunde_toggled), false);
   radiobutton_nur_kunde->signal_toggled().connect(SigC::slot(*this, &lieferscheinliste_glade::on_radiobutton_kunde_toggled), false);
   radiobutton_kundengruppe->signal_toggled().connect(SigC::slot(*this, &lieferscheinliste_glade::on_radiobutton_kunde_toggled), false);
   kundenbox->signal_activate().connect(SigC::slot(*this, &lieferscheinliste_glade::kundenbox_activate));
   kundengruppe->signal_activate().connect(SigC::slot(*this, &lieferscheinliste_glade::kundengruppe_activate));
   radiobutton_alle_artikel->signal_toggled().connect(SigC::slot(*this, &lieferscheinliste_glade::on_radiobutton_artikel_toggled), false);
   radiobutton_nur_artikel->signal_toggled().connect(SigC::slot(*this, &lieferscheinliste_glade::on_radiobutton_artikel_toggled), false);
   artikelbox->signal_activate().connect(SigC::slot(*this, &lieferscheinliste_glade::artikelbox_activate));
   radiobutton_alle_zeit_von->signal_toggled().connect(SigC::slot(*this, &lieferscheinliste_glade::on_radiobutton_zeit_toggled), false);
   radiobutton_nur_zeit_von->signal_toggled().connect(SigC::slot(*this, &lieferscheinliste_glade::on_radiobutton_zeit_toggled), false);
   Wdatum_von->signal_activate().connect(SigC::slot(*this, &lieferscheinliste_glade::datum_von_activate));
   radiobutton_alle_zeit_bis->signal_toggled().connect(SigC::slot(*this, &lieferscheinliste_glade::on_radiobutton_zeit_2_toggled), false);
   radiobutton_nur_zeit_bis->signal_toggled().connect(SigC::slot(*this, &lieferscheinliste_glade::on_radiobutton_zeit_2_toggled), false);
   Wdatum_bis->signal_activate().connect(SigC::slot(*this, &lieferscheinliste_glade::datum_bis_activate));
}

lieferscheinliste_glade::~lieferscheinliste_glade()
{  delete kundenbox;
   delete kundengruppe;
   delete artikelbox;
   delete Wdatum_von;
   delete Wdatum_bis;
   delete tree;
   delete gmm_data;
}
