// $Id: FetchIStream.pgcc,v 1.18 2002/06/24 07:35:40 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 2001 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Misc/FetchIStream.h>
#include <Misc/SQLerror.h>
exec sql include sqlca;
#include <Misc/itos.h>
#include <locale.h>

#define DEBUG_FIS(x) std::cerr << x << '\n'
// ,y...) x,##y

extern "C" {
extern PGresult **ECPGdescriptor_lvalue(int line, const char *descriptor);
}

// ecpg intcoming descriptor has to be FetchIStream

FetchIStream::FetchIStream(const std::string &descr, int line)
	: naechstesFeld(0), zeile(line), result(0)
{  PGresult **r=ECPGdescriptor_lvalue(__LINE__,descr.c_str());
   if (r) result=*r;
}

FetchIStream &FetchIStream::operator>>(std::string &str)
{  const char *pval = PQgetvalue(result, zeile, naechstesFeld);
   if (pval) str=pval;
   else str="";
//   DEBUG_FIS("PQgetvalue(,"<<zeile<<','<<naechstesFeld<<")="<<str);
   naechstesFeld++;
   return *this;
}

int FetchIStream::getIndicator() const
{  return -PQgetisnull(result, zeile, naechstesFeld);
}

FetchIStream &FetchIStream::operator>>(int &i)
{  std::string s;
   *this >> s;
   i=strtol(s.c_str(),0,10);
   return *this;
}

FetchIStream &FetchIStream::operator>>(float &f)
{  double d=0;
   *this >> d;
   f=d;
   return *this;
}

FetchIStream &FetchIStream::operator>>(double &f)
{  std::string s;
   *this >> s;
   /* Make sure we do NOT honor the locale for numeric input */
   /* since the database gives the standard decimal point */
   std::string oldlocale= setlocale(LC_NUMERIC, NULL);
   setlocale(LC_NUMERIC, "C");
   f=strtod(s.c_str(),0);
   setlocale(LC_NUMERIC, oldlocale.c_str());
   return *this;
}

FetchIStream &FetchIStream::operator>>(bool &b)
{  std::string s;
   *this >> s;
   b=s[0]=='t' || s[0]=='T' || s[0]=='1';
   return *this;
}

// note cursor is the name for both the cursor and the descriptor
Query::Query(const std::string &command)
: descriptor(std::string("Query")+ulltos(reinterpret_cast<unsigned long long>(this))), 
	eof(false), line(0), result(0)
{  exec sql begin declare section;
   char *COMMAND=const_cast<char*>(command.c_str());
   exec sql end declare section;
   
//   exec sql allocate descriptor X;
sqlca.sqlcode=0;
   ECPGallocate_desc(__LINE__, descriptor.c_str());
   if (sqlca.sqlcode) { DEBUG_FIS(SQLerror("allocate descriptor")); eof=true; }
//   exec sql prepare com from :COMMAND;
//   exec sql execute com into descriptor X;
   ECPGdo(__LINE__, NULL, COMMAND, 
   	ECPGt_EOIT,
   	ECPGt_descriptor, descriptor.c_str(), 0L, 0L, 0L,
   	ECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, ECPGt_EORT);
   if (sqlca.sqlcode) 
   { if (sqlca.sqlcode!=100) DEBUG_FIS(SQLerror("open")); 
     eof=true; 
   }
   result=*(ECPGdescriptor_lvalue(__LINE__,descriptor.c_str()));
}

FetchIStream Query::Fetch()
{  if (!eof)
   {  if (line<PQntuples(result)) return FetchIStream(result,line++);
      eof=true;
   }
   return FetchIStream((PGresult*)0);
}

Query::~Query()
{  //   exec sql deallocate descriptor X;
   ECPGdeallocate_desc(__LINE__, descriptor.c_str());
}

void Query::Execute(const std::string &command)
{  exec sql begin declare section;
   char *COMMAND=const_cast<char*>(command.c_str());
   exec sql end declare section;

   exec sql execute immediate :COMMAND;
}

