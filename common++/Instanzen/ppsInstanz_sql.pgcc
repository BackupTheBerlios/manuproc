/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 2002 Adolf Petig GmbH & Co. KG
 *  written by Jacek Jakubowski, Christof Petig, Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "ppsInstanz.h"
#include <Misc/FetchIStream.h>

FetchIStream &operator>>(FetchIStream &is, ppsInstanz::ID &v)
{  int i;
   is >> i;
   v=ppsInstanz::ID(i);
   return is;
}

FetchIStream &operator>>(FetchIStream &is, cH_ppsInstanz &v)
{  int i;
   is >> i;
   v=ppsInstanz::ID(i);
   return is;
}

FetchIStream &operator>>(FetchIStream &is, ppsInstanz &i)
{  is >> i.name 
	>> FetchIStream::MapNull(i.lager_fuer,ppsInstanzID::None)
	>> i.sortierung
	>> FetchIStream::MapNull(i.lieferschein)
	>> FetchIStream::MapNull(i.produziert_selbst)
	>> FetchIStream::MapNull(i.lagername)
	>> FetchIStream::MapNull(i.produktionsdauer_tage)
	>> FetchIStream::MapNull(i.einlagern_in,ppsInstanzID::None)
	>> FetchIStream::MapNull(i.automatisch_einlagern)
	>> i.typ
	>> FetchIStream::MapNull(i.externe_bestellung)
	>> FetchIStream::MapNull(i.overview)
	>> FetchIStream::MapNull(i.alt_group_nr,ppsInstanzID::None)
	;
 assert(i.typ=='L' || i.typ=='l' || i.typ=='P' || i.typ=='E');
 return is;
}

void ppsInstanz::get_name() throw(SQLerror)
{
 if(instid == ppsInstanzID::None) return;
 Query("select name,lager_fuer,sortierung,"
      "lieferschein,produziert_selbst,lagername,prod_dauer_tage,"
      "einlagern_in,automatisch_einlagern,typ,externe_bestellung,"
      "overview,alt_group_nr "
      "from prod_instanz where insid=?") << instid >> *this;
}


std::vector<cH_ppsInstanz> cH_ppsInstanz::get_all_instanz() throw(SQLerror)
{
  std::vector<cH_ppsInstanz> v;
  Query("select insid from prod_instanz order by sortierung")
  	.FetchArray(v);
  return v;
}

