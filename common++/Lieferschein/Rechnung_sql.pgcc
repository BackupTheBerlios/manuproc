/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include "Rechnung.h"
#include <Aux/Transaction.h>
#include <Aux/FetchIStream.h>
exec sql include sqlca;

Rechnung::Rechnung(RechnungBase::ID rid) throw(SQLerror)
: RechnungBase(rid), kunde(Kunde::default_id)
{
 if(rid==none_id) return;

 exec sql begin declare section;
   int RNGID = rid;
   int KDNR;
   char RNGART[1];
   char DATUM[21];
   int ZAHLART;
   char ZAHLZIEL[11];
   int IZAHLZIEL;
   int WAEHRUNG;
   float RABATT;
   bool BEZAHLT;
 exec sql end declare section;

 Transaction tr;

 exec sql select r.kundennr, date(r.datum), r.rngart, 
         zahlart, zahlziel, 
 			coalesce(waehrung,1), coalesce(rabatt,0), bezahlt
		into :KDNR, :DATUM, :RNGART, :ZAHLART, :ZAHLZIEL:IZAHLZIEL,
		   :WAEHRUNG, :RABATT, :BEZAHLT
 	from rechnung r where r.rngid = :RNGID ;
 SQLerror::test(__FILELINE__);

 kunde=cH_Kunde(KDNR);
 rngart = (RngArt)RNGART[0];
 zahlungsart = cH_Zahlungsart(ZAHLART);
 waehrung=cP_Waehrung(Waehrung::ID(WAEHRUNG));
 rabatt=RABATT;
 rgdatum=Petig::Datum(DATUM);
 bezahlt=BEZAHLT;
 zahlziel= IZAHLZIEL ? Petig::Datum() : Petig::Datum(ZAHLZIEL);

}

Rechnung::Rechnung(const cH_Kunde k,int jahr) throw(SQLerror)
	: RechnungBase(none_id), kunde(k),rabatt(0)
{
 exec sql begin declare section;
 int RNGID;
 int KUNDENNR;
 int JAHR=jahr;
 exec sql end declare section;
 
 if (!JAHR)
 {  exec sql select to_char(now(),'yy') into :JAHR;
    SQLerror::test(__FILELINE__);
 }
 else JAHR%=100;

 KUNDENNR=k->Id();

 Transaction tr;
  
 exec sql lock table lieferschein in exclusive mode;
 
 exec sql select coalesce(max(rngid)+1,:JAHR*10000)
 		into :RNGID
 		from rechnung where rngid 
 		between :JAHR*10000 and (:JAHR+1)*10000-1;
 SQLerror::test(__FILELINE__":Rechnung: select next rngid");
 
 exec sql insert into rechnung (rngid, kundennr,zahlart)
 	values (:RNGID, :KUNDENNR,0);
 SQLerror::test(__FILELINE__":Rechnung: insert into rechnung");	

 rngid=RNGID;
 rgdatum=Petig::Datum::today();

 tr.commit();
}


void Rechnung::setze_Datum(Petig::Datum rgdatum) throw(SQLerror)
{
 exec sql begin declare section;
   int RNGID=Id();
   char DATE[50]; 
 exec sql end declare section;
 //strncpy(DATE,rgdatum.c_str(),sizeof(DATE));
 rgdatum.write_postgres(DATE,sizeof(DATE));
 exec sql update rechnung set datum=:DATE where rngid=:RNGID;
 SQLerror::test(__FILELINE__":Rechnung: setze_Datum(Petig::Datum rgdatum)");	
}


void Rechnung::setze_Zahlungsart(cH_Zahlungsart z) throw(SQLerror)
{
 exec sql begin declare section;
   int RNGID=Id();
   int ZAHLART=z->Id(); 
 exec sql end declare section;
 exec sql update rechnung set zahlart=:ZAHLART where rngid=:RNGID;
 SQLerror::test(__FILELINE__":Rechnung: setze_Zahlungsart");	
}


void Rechnung::deleteLieferschein(const LieferscheinBase &lfrs) throw(SQLerror)
{
 exec sql begin declare section;
 int RNGID=Id();
 int LFRSID=lfrs.Id();
/* int INSTANZ=lfrs.Instanz(); */
 exec sql end declare section;
 
 Transaction tr;
 
 exec sql delete from rechnungentry 
 	where lfrsid=:LFRSID and rngid=:RNGID; 

 exec sql update lieferschein set rngid=null where lfrsid= :LFRSID;
 SQLerror::test(__FILELINE__);

 tr.commit();
 
}

#include <sys/types.h>
#include <unistd.h>

void Rechnung::addLieferschein(const LieferscheinBase &lfrs) throw(SQLerror)
{
 exec sql begin declare section; 
 int INSTANZ=lfrs.Instanz();
 int LFRSID=lfrs.Id();
 int RNGID=Id();
 int MAXZNR,MINZNR;
 exec sql end declare section;

 Transaction tr;

 exec sql select coalesce(min(zeile),0) into :MINZNR
 	from lieferscheinentry where (instanz,lfrsid)=(:INSTANZ,:LFRSID);

 exec sql lock table rechnungentry in exclusive mode; 
 SQLerror::test(__FILELINE__);

 exec sql select coalesce(max(zeilennr),0) into :MAXZNR 
	from rechnungentry where rngid= :RNGID;
 SQLerror::test(__FILELINE__);
 MAXZNR++;
 
 exec sql insert into rechnungentry 
 	(rngid,zeilennr, artikelid, lfrsid,lfrszeile, stueck,menge,
 		preis,rabatt,preismenge)
 	(select :RNGID,l.zeile - :MINZNR + :MAXZNR,
 		l.artikelid, l.lfrsid,l.zeile, l.stueck,l.menge,
 		coalesce(ae.preis,0),coalesce(ae.rabatt,0),
 		coalesce(ae.preismenge,1)
 	 from lieferscheinentry l
 	 	left join auftragentry ae 
 	 	on (l.instanz,l.refauftragid,l.refzeilennr)
 	 		= (ae.instanz,ae.auftragid,ae.zeilennr)
 	 where (l.instanz,l.lfrsid)=(:INSTANZ,:LFRSID)
 	 and not coalesce(zusatzinfo,'f')
 	 order by l.zeile);
 SQLerror::test(__FILELINE__); 

 exec sql update lieferschein set rngid=:RNGID 
 	where (instanz,lfrsid)=(:INSTANZ,:LFRSID);
 SQLerror::test(__FILELINE__);
 
 tr.commit();
}


void Rechnung::setzeWaehrung(const cP_Waehrung &w) throw(SQLerror)
{  waehrung=w;
 exec sql begin declare section;
 int RNGID;
 int WAEHRUNG;
 exec sql end declare section;

 RNGID=Id();
 WAEHRUNG=w->Id();
 exec sql update rechnung set waehrung=:WAEHRUNG where rngid=:RNGID;
 SQLerror::test(__FILELINE__);
}

void Rechnung::setze_Rabatt(rabatt_t r) throw(SQLerror)
{  rabatt=r;
 exec sql begin declare section;
 int RNGID;
 float RABATT;
 exec sql end declare section;

 RNGID=Id();
 RABATT=r;
 exec sql update rechnung set rabatt=:RABATT where rngid=:RNGID;
 SQLerror::test(__FILELINE__);
}

Rechnung::geldbetrag_t Rechnung::Betrag(bool brutto) const throw(SQLerror)
{
 exec sql begin declare section;
 float BETRAG;
 int IBETRAG;
 int RNGID= Id();
 exec sql end declare section;

 if(brutto)
   exec sql select  sum(round(preis*stueck,2)) 
	into :BETRAG:IBETRAG from rechnungentry
	where rngid = :RNGID;   
 else
   exec sql select  sum(round((round(preis*((100-rabatt)/100),2))*stueck,2)) 
	into :BETRAG:IBETRAG from rechnungentry
	where rngid = :RNGID; 

 return (IBETRAG ? 0 : BETRAG);
}

void RechnungBase::setEingezogen(int refnr) throw(SQLerror)
{
 exec sql begin declare section;
 int RNGID;
 int REFNR;
 exec sql end declare section;

 Transaction tr;

 RNGID = rngid;
 REFNR = refnr;

 exec sql update rechnung set bezahlt=true, einzug_refnr= :REFNR
	where rngid= :RNGID;

 tr.commit();
}


