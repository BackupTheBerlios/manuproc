// $Id: IntStringBox_sql.pgcc,v 1.3 2002/06/20 09:27:56 christof Exp $
/*  libKomponenten: GUI components for ManuProC's libcommon++ Copyright (C)
 *  1998-2000 Adolf Petig GmbH & Co. KG, written by Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "IntStringBox.hh"
exec sql include sqlca;
#include <Aux/itos.h>

bool IntStringBox::try_to_get_id()
{
  std::string squery="select "+_int_;
  if(string_2_info_only) squery +=", "+_string2_ ;
  squery +=" from "+_tabelle_+" where "+_string1_+
     "='"+sc1_string->get_text()+"'";
  if(!_string2_.empty() && !string_2_info_only) 
      squery   +=" and "+_string2_+"='"+sc2_string->get_text()+"'"; 
  exec sql begin declare section;
    char query[1024];
    int ID;
    char S2[50];
  exec sql end declare section;
  strncpy(query,squery.c_str(),sizeof(query));
  exec sql prepare id_cursor_ from :query;
  if(!string_2_info_only)  exec sql execute id_cursor_ into :ID;
  else  exec sql execute id_cursor_ into :ID,:S2;
  SQLerror::test(__FILELINE__,100);
  if (sqlca.sqlcode) return false;
  id=ID;
  sc_int->set_text(itos(id));
  if(string_2_info_only) sc2_string->set_text(S2);
  activate();
  return true;
}


void IntStringBox::int_search(gboolean *_continue, GtkSCContext newsearch)
{  exec sql begin declare section;
     char nummer[16];
     char query[1024];
   exec sql end declare section;
   try
   {  
      std::string squery;
      switch(newsearch)
      {  
         case GTK_SEARCH_OPEN:
             squery = "select "+_int_+" from "+_tabelle_
                  +" where text("+_int_+") like '"
                 +sc_int->get_text()+"%'";

	   if(eingeschraenkt)
	     squery+=einschraenkung;

	    squery+=" order by "+_int_;

             strncpy(query,squery.c_str(),sizeof(query));
             exec sql prepare int_cursor_ from :query;
      	    exec sql declare int_cursor cursor for int_cursor_;
      	    tr.open();
      	    exec sql open int_cursor;
      	    SQLerror::test(__FILELINE__);
      	    // fall through
      	 case GTK_SEARCH_FETCH:
      	    exec sql fetch int_cursor into :nummer;
      	    SQLerror::test(__FILELINE__,100);
      	    if (sqlca.sqlcode) return;
      	    sc_int->add_item(nummer);
      	    *_continue=true;
      	    break;
      	 case GTK_SEARCH_CLOSE:
      	    exec sql close int_cursor;
      	    SQLerror::test(__FILELINE__);
      	    tr.commit();
      	    break;
      }
   }
   catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
}

void IntStringBox::string2_search(gboolean *_continue, GtkSCContext newsearch)
{
//   scc_string->reset();
   exec sql begin declare section;
    char name[80];
    char query[1024];
   exec sql end declare section;
   
   try
   {  
     std::string squery;
     switch(newsearch)
      {  case GTK_SEARCH_OPEN:
            tr2.open();
             squery = "select distinct "+_string2_+" from "+_tabelle_+" where "
               +_string2_+" ilike '"+sc2_string->get_text()+"%'" ;
             if(!_string1_.empty()) squery += "and "+_string1_+" ilike '"
                  +sc1_string->get_text()+"%' ";

	   if(eingeschraenkt)
	     squery+=einschraenkung;

             squery +=(" order by "+_string2_);
             strncpy(query,squery.c_str(),sizeof(query));
             exec sql prepare string2_cursor_ from :query;
      	    exec sql declare string2_cursor cursor for string2_cursor_;
      	    exec sql open string2_cursor;
      	    SQLerror::test(__FILELINE__);
      	    // fall through
      	 case GTK_SEARCH_FETCH:
       	    exec sql fetch string2_cursor into :name;
      	    SQLerror::test(__FILELINE__,100);
      	    if (sqlca.sqlcode) return;
      	    sc2_string->add_item(name);
      	    *_continue=true;
      	    break;
      	 case GTK_SEARCH_CLOSE:
      	    exec sql close string2_cursor;
      	    SQLerror::test(__FILELINE__);
      	    tr2.commit();
      	    break;
      }
   }
   catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
}

void IntStringBox::string1_search(gboolean *_continue, GtkSCContext newsearch)
{
   exec sql begin declare section;
    char name[80];
    char query[1024];
   exec sql end declare section;
   
   try
   {  
     std::string squery;
     switch(newsearch)
      {  case GTK_SEARCH_OPEN:
            tr3.open();
             squery = "select distinct "+_string1_+" from "+_tabelle_+" where "
                  +_string1_+" ilike '"+sc1_string->get_text() +"%' ";
             if(!_string2_.empty()) squery += "and "+_string2_+" ilike '"
                  +sc2_string->get_text()+"%' ";

	   if(eingeschraenkt)
	     squery+=einschraenkung;

             squery +=(" order by "+_string1_);
             strncpy(query,squery.c_str(),sizeof(query));
             exec sql prepare string1_cursor_ from :query;
      	    exec sql declare string1_cursor cursor for string1_cursor_;
      	    exec sql open string1_cursor;
      	    SQLerror::test(__FILELINE__);
      	    // fall through
      	 case GTK_SEARCH_FETCH:
       	    exec sql fetch string1_cursor into :name;
      	    SQLerror::test(__FILELINE__,100);
      	    if (sqlca.sqlcode) return;
      	    sc1_string->add_item(name);
      	    *_continue=true;
      	    break;
      	 case GTK_SEARCH_CLOSE:
      	    exec sql close string1_cursor;
      	    SQLerror::test(__FILELINE__);
      	    tr3.commit();
      	    break;
      }
   }
   catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
}

