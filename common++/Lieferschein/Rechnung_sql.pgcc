/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include "Rechnung.h"
#include <Misc/Transaction.h>
#include <Misc/Query.h>
exec sql include sqlca;


Rechnung::Rechnung(RechnungBase::ID rid) throw(SQLerror)
: RechnungBase(rid), kunde(Kunde::default_id), 
   zahlungsart(Zahlungsart::none_id),notiz_valid(false)
{
 if(rid==none_id) return;

 exec sql begin declare section;
   int RNGID = rid;
   int KDNR;
   char RNGART[1];
   char DATUM[21];
   int ZAHLART;
   char ZAHLZIEL[11];
   int IZAHLZIEL;
   int WAEHRUNG;
   float KURS=0;
   float RABATT;
   bool BEZAHLT;
   bool ENTSORGUNG=false;
   int EINZUG_REFNR=0;
   int FIBUBUCHID=0;
 exec sql end declare section;

 Transaction tr;

 #ifdef MABELLA_EXTENSIONS
 exec sql select r.kundennr, date(r.datum), r.rngart, 
         coalesce(zahlart,-1), zahlziel, 
 			coalesce(waehrung,1), coalesce(rabatt,0), bezahlt,
			coalesce(entsorgung,false),
			coalesce(kurs,1),
			coalesce(einzug_refnr,0)::int,
			coalesce(fibu_buchid,0)::int			
		into :KDNR, :DATUM, :RNGART, :ZAHLART, :ZAHLZIEL:IZAHLZIEL,
		   :WAEHRUNG, :RABATT, :BEZAHLT, :ENTSORGUNG,
		   :KURS, :EINZUG_REFNR, :FIBUBUCHID
 	from rechnung r where r.rngid = :RNGID ;
 #else
 exec sql select r.kundennr, date(r.datum), r.rngart, 
         coalesce(zahlart,-1), zahlziel, 
 			coalesce(waehrung,1), coalesce(rabatt,0), bezahlt
		into :KDNR, :DATUM, :RNGART, :ZAHLART, :ZAHLZIEL:IZAHLZIEL,
		   :WAEHRUNG, :RABATT, :BEZAHLT
 	from rechnung r where r.rngid = :RNGID ;
 #endif
 SQLerror::test(__FILELINE__);

 kunde=cH_Kunde(KDNR);
 rngart = (RngArt)RNGART[0];
 zahlungsart = cH_Zahlungsart(ZAHLART);
 waehrung=cP_Waehrung(Waehrung::ID(WAEHRUNG));
 kurs=KURS;
 rabatt=RABATT;
 rgdatum=ManuProC::Datum(DATUM);
 bezahlt=BEZAHLT;
 zahlziel= IZAHLZIEL ? ManuProC::Datum() : ManuProC::Datum(ZAHLZIEL);
 entsorgung=ENTSORGUNG;
 einzug_refnr=EINZUG_REFNR;
 fibu_buchid=FIBUBUCHID;
}

Rechnung::Rechnung(const cH_Kunde k,int jahr) throw(SQLerror)
	: RechnungBase(none_id), kunde(k),rabatt(0),
   zahlungsart(Zahlungsart::none_id),notiz_valid(false)
{
 int RNGID;
 int KUNDENNR;
 int JAHR=jahr;
 int ZAHLUNGSART;
 int WAEHRUNG;
 
 if (!JAHR) JAHR=AuftragBase::aktuellesJahr();
 JAHR%=100;

 KUNDENNR=k->Id();

 cH_Kunde krng(k->Rngan());

 if(KUNDENNR != krng->Id())
   {
    ZAHLUNGSART=krng->zahlungsart()->Id();
    WAEHRUNG=krng->getWaehrung()->Id();
   }
 else
   {
    ZAHLUNGSART=k->zahlungsart()->Id();
    WAEHRUNG=k->getWaehrung()->Id();
   }

 Transaction tr;
  
 Query("lock table lieferschein in exclusive mode");
 
 Query("select max(rngid)+1 from rechnung where rngid between ? and ?")
      << (JAHR*10000) << ((JAHR+1)*10000-1)
      >> Query::Row::MapNull(RNGID,JAHR*10000);
 
 Query("insert into rechnung (rngid, kundennr,zahlart,waehrung) "
 	"values (?,?,?,?)") 
      << RNGID << KUNDENNR << ZAHLUNGSART << WAEHRUNG;

#ifdef MABELLA_EXTENSIONS
 bool ENTSORGUNG=krng->entsorgung();
// int VERKNR=k->VerkNr();
// int IVERKNR=0;

 Query("select 1/(coalesce(fkt,1)) from waehrung where wid=?")
   << WAEHRUNG >> kurs;

// if(VERKNR==Kunde::none_id) IVERKNR=-1;
 (Query("update rechnung set entsorgung=?, "
/*	verknr=:VERKNR:IVERKNR,*/
	"kurs=? where rngid=?") 
	<< ENTSORGUNG << kurs << RNGID).Check100();

 (Query("update rechnung set notiz=(select rng_notiz from kunden "
        "where kundennr=?) where rngid=?") 
        << KUNDENNR << RNGID).Check100();
 
 std::string tmp_notiz;
 if(k->Id()!=k->Rngan()) // Notiz der Rechnungsadresse besorgen
   {Query("select coalesce(rng_notiz,'') from kunden where"
          " kundennr=?") << k->Rngan() >> tmp_notiz;
    Query("update rechnung set notiz=notiz||? "
          "where rngid=?") << tmp_notiz << RNGID;
    }
#endif

 rngid=RNGID;
 rgdatum=ManuProC::Datum::today();

 tr.commit();
}

