// $Id: ArtikelStamm.pgcc,v 1.21 2002/06/27 07:26:10 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Artikel/ArtikelStamm.h>
//#include <Artikel/ArtikelBaum.h>
#include <Artikel/ArtikelBezeichnung.h>
exec sql include sqlca;
//#include <Aux/itos.h>
#include <Instanzen/ppsInstanz.h>

ArtikelStamm::cache_t ArtikelStamm::cache;

ArtikelStamm::ArtikelStamm(const ArtikelBase &ab)  throw (SQLerror)
	: art(ab)
{
//std::cout << "ArtikelStamm(Id):" << ab.Id() << "\n";
   payload_t *cached(cache.lookup(ab.Id()));
   if (cached) 
   {  payload=*cached;
      return;
   }
   int itmp=ppsInstanzID::None;
   exec sql begin declare section;
    int id,typ,inttyp;
    int best_bei,defschem;
    int best_bei_default=itmp;
    int einheit, ieinheit;
   exec sql end declare section;
   id=ab.Id();

//std::cout << "ArtikelStamm "<<itos(id)<<'\n';      
   exec sql select warengruppe,coalesce(internwarengruppe,warengruppe)
      ,coalesce(bestellen_bei,:best_bei_default),coalesce(defaultschema,1),
      einheit
   	into :typ, :inttyp, :best_bei, :defschem, :einheit :ieinheit
   	from artikelstamm where id= :id;
   SQLerror::test(__FILELINE__);
   
   payload.typ=(ArtikelTyp::ID)typ;
   payload.interntyp=(ArtikelTyp::ID)inttyp;
   payload.bestellen_bei=cH_ppsInstanz(ppsInstanz::ID(best_bei));
   payload.defaultschema=defschem;
   if (!ieinheit) payload.einh=Einheit::ID(einheit);
   else
   {  payload.einh=EinheitID::St_;

#if defined(PETIG_EXTENSIONS) && defined(MANUPROC_DYNAMICENUMS_CREATED)
      switch(payload.interntyp)
      {  case ArtikelTypID::Jumborollen:
            payload.einh=EinheitID::m; break;
         
         case ArtikelTypID::Band:
            {  cache.Register(ab.Id(),payload); 
               // since ArtikelBaum tries to read bestellen_bei
               // we would loop forever if not registered here
               cH_ArtikelBezeichnung AB(ab);
               // this is because Prozess_sql.pgcc is mad (Jumbo = 1m)
               if (!AB->Jumbo()) payload.einh=EinheitID::St_;
               else payload.einh=EinheitID::m;
               break;
            }

         case ArtikelTypID::Garn:
            payload.einh=EinheitID::kg; break;
         
         case ArtikelTypID::Lohn:
            payload.einh=EinheitID::Fd_km; break;
            
         default: ; // Stueck
      }
#endif      

   }
   cache.Register(ab.Id(),payload);
}

void ArtikelStamm::set_BestellenBei(const ArtikelBase &artikel,const ppsInstanz::ID instanz)
{
  exec sql begin declare section;
   int ID=artikel.Id();
   int BESTELLEN_BEI=instanz;
  exec sql end declare section;
  exec sql update artikelstamm set stand=now(),bestellen_bei=:BESTELLEN_BEI
      where id =:ID 
      and (bestellen_bei!=:BESTELLEN_BEI or bestellen_bei is null);
  SQLerror::test(__FILELINE__,100);

  // Und nun noch raus aus dem Cache
  cache.deregister(artikel.Id());
}

void ArtikelStamm::setEinheit(const ArtikelBase &artikel,const Einheit e)
{
  exec sql begin declare section;
   int ID=artikel.Id();
   int EINHEIT=e.Id();
  exec sql end declare section;
  exec sql update artikelstamm set stand=now(),einheit=:EINHEIT
      where id =:ID and (einheit!=:EINHEIT or einheit is null);
  SQLerror::test(__FILELINE__,100);

  // Und nun noch raus aus dem Cache
  cache.deregister(artikel.Id());
}
