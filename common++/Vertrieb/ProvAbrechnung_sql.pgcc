/* $Id: ProvAbrechnung_sql.pgcc,v 1.10 2006/06/26 07:53:03 christof Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Vertrieb/ProvAbrechnung.h>


ProvAbrechnung::ProvAbrechnung(const Kunde::ID verkid, 	const ID abrnr) 
throw(SQLerror)
: ManuProcEntity<>(abrnr), verkaeufer(Kunde::none_id), entries_valid(false)
{
 exec sql begin declare section;
 int PROVNR=abrnr;
 int VERKNR=verkid;
 char *DATUM=0;
 char *BIS=0;
 char *VOM=0;
 char *NOTIZ=0;
 int UEBERWID;
 int NONEID;
 exec sql end declare section;

 NONEID=Ueberweisung::none_id;
 

 exec sql select datum,bis,vom,notiz,coalesce(ueberwid,:NONEID) into
 	:DATUM,:BIS,:VOM,:NOTIZ,:UEBERWID from prov_abrechnung
 	where (verknr,provnr) = (:VERKNR,:PROVNR);
 SQLerror::test(__FILELINE__);
 
 verkaeufer=VERKNR;
 datum=ManuProC::Datum(DATUM);
 bis=ManuProC::Datum(BIS);
 vom=ManuProC::Datum(VOM);
 notiz=NOTIZ;

 if(UEBERWID!=NONEID)
   {Ueberweisung u(UEBERWID);
    if(u.Erfolgtam() == ManuProC::Datum(1,1,1970,false))
      setUeberweisung(Ueberweisung());
    else
      ueberweisung=u;
   }

 ECPGfree_auto_mem();
}


ProvAbrechnung* ProvAbrechnung::newProvAbrechnung(const Kunde::ID verkid,
 		ProvAbrechnung::ID abrnr, ManuProC::Datum _bis,
		ManuProC::Datum _vom,
 		const std::string _notiz) throw(SQLerror)
{
 exec sql begin declare section;
 int PROVNR=abrnr;
 int VERKNR=verkid;
 char *BIS;
 char *VOM;
 char *NOTIZ;
 exec sql end declare section;

 if(!_bis.valid()) _bis=ManuProC::Datum::today();

 std::string strvom(_vom.to_iso());
 VOM=(char*)strvom.c_str();
 std::string strbis(_bis.to_iso());
 BIS=(char*)strbis.c_str();

 NOTIZ=(char*)_notiz.c_str();


 exec sql insert into prov_abrechnung
	(provnr,verknr,datum,bis,vom,notiz) values 
	(:PROVNR,:VERKNR,date(now()),:BIS,:VOM,:NOTIZ);
 SQLerror::test(__FILELINE__);
 
 return new ProvAbrechnung(verkid,abrnr);
}


Query::Row &operator>>(Query::Row &is, ProvAbrechnung::FetchStruct &st)
{
 return is >> st.rngid >> st.zeilennr >> st.provsatz >> st.rngrabatt;
}


void ProvAbrechnung::loadEntries(std::string sql_order) throw(SQLerror)
{
 if(entries_valid) return;
 
 std::vector<FetchStruct> st;

 cH_Kunde vk(verkaeufer);
 Kunde::ID obervk=vk->Rngan();
 std::string txt=
        "select p.rngid,p.zeilennr,coalesce(e.provsatz,0), "
	" coalesce(r.rabatt,0) from prov_entry p"
	" join rechnung r using (rngid) "
	" join rechnungentry e on (e.rngid=r.rngid and e.zeilennr=p.zeilennr";
 if(obervk==verkaeufer)
    txt+=" and p.provnr=? and p.verknr in "
        " (select kundennr from kunden where rechnung_an=? ))";
 else       
    txt+=" and (p.provnr,p.verknr)=(?,?)) "; 
        
 txt+=sql_order;

 Query Q(txt);

 if(obervk==verkaeufer)
   Q << itos(Id()) << itos(obervk);
 else
   Q << itos(Id()) << itos(verkaeufer);

 SQLerror::test(__FILELINE__,100);

 if(!Q.good()) return;  // sqlcode=100
 Q.FetchArray(st); 

 for(std::vector<FetchStruct>::const_iterator i=st.begin(); i!=st.end(); ++i)
   {
    entries.push_back(new ProvAbrechnungEntry(Id(),verkaeufer,(*i).rngid,
    			(*i).zeilennr,(*i).provsatz,(*i).rngrabatt));
   }
 entries_valid=true;
 
}


void ProvAbrechnung::setUeberweisung(const Ueberweisung &u) throw(SQLerror)
{
 ueberweisung=u;

 Query q("update prov_abrechnung set ueberwid=? where (provnr,verknr)=(?,?)"); 

 q << Query::NullIf(ueberweisung.Id(),Ueberweisung::none_id) 
	<< Id() << VerkNr();
 SQLerror::test(__FILELINE__);

}


