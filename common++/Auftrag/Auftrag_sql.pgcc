/*  pps: ManuProC's production planning system
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Auftrag/AuftragFull.h>
#include <string.h>
#include <strstream>
#include <Misc/SQLerror.h>
#include <Misc/Transaction.h>
exec sql include sqlca;
#include <Auftrag/selFullAufEntry.h>
#include <Misc/string0.h>
#include <Kunde/Zahlungsart.h>
#include<Misc/Changejournal.h>
#include <Artikel/ArtikelStamm.h>
#include <Misc/TraceNV.h>
#include <Misc/FetchIStream.h>
#include <sys/types.h>

void Auftrag::deleteAuftrag() throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);

 Transaction tr;

 Query("lock table auftragentry in row exclusive mode");
 Query("lock table auftrag in row exclusive mode");
 Query("delete from auftragentry where (instanz,auftragid)=(?,?)") 
 	<<  Instanz() << Id();
 Query("delete from auftrag where (instanz,auftragid)=(?,?)") 
 	<<  Instanz() << Id();
 SQLerror::test(__FILELINE__"Löschen des Auftrags");

 tr.commit();
}



void Auftrag::setWaehrung(cP_Waehrung w) throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);

 Query("update auftrag set waehrung=? where (instanz,auftragid)=(?,?)")
	<< w->Id()
	<< Instanz() << Id();
 SQLerror::test(__FILELINE__"Waehrung setzen");
}

void Auftrag::Zahlziel(const ManuProC::Datum &zziel) throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this,zziel);
  
 Query("update auftrag set zahlungsziel=? where (instanz,auftragid)=(?,?)")
	<< zziel
	<< Instanz() << Id();
 SQLerror::test(__FILELINE__"Zahlungsziel setzen");
}

void Auftrag::Zahlart(cH_Zahlungsart zart) throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);

 if(zart->Id()==Zahlungsart::none_id)
 {  cH_Kunde k(kundennr);
    cH_Kunde krng(k->Rngan());
    zart = krng->zahlungsart();
 }
  
 Query("update auftrag set zahlart=? where (instanz,auftragid)=(?,?)")
	<< zart->Id()
	<< Instanz() << Id();
 SQLerror::test(__FILELINE__"Zahlungsart setzen");
}



void Auftrag::deleteEintrag(int zeilennr) throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this,NV("ZNr",zeilennr));

 Transaction tr;
 
 Query("lock table auftragentry in share row exclusive mode");
 Query("delete from auftragentry where (instanz,auftragid,zeilennr)=(?,?,?)")
	<< Instanz() << Id() << zeilennr;
 SQLerror::test(__FILELINE__"Auftragszeile löschen");

 Query("update auftragentry set zeilennr=zeilennr-1 "
 	"where zeilennr>? and (instanz,auftragid)=(?,?)")
	<< zeilennr
	<< Instanz() << Id();
 SQLerror::test(__FILELINE__"Auftragszeilennr aktualisieren");
 
 tr.commit();
}

Auftrag::Auftrag(const AuftragBase& _auftrag) throw(SQLerror)
: AuftragBase(_auftrag), zahlart(Zahlungsart::none_id), labelid(0)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);
 exec sql begin declare section;
 int AUFTRAGID = Id();
 int INSTANZ =int(Instanz());
 int KUNDENNR;
 char DATUM[11];
 char ZAHLZIEL[11];
 int STATUS;
 char YOURAUFNR[21];
 char *BEMERKUNG=0;
 int WAEHRUNG;
 float RABATT;
 int IZAHLZIEL;
 int ZAHLART;
 int NONE_ID;
 char *NOTIZ=0;
 int INVALID_ENTITY;
 int DEFAULT_WID;
 int VERKNR,IVERKNR;
 exec sql end declare section;
 INVALID_ENTITY=ManuProcEntity<>::none_id;

 NONE_ID=Zahlungsart::none_id;
 DEFAULT_WID=Waehrung::default_id;

//if(Instanz()==ppsInstanzID::Kundenauftraege)
//ECPGdebug(true,stdout);
 exec sql select coalesce(kundennr,:INVALID_ENTITY), date(coalesce(datum,now())), 
 		stat, coalesce(youraufnr,''), coalesce(bemerkung,''),
		 coalesce(waehrung,:DEFAULT_WID),coalesce(rabatt,0),
		zahlungsziel, coalesce(zahlart,:NONE_ID),
		coalesce(notiz,''),verknr
	into 	:KUNDENNR, :DATUM, :STATUS, :YOURAUFNR, :BEMERKUNG,
		 :WAEHRUNG,:RABATT,:ZAHLZIEL:IZAHLZIEL, :ZAHLART,
		:NOTIZ,:VERKNR:IVERKNR
	from auftrag where (auftragid,instanz) = (:AUFTRAGID,:INSTANZ) ;
 SQLerror::test(__FILELINE__"Auftrag laden");


 ExtraColumns ec("auftrag","instanz","auftragid");
 ec << INSTANZ << AUFTRAGID;
 labelid = ec.get<int>("label");

 kundennr = KUNDENNR;
 datum.from_postgres(DATUM);
// wrkstatus = LOADED;
 status = (AufStatVal)STATUS;
 youraufnr = YOURAUFNR;
 bemerkung = BEMERKUNG;
 waehrung = cP_Waehrung(Waehrung::ID(WAEHRUNG));
 auftragsrabatt = RABATT;
 zahlziel = (IZAHLZIEL==0) ? ManuProC::Datum(ZAHLZIEL):ManuProC::Datum();
 zahlart = cH_Zahlungsart(ZAHLART);
 notiz=NOTIZ;
 notiz_valid=true;
 verknr = IVERKNR == 0 ? VERKNR : Kunde::none_id;
 ECPGfree_auto_mem();
 youraufnr_cache[*this]=youraufnr;
}


Auftrag::Auftrag(Anlegen _instanz, long kdnr, const std::string &yaufnr) throw(SQLerror)
	: AuftragBase(cH_ppsInstanz(_instanz),invalid_id),
	  zahlart(Zahlungsart::none_id)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,
 	NV("Anlegen.instanz",_instanz.instanz),NV("kdnr",kdnr),
 	NV("yaufnr",yaufnr));
 exec sql begin declare section;
 int AUFTRAGID;
 char DATUM[11];
 int YEAR;
 int KUNDENNR=kdnr;
 int STATUS=UNCOMMITED;
 int INSTANZ=Instanz();
 int WAEHRUNG;
 int VERKNR;
 int IVERKNR=0;
 char *YOURAUFNR=(char*)yaufnr.c_str();
 exec sql end declare section;

 exec sql select waehrungid,coalesce(verknr,-1) 
	into :WAEHRUNG,:VERKNR from kunden where kundennr= :KUNDENNR;
 SQLerror::test(__FILELINE__"select waehrung from kunden");

 Transaction tr;

 exec sql lock table auftrag in exclusive mode;
 SQLerror::test(__FILELINE__"lock table auftrag");

 YEAR=AuftragBase::aktuellesJahr()%100;
 
 exec sql select coalesce(max(auftragid)+1,:YEAR*10000) 
 		into :AUFTRAGID from auftrag 
 		where auftragid between (:YEAR*10000) and (:YEAR+1)*10000-1
 		and instanz=:INSTANZ;
 SQLerror::test("Auftrag: select neue auftragid");
 if (AUFTRAGID<handplan_auftrag_id) AUFTRAGID=handplan_auftrag_id;

 exec sql insert into auftrag (auftragid, kundennr, 
				stat, waehrung, instanz)
 	values (:AUFTRAGID, :KUNDENNR, :STATUS, :WAEHRUNG,:INSTANZ);
 SQLerror::test(__FILELINE__" insert into auftrag");
  
#ifdef MABELLA_EXTENSIONS
 if(!yaufnr.empty())
   {exec sql update auftrag set youraufnr=nullif(:YOURAUFNR,'') where
	(auftragid,instanz)=(:AUFTRAGID,:INSTANZ);
    SQLerror::test(__FILELINE__":Auftrag: update youraufnr");	
   }

 if(VERKNR==-1) IVERKNR=-1;
 exec sql update auftrag set verknr=:VERKNR:IVERKNR where
	(auftragid,instanz)=(:AUFTRAGID,:INSTANZ);
 SQLerror::test(__FILELINE__":Auftrag: update auftrag");	

 exec sql update auftrag set notiz=(select auf_notiz from kunden
	where kundennr=:KUNDENNR) where auftragid=:AUFTRAGID;
 SQLerror::test(__FILELINE__":Auftrag: update notiz");	
#endif

 ExtraColumns ec("auftrag","instanz","auftragid");
 ec << INSTANZ << AUFTRAGID;

 if(ec.hasColumn("uid"))
   Query("update auftrag set uid=? where (instanz,auftragid)=(?,?)")
     << getuid() << INSTANZ << AUFTRAGID;
     
 exec sql select date(datum) into :DATUM from auftrag 
   where auftragid= :AUFTRAGID and instanz = :INSTANZ;
 SQLerror::test("Aufrtag: select datum");

 kundennr = kdnr;
 datum.from_postgres(DATUM);
// wrkstatus= INSERTED;
 status=(AufStatVal)STATUS;
 auftragid= AUFTRAGID;
 assert(valid()); 
 waehrung=cP_Waehrung((Waehrung::ID)WAEHRUNG);
 tr.commit();
 youraufnr_cache[*this]=yaufnr;
}

Auftrag::Auftrag(Anlegen2 AB, long kdnr, const std::string &yaufnr) throw(SQLerror)
	: AuftragBase(AB), zahlart(Zahlungsart::none_id)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,NV("Anlegen:",*this),NV("KnNr",kdnr));
 exec sql begin declare section;
 int AUFTRAGID=Id();
 char DATUM[11];
 int KUNDENNR=kdnr;
 int STATUS = OPEN;
 int INSTANZ =Instanz();
 int WAEHRUNG;
 int VERKNR;
 int IVERKNR=0;
 char *YOURAUFNR=(char*)yaufnr.c_str();
 exec sql end declare section;

 exec sql select waehrungid,coalesce(verknr,-1) 
	into :WAEHRUNG,:VERKNR from kunden where kundennr= :KUNDENNR;
 SQLerror::test(__FILELINE__"select waehrung from kunden");

 Transaction tr;
 
 exec sql insert into auftrag (auftragid, kundennr,  
				stat, waehrung, instanz)
 	values (:AUFTRAGID, :KUNDENNR, :STATUS, :WAEHRUNG,:INSTANZ);
 SQLerror::test(__FILELINE__" insert auftrag with auftragid 0");
  
#ifdef MABELLA_EXTENSIONS
 if(!yaufnr.empty())
   {exec sql update auftrag set youraufnr=nullif(:YOURAUFNR,'') where
	(auftragid,instanz)=(:AUFTRAGID,:INSTANZ);
    SQLerror::test(__FILELINE__":Auftrag: update youraufnr");	
   }

 if(VERKNR==-1) IVERKNR=-1;
 exec sql update auftrag set verknr=:VERKNR:IVERKNR where
	(auftragid,instanz)=(:AUFTRAGID,:INSTANZ);
 SQLerror::test(__FILELINE__":Auftrag: update auftrag");	

 exec sql update auftrag set notiz=(select auf_notiz from kunden
	where kundennr=:KUNDENNR) where auftragid=:AUFTRAGID;
 SQLerror::test(__FILELINE__":Auftrag: update notiz");	
#endif

 ExtraColumns ec("auftrag","instanz","auftragid");
 ec << INSTANZ << AUFTRAGID;

 if(ec.hasColumn("uid"))
   Query("update auftrag set uid=? where (instanz,auftragid)=(?,?)")
     << getuid() << INSTANZ << AUFTRAGID;

 exec sql select date(datum) into :DATUM from auftrag 
   where auftragid= :AUFTRAGID and instanz = :INSTANZ;
 SQLerror::test("Aufrtag: select datum");

 kundennr = kdnr;
 datum.from_postgres(DATUM);
// wrkstatus= INSERTED;
 status=(AufStatVal)STATUS;
 youraufnr_cache[*this]=yaufnr;
 tr.commit();
}


void Auftrag::setBemerkung(const std::string &bem) throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);
 exec sql begin declare section;
 int AUFTRAGID=Id();
 int INSTANZ=int(Instanz());
 const char *BEMERKUNG=bem.c_str();
 exec sql end declare section;

 exec sql update auftrag set bemerkung= nullif(:BEMERKUNG,'')
	where auftragid= :AUFTRAGID and instanz=:INSTANZ;
 SQLerror::test("setBemerkung: update bemerkung");
}


void Auftrag::setVerknr(const Kunde::ID vid) throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);
 exec sql begin declare section;
 int AUFTRAGID=Id();
 int INSTANZ=int(Instanz());
 int VERKNR=vid;
 int IVERKNR=0;
 exec sql end declare section;

 if(vid==Kunde::none_id)
   IVERKNR=-1;

 exec sql update auftrag set verknr=:VERKNR:IVERKNR
	where auftragid= :AUFTRAGID and instanz=:INSTANZ;
 SQLerror::test("setVerknr: update verknr");
 verknr=vid;
}
