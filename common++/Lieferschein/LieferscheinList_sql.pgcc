/* $Id: LieferscheinList_sql.pgcc,v 1.28 2006/06/26 07:48:56 christof Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include <Lieferschein/LieferscheinList.h>
#include <Misc/Transaction.h>
#include <Misc/compiler_ports.h>

exec sql include sqlca;

LieferscheinList::LieferscheinList()
: instanz(ppsInstanz::default_id),kundenid(ManuProcEntity<>::none_id),
kundengruppe(ManuProcEntity<>::none_id),
artikelid(ArtikelBase::none_id),
arttyp(ArtikelTyp::ID(ManuProcEntity<>::none_id)),
first_komponent(false),hole_entries(false)
{
#ifdef MABELLA_EXTENSIONS
 arttyp=ArtikelTyp::default_ID;
#endif
 vom=ManuProC::Datum(1,1,1970);
 bis=ManuProC::Datum::today();
}

void LieferscheinList::build_list()
{
#ifdef MABELLA_EXTENSIONS
 bool ohne_gts=true;
#else
 bool ohne_gts=false;
#endif

 std::string squery = SQuery(ohne_gts);

 std::string nametable=cH_ExtBezSchema(ExtBezSchema::default_id,ExtBezSchema::default_Typ)->TableName();

 if(ohne_gts) squery+=" and "; // "where" gibt es schon in SQuery
 else squery+=" where ";

 squery += " li.instanz="+itos(instanz->Id());

 if(kundenid!=ManuProcEntity<>::none_id)
   squery+= " and li.kundennr="+itos(kundenid);

 if(kundengruppe!=ManuProcEntity<>::none_id)
   squery+= " and exists(select true from ku_gruppen_map "
   	"where ku_gruppen_map.grpnr="+itos(kundengruppe)+" and "
   	"li.kundennr=ku_gruppen_map.kundennr)";

 if(vom.valid() && bis.valid())
   {squery+= " and coalesce(li.geliefertam,li.datum)"
   	" between '"+vom.to_iso()+"' and '"
   	+ManuProC::TimeStamp(bis,23,59,59).write()+"'";
   }

 if(hole_entries)
   {

 if(artikelid!=ArtikelBase::none_id && !first_komponent)
     squery+=" and le.artikelid="+itos(artikelid);

 if (arttyp!=ManuProcEntity<>::none_id)
     squery+= " and exists (select true from "
	" artikelstamm a where a.id=le.artikelid and "
	" a.warengruppe="+itos(arttyp) + ")";

// sehr Mabella spezifisch (da ab.artikel) statt ExtArtBez
 if(artikelid!=ArtikelBase::none_id && first_komponent)
     {cH_ArtikelBezeichnung ab(make_value(ArtikelBase(artikelid)));
      std::string komp1=ab->Komponente(0);
      squery+=" and exists (select true from "+nametable+" ab "
	" where ab.id=le.artikelid and ab.artikel="+komp1+")";
     }

   }
 else
   {
    squery+= " and exists (select true from lieferscheinentry e"
	" join artikelstamm a on (a.id=e.artikelid";
    if (arttyp!=ManuProcEntity<>::none_id)
	squery+= " and a.warengruppe="+itos(arttyp);

 if(artikelid!=ArtikelBase::none_id && !first_komponent)
     squery+=" and a.id="+itos(artikelid);
 squery+=")"; // on endet hier

 if(artikelid!=ArtikelBase::none_id && first_komponent)
     {cH_ArtikelBezeichnung ab(make_value(ArtikelBase(artikelid)));
      std::string komp1=ab->Komponente(0);
      squery+=" join "+nametable+" ab on (ab.id=e.artikelid and ab.artikel="+komp1+")";
     }

   squery+=" where e.instanz=lieferschein.instanz and "
	" e.lfrsid=lieferschein.lfrsid)";
  }
 
 fuelle(squery);
}

LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz) throw(SQLerror)
: instanz(_instanz),first_komponent(false),hole_entries(false)
{
 std::string squery = SQuery();
 fuelle(squery);
}

LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz,const sel_KundenId &selparam) throw(SQLerror)
: instanz(_instanz),first_komponent(false),hole_entries(false)
{
 std::string squery = SQuery();
 squery += " where (instanz,kundennr) = ("
   +itos(instanz->Id())+","+itos(selparam.id)+")";
 fuelle(squery);
}
LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz,const sel_ArtikelId &selparam) throw(SQLerror)
: instanz(_instanz),first_komponent(false),hole_entries(false)
{
 std::string squery = SQuery();
 squery += " where exists (select true from lieferscheinentry ly where "
     "ly.lfrsid =  lieferschein.lfrsid and "
     "ly.instanz =  lieferschein.instanz "
     "and ly.instanz ="+itos(instanz->Id())+
     " and artikelid ="+itos(selparam.id)+")";
 fuelle(squery);
}

std::string LieferscheinList::SQuery(bool no_gts) 
{
 std::string squery;

 if(hole_entries)
   squery = "select lfrsid,zeile,li.kundennr,li.datum,li.rngid,"
        " pakete,paeckchen, "
        " coalesce(geliefertam,li.datum), "
        " dpdliefnr from lieferschein li join "
        " lieferscheinentry le using (lfrsid,instanz) ";

 else
   squery = "select lfrsid,0,li.kundennr,li.datum,li.rngid, "
        " pakete,paeckchen, "
        " coalesce(geliefertam,li.datum), "
        " dpdliefnr from lieferschein li";

 if(no_gts)
     squery+=" where not exists (select true from rechnung r"
		" where r.rngid=li.rngid and r.rngart='G') ";
 return squery;
}

void LieferscheinList::fuelle(const std::string &squery, ArgumentList const& args) 
                                                    throw(SQLerror)
{
 Transaction tr;

 // wann Ã¤ndert sich der Lieferschein beim holen
 int akt_lfrsid=ManuProcEntity<>::none_id;

 Query q("llist",squery);
 q << args;
 Query::Row r;

 while((q >> r).good())
 { int LFRSID;
     int KDNR;
     int RNGID;
     ManuProC::Datum DATUM;
     int PAECKCHEN, PAKETE;
     ManuProC::Datum GELIEFERTAM;
     int DPDLIEFNR;
     int ZEILE;
    r >> LFRSID >> ZEILE >> KDNR >> DATUM >> Query::Row::MapNull(RNGID,-1)
      >> Query::Row::MapNull(PAKETE) >> Query::Row::MapNull(PAECKCHEN)
      >> GELIEFERTAM >> Query::Row::MapNull(DPDLIEFNR);
    if(LFRSID!=akt_lfrsid)
    { sellist.push_back(new Lieferschein(
    			LieferscheinBase(instanz,LFRSID),DATUM,
        		KDNR,RNGID,PAECKCHEN,PAKETE,
    			GELIEFERTAM,DPDLIEFNR));
      akt_lfrsid=LFRSID;
    }
    liefzeilen[LFRSID].push_back(
		LieferscheinEntryBase(LieferscheinBase(instanz,LFRSID),ZEILE));
   } 
  tr.close();
}


#ifdef DPD_LIEFERSCHEINE

LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz,const sel_DPDLNr &sp) throw(SQLerror)
: instanz(_instanz),first_komponent(false),hole_entries(false)
{
 std::string squery = SQuery();
 squery += " where dpdliefnr = "+itos(sp.dpdlnr)+" and instanz ="+itos(instanz->Id());
 fuelle(squery);
}

LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz,const sel_GeliefStat &sp) throw(SQLerror)
: instanz(_instanz),first_komponent(false),hole_entries(false)
{
 std::string squery = SQuery();
 if(sp.geliefert)
	 squery += " where dpdliefnr is not null";
 else
	 squery += " where dpdliefnr is null and geliefertam is null";
 squery += " and instanz = "+itos(instanz->Id());

 squery+=" order by lfrsid";

 fuelle(squery);
}


// caller needs to roll back if transaction is already open and false is given
// back
bool LieferscheinList::setDPDData(int dpdlnr) throw(SQLerror)
{
 Transaction tr;
 exec sql lock lieferschein in share row exclusive mode;
 SQLerror::test(__FILELINE__"lock");

 try{
   for(std::vector<cH_Lieferschein>::iterator i = sellist.begin();
	i!=sellist.end(); ++i)
       {(*i)->setDPDlnr(dpdlnr);
        (*i)->setDPDDatum();
       }
    }         

 catch(SQLerror &e)
   {tr.rollback();
    return false;
   }
 
 tr.commit();
 return true;
}


#endif
