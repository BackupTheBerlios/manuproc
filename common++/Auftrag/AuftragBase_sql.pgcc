/*  pps: ManuProC's production planning system
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Auftrag/Auftrag.h>
#include<stdio.h>
#include <Misc/Transaction.h>
#include<Misc/Changejournal.h>
#include <Auftrag/auftrag_status.h>
#include "AufEintrag.h"
#include <Artikel/ArtikelStamm.h>
#include <Auftrag/AufEintragZu.h>
#include <Misc/Trace.h>
#include <Auftrag/VerfuegbareMenge.h>

exec sql include sqlca;


AuftragBase::AuftragBase(cH_ppsInstanz _instanz, ID aufid,Kunde::ID kid) throw(SQLerror)
: instanz(_instanz),auftragid(aufid)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);
 exec sql begin declare section;
   int KID=kid;
   int AID=auftragid;
   int INST=instanz->Id();
   int ID;
 exec sql end declare section;
 exec sql select auftragid into :ID from auftrag where instanz=:INST and
      kundennr=:KID and youraufnr=:AID;
 SQLerror::test(__FILELINE__);	
 *this=AuftragBase(instanz,ID);
}

bool AuftragBase::Exists() const throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);
 exec sql begin declare section;
  int AUFTRAGID=Id();
  int INSTANZ=InstanzID();
  bool DUMMY;
 exec sql end declare section;
 exec sql select true into :DUMMY from auftrag where 
	(instanz,auftragid)= (:INSTANZ,:AUFTRAGID);
 SQLerror::test(__FILELINE__,100);
 if(sqlca.sqlcode) return false;
 return true;
}

void AuftragBase::create_if_not_exists(AufStatVal status,Kunde::ID kunde) const
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this,"Status=",status,"Kunde=",kunde);
  if(Exists()) return;
  exec sql begin declare section;
   int AUFTRAGID=Id();
   int INSTANZ=InstanzID();
   int KUNDE=kunde;
   int STATUS=status;
  exec sql end declare section;
  exec sql insert into auftrag (instanz,auftragid,kundennr,stat) 
      values (:INSTANZ,:AUFTRAGID,:KUNDE,:STATUS);
 SQLerror::test(__FILELINE__);
}


void AuftragBase::setStatusAuftragBase(AufStatVal st) const throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this,"Status=",st);
 exec sql begin declare section;
  int AUFTRAGID=Id();
  int INSTANZ=InstanzID();
  int STATUS=st;
 exec sql end declare section;

 exec sql update auftrag set stat= :STATUS
       where (instanz,auftragid)= (:INSTANZ,:AUFTRAGID);
 SQLerror::test(__FILELINE__"Status setzen");
}


void AuftragBase::setRabatt(const rabatt_t auftragsrabatt) const throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this);
 exec sql begin declare section;
  int AUFTRAGID=Id();
  int INSTANZ=InstanzID();
  double RABATT=auftragsrabatt.as_float();
 exec sql end declare section;

 exec sql update auftrag set rabatt= :RABATT
       where (instanz,auftragid)= (:INSTANZ,:AUFTRAGID);
 SQLerror::test(__FILELINE__"Rabatt setzen");
}

// braucht irgendjemand newznr?, sonst könnte ein join wegfallen!!!

bool AuftragBase::existEntry(const ArtikelBase& artikel,
                             const ManuProC::Datum& lieferdatum,
                             int& znr,int &newznr,mengen_t& menge,
                             AufStatVal status) const throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this,
         "Artikel=",artikel,
         "LieferDatum=",lieferdatum,"ZNr=",znr,"Status=",status);
 exec sql begin declare section;
   int AUFTRAGID =Id();
   long ARTIKELID=artikel.Id();
   int INSTANZ =InstanzID();
   int ZEILENNR,NEUZNR=-99;
   double MENGE;
   char LIEFERDATUM[21];
   int STATUS=status;
 exec sql end declare section;
 lieferdatum.write_postgres(LIEFERDATUM,sizeof LIEFERDATUM);
//ECPGdebug(true,stdout);

 exec sql select zeilennr,neuzeilennr,bestellt into :ZEILENNR, :NEUZNR,:MENGE
   from auftragentry join auftragsentryzuordnung on
   (altauftragid,altinstanz,altzeilennr)=(auftragid,instanz,zeilennr)
	where (instanz,auftragid)= (:INSTANZ,:AUFTRAGID) and
      lieferdate=:LIEFERDATUM and artikelid=:ARTIKELID 
      and status=:STATUS limit 1;
 SQLerror::test(__FILELINE__,100);
 //2.Versuch ohne 'join'
 if (sqlca.sqlcode==100) ;
  { 
    exec sql select zeilennr,bestellt into :ZEILENNR, :MENGE
      from auftragentry 
   	where (instanz,auftragid)= (:INSTANZ,:AUFTRAGID) and 
      lieferdate=:LIEFERDATUM and artikelid=:ARTIKELID 
      and status=:STATUS limit 1;
    SQLerror::test(__FILELINE__,100);
   }
//ECPGdebug(false,0);

 if (sqlca.sqlcode==100) return false;
 else  {
    znr=ZEILENNR;
    newznr=NEUZNR;
    menge=MENGE;
    return true;  }
}

// wird von ArtikelInternNachbestellen, dispo_auftrag_aendern verwendet
int AuftragBase::BestellmengeAendern(mengen_t deltamenge, 
  const ManuProC::Datum lieferdatum,const ArtikelBase& artikel,
  AufStatVal status,int uid,const AufEintragBase& altAEB,
  st_BestellmengeAendern st_bool) const throw(SQLerror)
{
 ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,*this,"Artikel=",artikel,
         "Menge=",deltamenge,"AltAEB=",altAEB,
         "LieferDatum=",lieferdatum,
         "Status=",status);
 assert(status==OPEN || Id()==ppsInstanzID::Kundenauftraege);
 create_if_not_exists(status);
 int znr=ManuProcEntity<>::none_id,neuznr=ManuProcEntity<>::none_id;

 Transaction tr;
 exec sql lock table auftragentry in exclusive mode;
 SQLerror::test(__FILELINE__);  
 
 // neuer Code bis #if0

 mengen_t dummy=0;
 if(!existEntry(artikel,lieferdatum,znr,neuznr,dummy,status))
  {
    Auftrag A(*this);
    // warum nicht direkt mit Menge?
    AufEintragBase newaeb=A.push_back(0,lieferdatum,artikel,status,uid,false)  ;
    znr=newaeb.ZNr();
   }

 bool kein_dispo= Id()!=dispo_auftrag_id;
 AufEintragBase NeuAEB(*this,znr);

 // ist die Reihenfolge hier wichtig?
     // ändert Neu den Eintrag? 
 // dispo=> andere Richtung des Pfeils muss geändert werden 
 if (kein_dispo && altAEB.valid())
      AufEintragZu(altAEB).Neu(NeuAEB,deltamenge);

 // rekursion nur falls kein DispoAuftrag 
 AufEintrag(NeuAEB).MengeAendern(uid,deltamenge,kein_dispo,altAEB,ManuProC::Auftrag::r_Anlegen);

 if (!kein_dispo && altAEB.valid())
      AufEintragZu(NeuAEB).Neu(altAEB,deltamenge);

  tr.commit();
  return znr;
}


