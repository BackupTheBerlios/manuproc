// generated 2004/3/15 10:59:59 CET by jacek@jaceksdell.(none)
// using glademm V2.0.0b
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/jacek/cvs/mingw32/ManuProC_Agent/mpc_agent.glade
// for gtk 2.2.4 and gtkmm 2.2.8
//
// Please modify the corresponding derived classes in ./src/mpc_agent.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include "mpc_agent_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/button.h>
#include <gtkmm/image.h>
#include <gtkmm/stockid.h>
#include <gtkmm/toolbar.h>
#include <gtkmm/label.h>
#include <gtkmm/frame.h>
#include <gtkmm/spinbutton.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/box.h>

mpc_agent_glade::mpc_agent_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  
   
   Gtk::Window *mpc_agent = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::Toolbar *toolbar1 = Gtk::manage(new class Gtk::Toolbar());
   kunde = new class EingabeBox(2);
   
   Gtk::Label *label3 = Gtk::manage(new class Gtk::Label("Kunde"));
   Gtk::Frame *frame2 = Gtk::manage(new class Gtk::Frame());
   artikel = new class EingabeBox(3);
   
   Gtk::Label *label4 = Gtk::manage(new class Gtk::Label("Artikel"));
   Gtk::Frame *frame3 = Gtk::manage(new class Gtk::Frame());
   Gtk::Adjustment *spinbutton1_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 100, 1, 10, 10));
   Gtk::SpinButton *spinbutton1 = Gtk::manage(new class Gtk::SpinButton(*spinbutton1_adj, 1, 0));
   Gtk::Label *label2 = Gtk::manage(new class Gtk::Label("Menge"));
   Gtk::Frame *frame1 = Gtk::manage(new class Gtk::Frame());
   Gtk::Toolbar *toolbar2 = Gtk::manage(new class Gtk::Toolbar());
   Gtk::HBox *hbox1 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::VBox *vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("quit", *manage(new Gtk::Image(Gtk::StockID("gtk-quit"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *beenden = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("new", *manage(new Gtk::Image(Gtk::StockID("gtk-new"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *neu = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("send", *manage(new Gtk::Image(Gtk::StockID("gtk-jump-to"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *senden = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar2->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("OK", *manage(new Gtk::Image(Gtk::StockID("gtk-ok"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *artikel_ok = static_cast<Gtk::Button *>(toolbar2->tools().back().get_widget());
   beenden->set_size_request(60,-1);
   toolbar1->set_tooltips(true);
   label3->set_alignment(0.5,0.5);
   label3->set_padding(0,0);
   label3->set_justify(Gtk::JUSTIFY_LEFT);
   label3->set_line_wrap(false);
   label3->set_use_markup(false);
   label3->set_selectable(false);
   frame2->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame2->set_label_align(0,0.5);
   frame2->add(*kunde);
   frame2->set_label_widget(*label3);
   label4->set_alignment(0.5,0.5);
   label4->set_padding(0,0);
   label4->set_justify(Gtk::JUSTIFY_LEFT);
   label4->set_line_wrap(false);
   label4->set_use_markup(false);
   label4->set_selectable(false);
   frame3->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame3->set_label_align(0,0.5);
   frame3->add(*artikel);
   frame3->set_label_widget(*label4);
   spinbutton1->set_flags(Gtk::CAN_FOCUS);
   spinbutton1->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton1->set_numeric(false);
   spinbutton1->set_digits(0);
   spinbutton1->set_wrap(false);
   label2->set_alignment(0.5,0.5);
   label2->set_padding(0,0);
   label2->set_justify(Gtk::JUSTIFY_LEFT);
   label2->set_line_wrap(false);
   label2->set_use_markup(false);
   label2->set_selectable(false);
   frame1->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame1->set_label_align(0,0.5);
   frame1->add(*spinbutton1);
   frame1->set_label_widget(*label2);
   artikel_ok->set_size_request(60,-1);
   toolbar2->set_tooltips(true);
   hbox1->pack_start(*frame3);
   hbox1->pack_start(*frame1, Gtk::PACK_SHRINK, 0);
   hbox1->pack_start(*toolbar2, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*toolbar1, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*frame2, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*hbox1, Gtk::PACK_SHRINK, 0);
   mpc_agent->set_title("MPC Agent");
   mpc_agent->set_default_size(800,600);
   mpc_agent->set_modal(false);
   mpc_agent->property_window_position().set_value(Gtk::WIN_POS_NONE);
   mpc_agent->set_resizable(false);
   mpc_agent->property_destroy_with_parent().set_value(false);
   mpc_agent->add(*vbox1);
   toolbar1->show();
   kunde->show();
   label3->show();
   frame2->show();
   artikel->show();
   label4->show();
   frame3->show();
   spinbutton1->show();
   label2->show();
   frame1->show();
   toolbar2->show();
   hbox1->show();
   vbox1->show();
   mpc_agent->show();
}

mpc_agent_glade::~mpc_agent_glade()
{  delete kunde;
   delete artikel;
   delete gmm_data;
}
