// $Id: auftrag_liefer_sql.pgcc,v 1.8 2005/06/29 20:53:10 jacek Exp $
/*  pps: ManuProC's production planning system
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include"auftrag_lieferschein.hh"

exec sql include sqlca;


void auftrag_lieferschein::on_liefnr_search(int *_continue, 
					GtkSCContext newsearch)
{
 exec sql begin declare section;
 int INSTANZ=instanz->Id();
 int LFSID;
 char LFSIDSTR[10];
 char *PAT;
 int KUNDE;
 exec sql end declare section;
 static Transaction tr("",false);

 switch(newsearch)
 {case GTK_SEARCH_OPEN:
  case GTK_SEARCH_REOPEN:
	{
       std::string pat = liefernr->get_text() + "%";
       if (newsearch==GTK_SEARCH_REOPEN) pat="%";
       PAT = (char*)pat.c_str();
       KUNDE= liefer_kunde->get_value();

       tr.open();

       exec sql declare LFSNR_CURSOR cursor for
                select lfrsid, ltrim(to_char(lfrsid,'000000'))
                from lieferschein where
                ltrim(to_char(lfrsid,'000000')) like :PAT 
                and (:KUNDE<1 or kundennr=:KUNDE)
                and instanz=:INSTANZ
                order by datum desc;
       exec sql open LFSNR_CURSOR;
       SQLerror::test(__FILELINE__":on_lfrsnr_search: open cursor","LFSNR_CURSOR");
	}
 case GTK_SEARCH_FETCH:
{
	exec sql fetch LFSNR_CURSOR into :LFSID, :LFSIDSTR;
        SQLerror::test(__FILELINE__":on_lfrsnr_search: "
                        " fetch cursor LFSNR_CURSOR","LFSNR_CURSOR",100);

        if(sqlca.sqlcode==100){*_continue=false; break; }

        liefernr->add_item(LFSIDSTR,LFSID);
        *_continue=true;
}
         break;
  case GTK_SEARCH_CLOSE :
       {
        exec sql close LFSNR_CURSOR;
        tr.commit();
        break;
       }
 }
}


