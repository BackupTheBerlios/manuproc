/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 2001 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include"RechnungEntry.h"
#include"Rechnung.h"
#include<Misc/Transaction.h>
#include <Auftrag/AufEintrag.h>
#include <Misc/Query.h>

std::map<int,struct RechnungEntryBase::rng_payoff> RechnungEntryBase::rgdata;

RechnungEntry::RechnungEntry(const RechnungEntryBase& rechnung)
throw(SQLerror)	:RechnungEntryBase(rechnung),provsatz(-1)
{
   int LFRSID, LFRSZN;
   float PREISMENGE;
   float PREIS;
   int AUFTRAGID;

 Query("select ry.artikelid, ry.menge, ry.preis,"
      "ry.stueck, ry.preismenge, ry.rabatt,"
      "coalesce(li.geliefertam,li.datum,date('today')),"
      "ry.lfrsid, ry.lfrszeile,l.refauftragid "
   "from rechnungentry ry "
   "left join lieferscheinentry l on "
	"(?,ry.lfrsid,ry.lfrszeile)=(l.instanz,l.lfrsid,l.zeile) "
   "left join lieferschein li on (li.instanz,li.lfrsid)=(?,ry.lfrsid) "
   "where (ry.rngid,ry.zeilennr) = (?,?)")
     << ppsInstanzID::Kundenauftraege << ppsInstanzID::Kundenauftraege 
     << rechnung.Id() << rechnung.Zeile()
   >> artikel >> Query::Row::MapNull(menge) >> Query::Row::MapNull(PREIS)
   >> Query::Row::MapNull(stueck)
   >> Query::Row::MapNull(PREISMENGE,1) >> Query::Row::MapNull(rabatt)
   >> lieferdatum >> Query::Row::MapNull(LFRSID) >> Query::Row::MapNull(LFRSZN)
   >> Query::Row::MapNull(AUFTRAGID,AuftragBase::invalid_id);

  // dieser Konstruktor dauert !!!
  preis=Preis(PREIS,Rechnung(rechnung.Id()).getWaehrung(),PREISMENGE);
  if (LFRSID) 
    lfrs=LieferscheinEntryBase(ppsInstanzID::Kundenauftraege,LFRSID,LFRSZN);
  if (AUFTRAGID!=AuftragBase::invalid_id)
    auftrag=AuftragBase(ppsInstanzID::Kundenauftraege,AUFTRAGID);
}


Preis RechnungEntry::getAuftragsPreis()
{LieferscheinEntry::zusaetze_t zus=LfrsEntry().getZusatzInfos();
 if (!zus.empty() && !!zus[0].aeb)
    return AufEintrag(zus[0].aeb).EPreis();
 return Preis();
}



void RechnungEntryBase::deleteEntry(const RechnungEntryBase &re) throw(SQLerror)
{
 Query("delete from rechnungentry where rngid=? and zeilennr=?")
 	<< re.Id() << re.Zeile();
}

void RechnungEntry::setzePreis(const Preis &p) throw (SQLerror)
{  preis=p;
   assert(p.Wert()>=0); // nicht zweimal negativ nehmen
   Query("update rechnungentry set preismenge=?, preis=? "
   	"where (rngid,zeilennr)=(?,?)")
   	<< p.BezugsMenge() << (RgArt()==RART_GUT?-p.Wert():p.Wert())
   	<< Id() << Zeile();
   SQLerror::test(__FILELINE__);
}



void RechnungEntryBase::setRgPayOff(int _rngid) throw(SQLerror)
{
 ManuProC::Datum DATUM;
 bool BEZAHLT;
 int KUNDENNR;
 char RNGART;

 Query("select datum,coalesce(bezahlt,false),kundennr,rngart "
 	"from rechnung where rngid=?")
 	<< _rngid
 	>> DATUM >> BEZAHLT >> KUNDENNR >> RNGART;
 rgdata[_rngid]=rng_payoff(DATUM,BEZAHLT,KUNDENNR,(RngArt)RNGART);
}

const ManuProC::Datum RechnungEntry::RgDatum() const throw(SQLerror)
{
 if(rgdata[rngid].valid==true) return rgdata[rngid].rgdatum;
 setRgPayOff(rngid);
 return rgdata[rngid].rgdatum;
}


const bool RechnungEntry::Bezahlt() const throw(SQLerror)
{
 if(rgdata[rngid].valid==true) return rgdata[rngid].bezahlt;
 setRgPayOff(rngid);
 return rgdata[rngid].bezahlt;
}

const RechnungBase::RngArt RechnungEntry::RgArt() const throw(SQLerror)
{
 if(rgdata[rngid].valid==true) return rgdata[rngid].rngart;
 setRgPayOff(rngid);
 return rgdata[rngid].rngart;
}


cH_Kunde RechnungEntry::Kunde() const
{
 if(rgdata[rngid].valid==true) return rgdata[rngid].kunde;
 setRgPayOff(rngid);
 return rgdata[rngid].kunde;
}


fixedpoint<2> RechnungEntry::ProvSatz() const throw(SQLerror)
{
 if(provsatz!=-1) return provsatz;

 Query q("select provsatz from rechnungentry where"
        " (rngid,zeilennr) = (?,?)");

 q << Id() << Zeile() >> Query::Row::MapNull(provsatz,0);
 SQLerror::test(__FILELINE__);

 return provsatz;
}

void RechnungEntry::setProvSatz(const fixedpoint<2> ps) throw(SQLerror)
{
 Query q("update rechnungentry set provsatz=? where"
        " (rngid,zeilennr) = (?,?)");

 q << ps << Id() << Zeile();
 SQLerror::test(__FILELINE__);
 provsatz=ps;
}

