/* $Id: RechnungVoll_sql.pgcc,v 1.9 2002/06/27 07:42:50 christof Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include"RechnungVoll.h"
#include<Aux/Transaction.h>
exec sql include sqlca;

RechnungVoll::RechnungVoll(int rid) throw(SQLerror)
: Rechnung(rid)
{
 exec sql begin declare section;
  int ARTIKELID, STUECK, ZEILE, RNGID=rid;
  int LFRSID,LIEFERZEILE;
  int AUFTRAGID;
  float MENGE,RABATT,PREISMENGE,PREIS;
  char LIEFERDATUM[11];
  int ILIEFERDATUM,INSTANZ;
 exec sql end declare section;
 INSTANZ=ppsInstanzID::Kundenauftraege;

 Transaction tr;
 exec sql declare lein cursor for
   select ry.artikelid, ry.zeilennr, coalesce(ry.stueck,0), coalesce(ry.menge,0), 
   	coalesce(ry.rabatt,0.0), ry.lfrsid, ry.lfrszeile, 
      coalesce(ry.preismenge,1), l.geliefertam, abs(ry.preis),
	coalesce(refauftragid,-1)
   from (rechnungentry ry 
   left join lieferschein l on (:INSTANZ,ry.lfrsid) = (l.instanz,l.lfrsid))
   left join lieferscheinentry e on (l.instanz,l.lfrsid,ry.lfrszeile)
				=(e.instanz,e.lfrsid,e.zeile)
   where ry.rngid = :RNGID order by zeilennr;
 exec sql open lein;
 SQLerror::test(__FILELINE__);
 while (true)
   {
    exec sql fetch lein into
         :ARTIKELID, :ZEILE, :STUECK, :MENGE, :RABATT, :LFRSID, :LIEFERZEILE,
         :PREISMENGE, :LIEFERDATUM:ILIEFERDATUM, :PREIS,
	 :AUFTRAGID;
    if (sqlca.sqlcode) break;

    Preis p(PREIS,Rechnung(rid).getWaehrung(),PREISMENGE);
    ManuProC::Datum ldatum;
    if(!ILIEFERDATUM) ldatum.from_postgres(LIEFERDATUM);
    rentry.push_back(RechnungEntry(rngid,ZEILE,
         ARTIKELID,STUECK,MENGE,p,RABATT,ldatum,
         LieferscheinEntryBase(ppsInstanz::ID(INSTANZ),LFRSID,LIEFERZEILE),
	 AuftragBase(ppsInstanz::ID(INSTANZ),AUFTRAGID)));
   }
 exec sql close lein;
 tr.close();
}


#ifdef MABELLA_EXTENSIONS
void RechnungVoll::setGewicht() const throw(SQLerror)
{
 exec sql begin declare section;
 int RNGID = Id();
 float NETTO;
 float BRUTTO;
 int PAKETE;
 exec sql end declare section; 
 
 exec sql select coalesce(sum(coalesce(netto_kg,0)),0),
		coalesce(sum(coalesce(brutto_kg,0)),0),
		coalesce(sum(coalesce(pakete,0)),0)
	into :NETTO, :BRUTTO, :PAKETE from lieferschein l
	where l.rngid= :RNGID;
 SQLerror::test(__FILELINE__);

 netto_gewicht = NETTO;
 brutto_gewicht = BRUTTO;
 pakete= PAKETE; 
}

#endif
