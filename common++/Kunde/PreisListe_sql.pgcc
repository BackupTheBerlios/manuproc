
// $Id: PreisListe_sql.pgcc,v 1.17 2005/10/20 12:57:42 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Kunde/PreisListe.h>
#include <Misc/Transaction.h>
#include <Misc/Waehrung.h>
#include <Misc/Query.h>

exec sql include sqlca;

PreisListe cH_PreisListe::default_object; 
bool cH_PreisListe::default_object_ref=cH_PreisListe::default_object.is_static(true);
cH_PreisListe::cache_t cH_PreisListe::cache;

cH_PreisListe::cH_PreisListe(PreisListe::ID id)
{
 cH_PreisListe *cached(cache.lookup(id));
 if (cached)  *this=*cached;
 else
  {
    *this=cH_PreisListe(new PreisListe(id));
    cache.Register(id,*this);
  }
}



PreisListe::PreisListe(ID _id) throw(SQLerror) 
: ManuProcHandle<>(_id), view_tabelle(DEF_VIEW_TABLE), pl_parent(none_id)
{  
   if(_id == none_id) return;   
   
   int WAEHID;
   int IBRUTTOSATZ;
   char ART;
   std::string TABLENAMEGRP;
   int ITABLENAMEGRP;
   
   Query q("select notiz,waehrungid,bruttosatz,art,tablename_gruppe,"
	"pl_parent,fkt_parent,add_parent "
        "from ku_preisliste where prlsnr=?");
   q << _id;
   Query::Row r=q.Fetch();
   r >> Query::Row::MapNull(name)
     >> WAEHID
     >> Query::Row::WithIndicator(rabatt,IBRUTTOSATZ)
     >> Query::Row::MapNull(ART)
     >> Query::Row::WithIndicator(TABLENAMEGRP,ITABLENAMEGRP)
     >> Query::Row::MapNull(pl_parent,-1)
     >> Query::Row::MapNull(fkt_parent)
     >> Query::Row::MapNull(add_parent)
     >> Query::check_eol();

   waehrung=cP_Waehrung((Waehrung::ID)WAEHID);
   rabatt_gesetzt=IBRUTTOSATZ!=-1;
   art=(PlArt)ART;
   view_tabelle+=ITABLENAMEGRP == 0 ? ("_"+TABLENAMEGRP) : ("");
}

/*
PreisListe::ID PreisListe::createPreisliste(const std::string &name) throw(SQLerror)
{
 exec sql begin declare section;
 int NR;
 char *NOTIZ;
 int WAEHID;
 exec sql end declare section;

 exec sql select nextval('kunden_personen_persnr_seq') into :NR;
 SQLerror::test(__FILELINE__);

 NOTIZ = (char*) name.c_str();
 WAEHID = WaehrungID::EUR;

 exec sql insert into ku_preisliste (prlsnr,notiz,waehrungid,art) values
	(:NR,:NOTIZ,:WAEHID,'V');
 SQLerror::test(__FILELINE__);

 return NR;
}
*/



void PreisListe::setRabatt(bool fest, rabatt_t rab) throw(SQLerror)
{exec sql begin declare section;
 int NR=Id();
 int IRABATT=fest?0:-1;
 float RABATT=rab.as_float();
 exec sql end declare section;
 
 exec sql update ku_preisliste set bruttosatz=:RABATT:IRABATT
 	where prlsnr=:NR;
 SQLerror::test(__FILELINE__);

 rabatt=rab;
 rabatt_gesetzt=fest;
}



PreisListe::ID PreisListe::RealId() const 
{ 
 if(isDepending()) return pl_parent; 
 return Id();
}

const std::string PreisListe::getPreisSelClausel() const 
{
 if(isDepending()) return (std::string("round(preis*")+
     fkt_parent.String()+",2)+"+add_parent.String());
     
 return "preis";    
}


