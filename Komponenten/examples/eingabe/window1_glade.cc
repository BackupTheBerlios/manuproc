/*  libKomponenten: GUI components for ManuProC's libcommon++
 *  Copyright (C) 2001 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// generated 2001/2/21 18:07:06 CET by christof@puck.(none)
// using glademm V0.5_11f_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- eingabe.glade
// for gtk 1.2.8 and gtkmm 1.2.4
//
// Please modify the corresponding derived classes in ./eingabe2/window1.cc

#include "config.h"
#include "window1.hh"
#include <libgnomeui/gnome-stock.h>
#include <gtk--/button.h>
#include <gtk--/box.h>

window1_glade::window1_glade(
) : Gtk::Window(GTK_WINDOW_TOPLEVEL)
{   
   
   Gtk::Window *window1 = this;
   entry1 = manage(new class Gtk::Entry());
   custom1 = new class EingabeBox(4);
   entry2 = manage(new class Gtk::Entry());
   
   Gtk::Button *button1 = Gtk::wrap((GtkButton*)gnome_stock_button(GNOME_STOCK_BUTTON_UP));
   Gtk::Button *button2 = Gtk::wrap((GtkButton*)gnome_stock_button(GNOME_STOCK_BUTTON_DOWN));
   Gtk::Button *button3 = Gtk::wrap((GtkButton*)gnome_stock_button(GNOME_STOCK_BUTTON_CLOSE));
   Gtk::HBox *hbox1 = manage(new class Gtk::HBox(false, 0));
   Gtk::VBox *vbox1 = manage(new class Gtk::VBox(false, 0));
   entry1->set_editable(true);
   entry2->set_editable(true);
   hbox1->pack_start(*button1, true, false, 0);
   hbox1->pack_start(*button2, true, false, 0);
   hbox1->pack_start(*button3, true, false, 0);
   vbox1->pack_start(*entry1, false, false, 0);
   vbox1->pack_start(*custom1);
   vbox1->pack_start(*entry2, false, false, 0);
   vbox1->pack_start(*hbox1, false, false, 2);
   window1->set_title("window1");
   window1->set_policy(true, true, false);
   window1->add(*vbox1);
   entry1->show();
   custom1->show();
   entry2->show();
   button1->show();
   button2->show();
   button3->show();
   hbox1->show();
   vbox1->show();
   window1->show();
   button1->clicked.connect(SigC::slot(static_cast<class window1*>(this), &window1::rauf));
   button2->clicked.connect(SigC::slot(static_cast<class window1*>(this), &window1::runter));
   button3->clicked.connect(SigC::slot(static_cast<class window1*>(this), &window1::schliessen));
   window1->delete_event.connect(SigC::slot(static_cast<class window1*>(this), &window1::schliessen2));
}

window1_glade::~window1_glade()
{   delete custom1;
}
