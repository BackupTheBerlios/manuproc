# $Id: configure.in,v 1.33 2003/11/03 08:12:19 christof Exp $

AC_PREREQ(2.50)
AC_INIT(libcommon++, 0.0, [manuproc-developer-de@berlios.de])
AM_INIT_AUTOMAKE

#(libcommon++, 0.0, nomacros)
AC_CONFIG_HEADERS(ManuProCConfig.h)

AC_PREFIX_DEFAULT(/usr/local)

AC_PROG_CXX
AM_PROG_LIBTOOL
AC_LANG_CPLUSPLUS

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(CXXFLAGS)

AC_ARG_ENABLE(sigc1-0, [  --enable-sigc1-0	prefer sigc 1.0],
	[AM_PATH_SIGC(1.0.0,,AC_MSG_ERROR("SigC++ 1.0.0 or newer not found or broken - see config.log for details."))],
	[PKG_CHECK_MODULES(SIGC,[sigc++-1.2 >= 1.2.0],[
		AC_SUBST(SIGC_CFLAGS)
		AC_SUBST(SIGC_LIBS)
#		CXXFLAGS="$CXXFLAGS -DSIGC1_2"
#		AC_SUBST(CXXFLAGS)
		AC_DEFINE(SIGC1_2,1,[we use SigC++ 1.2.x (not 1.0.x)])
	 ],[
		AM_PATH_SIGC(1.0.0,,AC_MSG_ERROR("SigC++ 1.0.0 or newer not found or broken - see config.log for details."))
	 ]) 
	])

PETIG_CHECK_POSTGRES

if test ! -z "$ECPG_INCLUDES"
then
  AC_MSG_CHECKING(for ecpg version)
  tmp_CXXFLAGS="$CXXFLAGS"
  CXXFLAGS="$CXXFLAGS $ECPG_INCLUDES"
  AC_COMPILE_IFELSE([
  #include <ecpgtype.h>
  #include <ecpglib.h>
  int main() {  ECPGdo(20, "test", "select true",ECPGt_EOIT, ECPGt_EORT); }
  	],[AC_DEFINE(OLD_ECPG, 1, [Define to 1 if you use ecpg 2.9.])
  		AC_MSG_RESULT([old (-2.9.0)])],
  	[AC_MSG_RESULT([new (3.0.0+)])])
  CXXFLAGS="$tmp_CXXFLAGS"
fi

# AC_ARG_ENABLE(debug,
#   [  --disable-debug   disable debugging (turn on cpcline, omit -g)],
#   [enable_debug=$enableval], enable_debug=1 )

# if test $enable_debug -eq 0 
# then 
# #  CPCOPT=
#   CFLAGS="$CXXFLAGS"
# else
#   CFLAGS="-g $CXXFLAGS"
# fi

#LIBS=@ECPG_LIBS@

DEFAULT_DB=anleitungdb
DEFAULT_DBHOST="localhost"

AC_MSG_CHECKING(Petig Extensions)
AC_ARG_ENABLE(petig,[  --en/disable-petig	en/disable Petig extensions],
	petig_exts="$enableval",
	[  case `hostname -f` in
		*.petig-baender.de|Tiger|sony) petig_exts=yes ;;
		*) petig_exts=no ;;
	   esac
	])
if test "$petig_exts" != "no" ; then
	AC_MSG_RESULT([enabled])
	AC_DEFINE(PETIG_EXTENSIONS,1,[whether Petig extensions are enabled])
	DEFAULT_DB=petigdb
	case `hostname -f` in
		felix.petig-baender.de|petig.petig-baender.de)
			DEFAULT_DBHOST=database ;;
	esac
else
	AC_MSG_RESULT([disabled])
fi

AC_MSG_CHECKING(Mabella Extensions)
AC_ARG_ENABLE(mabella,[  --en/disable-mabella	en/disable Mabella extensions],
	mabella_exts="$enableval",
	[  case `hostname -f` in
		*.mabella.de|*.jacek.de) mabella_exts=yes ;;
		*) mabella_exts=no ;;
	   esac
	])
if test "$mabella_exts" != "no" ; then
	AC_MSG_RESULT([enabled])
	AC_DEFINE(MABELLA_EXTENSIONS,1,[whether Mabella extensions are enabled])
	DEFAULT_DB=mabelladb
	case `hostname -f` in
		*.mabella.de)
			DEFAULT_DBHOST=mabelladb ;;
	esac
else
	AC_MSG_RESULT([disabled])
fi

AC_MSG_CHECKING(for standard database name)
AC_DEFINE_UNQUOTED(DEFAULT_DB, "$DEFAULT_DB", [the default database name])
AC_DEFINE_UNQUOTED(DEFAULT_DBHOST, "$DEFAULT_DBHOST", [the default database host])
AC_MSG_RESULT($DEFAULT_DB@$DEFAULT_DBHOST)
AC_DEFINE(MANUPROC_WITH_DATABASE,1,[we have support for pgsql/ecpg])

AC_MSG_CHECKING(for handle debug code)
AC_ARG_ENABLE(handledebug,[  --enable-handledebug	enable Handle Content debugging code (slower, recompile everything if you switch this!)],
	handledebug_exts="$enableval", handledebug_exts=no)
if test "$handledebug_exts" != "no" ; then
	AC_MSG_RESULT([enabled])
	AC_DEFINE(DEBUG_HANDLE_CONTENT,1,[whether handle content tracing is enabled])
else
	AC_MSG_RESULT([disabled])
fi

COMMONXX_INCLUDES="$ECPG_INCLUDES -I\$(top_srcdir) $SIGC_CFLAGS"
COMMONXX_LDFLAGS="$ECPG_LDFLAGS -L\$(top_srcdir)"
COMMONXX_LIBS="$ECPG_LIBS -lcommon++ $SIGC_LIBS"
AC_SUBST(COMMONXX_INCLUDES)
AC_SUBST(COMMONXX_LDFLAGS)
AC_SUBST(COMMONXX_LIBS)

AC_OUTPUT(Makefile Artikel/Makefile Auftrag/Makefile \
	Aux/Makefile Bank/Makefile ExtBezSchema/Makefile Ketten/Makefile \
	Kunde/Makefile Lieferschein/Makefile ostream/Makefile \
	tests/Makefile tests/AuftragsTest/Makefile \
   Material/Makefile Lager/Makefile Faeden/Makefile \
   Programme/Makefile DynamicEnums/Makefile Instanzen/Makefile \
   Vertrieb/Makefile \
   BaseObjects/Makefile  tests/AuftragsTest/graph/Makefile)

