/*  pps: ManuProC's production planning system
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Auftrag/Auftrag.h>
#include<stdio.h>
#include <Aux/Transaction.h>
#include<Aux/Changejournal.h>
#include <Auftrag/auftrag_status.h>
#include "AufEintrag.h"
#include <Artikel/ArtikelStamm.h>
#include <Auftrag/AufEintragZu.h>
#include <Lager/Lager_Vormerkungen.h>

exec sql include sqlca;


AuftragBase::AuftragBase(cH_ppsInstanz _instanz, int aufid,int kid) throw(SQLerror)
: instanz(_instanz),auftragid(aufid)
{
 exec sql begin declare section;
   int KID=kid;
   int AID=auftragid;
   int INST=instanz->Id();
   int ID;
 exec sql end declare section;
 exec sql select auftragid into :ID from auftrag where instanz=:INST and
      kundennr=:KID and youraufnr=:AID;
 SQLerror::test(__FILELINE__);	
 *this=AuftragBase(instanz,ID);
}

bool AuftragBase::Exists() const throw(SQLerror)
{
 exec sql begin declare section;
  int AUFTRAGID=Id();
  int INSTANZ=InstanzID();
  bool DUMMY;
 exec sql end declare section;
 exec sql select true into :DUMMY from auftrag where 
	(instanz,auftragid)= (:INSTANZ,:AUFTRAGID);
 SQLerror::test(__FILELINE__,100);
 if(sqlca.sqlcode) return false;
 return true;
}

void AuftragBase::create_if_not_exists(AufStatVal status,Kunde::ID kunde) const
{
//cout << "create_if_not_exists: "<<Exists()<<'\n';
  if(Exists()) return;
//cout << "Anlegen "<<Instanz()->Name()<<' '<<Id()<<'\n';
  exec sql begin declare section;
   int AUFTRAGID=Id();
   int INSTANZ=InstanzID();
   int KUNDE=kunde;
   int STATUS=status;
  exec sql end declare section;
  exec sql insert into auftrag (instanz,auftragid,kundennr,stat) 
      values (:INSTANZ,:AUFTRAGID,:KUNDE,:STATUS);
 SQLerror::test(__FILELINE__);
}


void AuftragBase::setStatusAuftragBase(AufStatVal st) const throw(SQLerror)
{
 exec sql begin declare section;
  int AUFTRAGID=Id();
  int INSTANZ=InstanzID();
  int STATUS=st;
 exec sql end declare section;

 exec sql update auftrag set stat= :STATUS
       where (instanz,auftragid)= (:INSTANZ,:AUFTRAGID);
 SQLerror::test(__FILELINE__"Status setzen");
}


void AuftragBase::setRabatt(const rabatt_t auftragsrabatt) const throw(SQLerror)
{
 exec sql begin declare section;
  int AUFTRAGID=Id();
  int INSTANZ=InstanzID();
  double RABATT=auftragsrabatt;
 exec sql end declare section;

 exec sql update auftrag set rabatt= :RABATT
       where (instanz,auftragid)= (:INSTANZ,:AUFTRAGID);
 SQLerror::test(__FILELINE__"Rabatt setzen");
}


int AuftragBase::insertNewEntry(const mengen_t bestellt, 
  const Petig::Datum lieferdatum,const ArtikelBase& artikel,
  const AufStatVal status,int uid,const bool setInstanzAuftraege,
  const Preis& preis,const fixedpoint<2> rabatt,
  const cH_PreisListe &preisliste) const throw(SQLerror)
{
//std::cout << "\n\n\ninsertfunktion: "<<bestellt<<' '
//   <<cH_ArtikelBezeichnung(artikel)->Bezeichnung()<<' '<<Id()<<'\n';
 exec sql begin declare section;
 int AUFTRAGID =Id();
 long ARTIKELID=artikel.Id();
 int INSTANZ =InstanzID();
 int ZEILENNR;
 int BESTELLT=bestellt;
 char LIEFERDATUM[21];
 double PREIS=preis.Wert();
 int RABATT=rabatt;
 float PREISMENGE=preis.PreisMenge();
 int STATUS=status;
 int PREISLISTE=preisliste->Id();
 int PREISLISTENULL;
 int UID=uid;
 exec sql end declare section;
 PREISLISTENULL=PreisListe::none_id;
 
// bei Mabella auf keinen Fall UNCOMMITED
#ifdef MABELLA_EXTENSIONS
 if(status==UNCOMMITED)
   STATUS=OPEN;   
#endif

 lieferdatum.write_postgres(LIEFERDATUM,sizeof LIEFERDATUM);

 Transaction tr;
 exec sql lock table auftragentry in exclusive mode;
 SQLerror::test("AufEintrag: lock auftragentry");	

//ECPGdebug(true,stdout);
 exec sql select coalesce(max(zeilennr)+1,1) into :ZEILENNR from auftragentry
	where (instanz,auftragid)= (:INSTANZ,:AUFTRAGID);
 SQLerror::test("generate next zeilennr");

 exec sql insert into auftragentry (instanz,auftragid, zeilennr,
	bestellt,geliefert,lieferdate,artikelid,status,
	preis,rabatt,preismenge,preisliste,lastedit_uid)
	values (:INSTANZ, :AUFTRAGID, :ZEILENNR, :BESTELLT, 0, :LIEFERDATUM,
		:ARTIKELID, :STATUS, :PREIS, :RABATT,
		:PREISMENGE, nullif(:PREISLISTE,:PREISLISTENULL),:UID) ;
 SQLerror::test(__FILELINE__" insert into auftragentry");	
//ECPGdebug(false,0);
	
 if(Instanz()==ppsInstanzID::Kundenauftraege)
  { try{
     pps_ChJournalEntry::newChange(
                        instanz,
			AufEintragBase(instanz,AUFTRAGID,ZEILENNR),
                        artikel,
                        (double)BESTELLT,
                        (double)BESTELLT,
                        pps_ChJournalEntry::CH_MENGE);
        }
    catch(SQLerror &e)
      {tr.rollback(); throw; }
  }
//std::cout <<"INSTANZ\n";
 // Kundenaufträge legen automatisch einen Auftrag bei der entsprechenden Instanz 
 // für denselben Artikel an.
 if(status!=UNCOMMITED) // Nur offene Aufträge kümmern sich um andere Instanzen
   {
     if(Instanz()==ppsInstanzID::Kundenauftraege)
      { cH_ppsInstanz i=ArtikelStamm(artikel).BestellenBei();
        if (i!=ppsInstanzID::None && i!=ppsInstanzID::Kundenauftraege)
        {  AuftragBase AB(ArtikelStamm(artikel).BestellenBei(),AuftragBase::ungeplante_id);
           AB.tryUpdateEntry(bestellt,lieferdatum,artikel,status,uid,AufEintragBase(*this,ZEILENNR));
        }
      }
     else if(setInstanzAuftraege)
        InstanzAuftraegeAnlegen(artikel,ZEILENNR,lieferdatum,status,uid,bestellt);
    }
 tr.commit();
 return ZEILENNR;
}

bool AuftragBase::existEntry(const ArtikelBase& artikel,
                             const Petig::Datum& lieferdatum,
                             int& znr,int &newznr,mengen_t& menge,
                             AufStatVal status) const throw(SQLerror)
{
 exec sql begin declare section;
   int AUFTRAGID =Id();
   long ARTIKELID=artikel.Id();
   int INSTANZ =InstanzID();
   int ZEILENNR,NEUZNR=-99;
   double MENGE;
   char LIEFERDATUM[21];
   int STATUS=status;
 exec sql end declare section;
 lieferdatum.write_postgres(LIEFERDATUM,sizeof LIEFERDATUM);

 exec sql select zeilennr,neuzeilennr,bestellt into :ZEILENNR, :NEUZNR,:MENGE
   from auftragentry join auftragsentryzuordnung on
   (altauftragid,altinstanz,altzeilennr)=(auftragid,instanz,zeilennr)
	where (instanz,auftragid)= (:INSTANZ,:AUFTRAGID) and
      lieferdate=:LIEFERDATUM and artikelid=:ARTIKELID 
      and status=:STATUS limit 1;
 SQLerror::test(__FILELINE__,100);
 //2.Versuch ohne 'join'
 if (sqlca.sqlcode==100) ;
  { 
    exec sql select zeilennr,bestellt into :ZEILENNR, :MENGE
      from auftragentry 
   	where (instanz,auftragid)= (:INSTANZ,:AUFTRAGID) and 
      lieferdate=:LIEFERDATUM and artikelid=:ARTIKELID 
      and status=:STATUS limit 1;
    SQLerror::test(__FILELINE__,100);
   }

 if (sqlca.sqlcode==100) return false;
 else  {
//std::cout << "EXIST=TRUE\n";
    znr=ZEILENNR;
    newznr=NEUZNR;
    menge=MENGE;
    return true;  }
}

#include <Artikel/ArtikelBezeichnung.h> //debug
int AuftragBase::tryUpdateEntry(mengen_t bestellt, 
  const Petig::Datum lieferdatum,const ArtikelBase& artikel,
  AufStatVal status,int uid,const AufEintragBase& altAEB,
  bool force_new,bool dispoplanung) 
      const throw(SQLerror)
{
 create_if_not_exists(status);
//std::cout << "Try for: "<< altAEB <<"\n";
// AufEintragBase AEB(altAuftrag,altZnr);
//std::cout << "\tErfolg\n";
 int znr=-99,neuznr=-99;
 mengen_t menge=0;
 Transaction tr;
 exec sql lock table auftragentry in exclusive mode;
 SQLerror::test(__FILELINE__);  
 if(force_new || !existEntry(artikel,lieferdatum,znr,neuznr,menge,status))
  {
    znr=insertNewEntry(bestellt,lieferdatum,artikel,status,uid,false)  ;
    if(!dispoplanung)
     {    
       Lager_Vormerkungen(class AufEintrag(Instanz()->Id(),Id(),znr,bestellt,artikel,lieferdatum,status)).vormerken_oder_bestellen(uid);
       AufEintragZu(altAEB).Neu(AufEintragBase(*this,znr),bestellt);
     }
    else AufEintragZu(class AufEintragBase(*this,znr)).Neu(altAEB,bestellt);
  }
 else
  {
    if(!dispoplanung) 
     {
       AufEintragZu(altAEB).Neu(AufEintragBase(*this,znr),bestellt);
       mengen_t mt=AufEintragBase(instanz,auftragid,znr).updateStkDiffBase__(uid,bestellt);
       assert(mt==bestellt);
       Lager_Vormerkungen(class AufEintrag(Instanz()->Id(),Id(),znr,bestellt,artikel,lieferdatum,status)).vormerken_oder_bestellen(uid);
     }
    else
     {
       AufEintragZu(class AufEintragBase(*this,znr)).Neu(altAEB,bestellt);
       mengen_t mt=AufEintragBase(instanz,auftragid,znr).updateStkDiffBase__(uid,bestellt);
       assert(mt==bestellt);
     }
  }
  tr.commit();
  return znr;
}


