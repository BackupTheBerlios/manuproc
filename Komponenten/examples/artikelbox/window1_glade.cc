// generated 2004/11/16 12:42:47 CET by christof@felix.petig.de
// using glademm V2.6.0_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- marc.glade
// for gtk 2.4.13 and gtkmm 2.4.5
//
// Please modify the corresponding derived classes in ././window1.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "window1_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/menuitem.h>
#include <gtkmm/menu.h>
#include <gtkmm/menubar.h>
#include <gtkmm/box.h>
#include <gtkmm/button.h>
#include <gtkmm/label.h>

window1_glade::window1_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  
   
   Gtk::Window *window1 = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::MenuItem *Beenden = NULL;
   Gtk::MenuItem *trennlinie2 = NULL;
   Gtk::Menu *Datei_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *Datei = NULL;
   Gtk::MenuBar *menubar1 = Gtk::manage(new class Gtk::MenuBar());
   WPreis = new class WPreis(1);
   custom_OI = new class Optionmenu_Instanz(Optionmenu_Instanz::allesAnzeigen);
   custom_OW = new class Optionmenu_Warengruppe(1);
   
   Gtk::HBox *hbox1 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Button *button1 = Gtk::manage(new class Gtk::Button("Show contents"));
   custom2 = new class PreisBox();
   WAufStat = new class WAuftragStatus();
   WWaehrung = new class WWaehrung(WWaehrung::LANG);
   
   Gtk::Label *label1 = Gtk::manage(new class Gtk::Label("Some label to demonstrate pack_end", true));
   datum = new class Datewin();
   prozess = new class ProzessBox();
   artikelbox = new class ArtikelBox(cH_ExtBezSchema(1,0));
   artikelbox2 = new class ArtikelBox("marc","test");
   kundenbox = new class KundenBox2();
   
   Gtk::Button *button2 = Gtk::manage(new class Gtk::Button("reset"));
   vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));
   
   
   Datei_menu->items().push_back(Gtk::Menu_Helpers::MenuElem("Beenden"));
   Beenden = (Gtk::MenuItem *)&Datei_menu->items().back();
   
   Datei_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   trennlinie2 = (Gtk::MenuItem *)&Datei_menu->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem("Datei", *Datei_menu));
   Datei = (Gtk::MenuItem *)&menubar1->items().back();
   hbox1->pack_start(*custom_OI);
   hbox1->pack_start(*custom_OW);
   button1->set_flags(Gtk::CAN_FOCUS);
   button1->set_relief(Gtk::RELIEF_NORMAL);
   label1->set_alignment(0.5,0.5);
   label1->set_padding(0,0);
   label1->set_justify(Gtk::JUSTIFY_CENTER);
   label1->set_line_wrap(false);
   button2->set_flags(Gtk::CAN_FOCUS);
   button2->set_relief(Gtk::RELIEF_NORMAL);
   vbox1->pack_start(*menubar1, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*WPreis);
   vbox1->pack_start(*hbox1);
   vbox1->pack_start(*button1, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*custom2);
   vbox1->pack_start(*WAufStat);
   vbox1->pack_start(*WWaehrung);
   vbox1->pack_start(*label1, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*datum);
   vbox1->pack_start(*prozess);
   vbox1->pack_start(*artikelbox);
   vbox1->pack_start(*artikelbox2);
   vbox1->pack_start(*kundenbox);
   vbox1->pack_start(*button2, Gtk::PACK_SHRINK, 0);
   window1->set_title("window1");
   window1->set_modal(false);
   window1->property_allow_shrink().set_value(true);
   window1->property_allow_grow().set_value(true);
   window1->add(*vbox1);
   Beenden->show();
   trennlinie2->show();
   Datei_menu->show();
   Datei->show();
   menubar1->show();
   WPreis->show();
   custom_OI->show();
   custom_OW->show();
   hbox1->show();
   button1->show();
   custom2->show();
   WAufStat->show();
   WWaehrung->show();
   label1->show();
   datum->show();
   prozess->show();
   artikelbox->show();
   artikelbox2->show();
   kundenbox->show();
   button2->show();
   vbox1->show();
   window1->show();
   Beenden->signal_activate().connect(SigC::slot(*this, &window1_glade::on_Beenden_activate), false);
   WPreis->signal_activate().connect(SigC::slot(*this, &window1_glade::on_activate_wpreis));
   custom_OI->signal_activate().connect(SigC::slot(*this, &window1_glade::OI_activate));
   custom_OW->signal_activate().connect(SigC::slot(*this, &window1_glade::OW_activate));
   button1->signal_clicked().connect(SigC::slot(*this, &window1_glade::on_show_clicked), false);
   WWaehrung->signal_activate().connect(SigC::slot(*this, &window1_glade::on_activate_wwaehrung));
   datum->signal_activate().connect(SigC::slot(*prozess, &Gtk::Widget::grab_focus));
   prozess->signal_activate().connect(SigC::slot(*artikelbox, &Gtk::Widget::grab_focus));
   artikelbox->signal_activate().connect(SigC::slot(*this, &window1_glade::on_show_complete));
   kundenbox->signal_activate().connect(SigC::slot(*this, &window1_glade::andererKunde));
   button2->signal_clicked().connect(SigC::slot(*this, &window1_glade::on_reset), false);
}

window1_glade::~window1_glade()
{  delete WPreis;
   delete custom_OI;
   delete custom_OW;
   delete custom2;
   delete WAufStat;
   delete WWaehrung;
   delete datum;
   delete prozess;
   delete artikelbox;
   delete artikelbox2;
   delete kundenbox;
   delete gmm_data;
}
