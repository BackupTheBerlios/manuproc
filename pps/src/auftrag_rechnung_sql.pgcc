/*  pps: ManuProC's ProductionPlanningSystem
 *  Copyright (C) 2001 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */



#include"auftrag_rechnung.hh"
#include <Misc/Transaction.h>
#include"auftrag_rechnung_classes.h"
#include <Gtk_OStream.h>
exec sql include sqlca;

void auftrag_rechnung::on_rngnr_search(int *_continue, GtkSCContext newsearch)
{   
 exec sql begin declare section;
 int RNGID;
 char RNGIDSTR[10];
 char *PAT;
 int KUNDE;
 char RNGART;
 exec sql end declare section;
 static Transaction tr("",false);
  
 switch(newsearch)
   {
    case GTK_SEARCH_OPEN :
      {
       std::string pat = rngnr->get_text() + "%";
       PAT = (char*)pat.c_str();
       KUNDE=lieferkunde->get_value();
       
       tr.open();
                   
       exec sql declare RNGNR_CURSOR cursor for
       		select rngid, ltrim(to_char(rngid,'000000')),rngart
       		from rechnung where
       		ltrim(to_char(rngid,'000000')) like :PAT
       		and (:KUNDE<1 or kundennr=:KUNDE)
       		order by rngid;
       	
       exec sql open RNGNR_CURSOR;
       SQLerror::test(__FILELINE__":on_rngnr_search: open cursor","RNGNR_CURSOR");
      } 							
  case GTK_SEARCH_FETCH :
       {
        exec sql fetch RNGNR_CURSOR into :RNGID, :RNGIDSTR, :RNGART;
	SQLerror::test(__FILELINE__":on_rngnr_search: "
			" fetch cursor RNGNR_CURSOR","RNGNR_CURSOR",100);
			
	if(sqlca.sqlcode==100){*_continue=false; break; }
	if(RNGART!='R') {RNGIDSTR[6]=RNGART; RNGIDSTR[7]=0;}
	rngnr->add_item(RNGIDSTR,RNGID);
	*_continue=true;
        break;
       }
  case GTK_SEARCH_CLOSE :
       {
	exec sql close RNGNR_CURSOR;
	tr.close();
	break;
       }
  }
}

void auftrag_rechnung::set_rtree_offen_content(Kunde::ID kunde)
{
 exec sql begin declare section;
  int LFRSID;
  char *QU;
 exec sql end declare section;
// if(kunde==ManuProcEntity::none_id) return;
 std::string qu;
/*
#ifdef MABELLA_EXTENSIONS
 qu = std::string("select lfrsid from lieferschein l ")+
   	"where l.kundennr= "+itos(kunde)+" and l.rngid is null and l.instanz="+
	itos(instanz->Id());
#else
  qu = std::string("select lfrsid from ")+
   "lieferschein l join kunden k using (kundennr)"+
   "where k.rechnung_an="+itos(kunde)+" and l.rngid is null and l.instanz="+
	itos(instanz->Id());
#endif
*/
 qu = "select lfrsid from lieferschein l ";
 #ifdef MABELLA_EXTENSIONS
   qu += " where l.kundennr=";
 #else
   qu += " join kunden k using (kundennr) where k.rechnung_an=";
 #endif
 qu += itos(kunde)+" and l.rngid is null and l.instanz="+itos(instanz->Id());

 if(kunde==Rechnung::none_id)
   qu="select lfrsid from lieferschein l where l.rngid is null and l.instanz="
      +itos(instanz->Id());

 QU = (char*)qu.c_str();

 exec sql prepare OFFLCUR from :QU;
 exec sql declare offliefcur cursor for OFFLCUR;

 Transaction tr;
 exec sql open offliefcur;
 SQLerror::test(__FILELINE__":set_tree_offen_content()");

 std::vector<cH_RowDataBase> datavec;
 while(true)
  {
   exec sql fetch offliefcur into :LFRSID;
   SQLerror::test(__FILELINE__": set_tree_offen_content:fetch lfrsid","offliefcur",100);
   if(sqlca.sqlcode==100) break;
   datavec.push_back(new Data_RLieferoffen(cH_Lieferschein(instanz,LFRSID)));
  }
 exec sql close offliefcur;
 tr.close();
 rtree_offen->setDataVec(datavec);
 if(kunde==Rechnung::none_id)  
   rtree_offen->set_tree_column_visibility(Data_RLieferoffen::KUNDE_SEQ,true);
 else 
  {
   rtree_offen->set_tree_column_visibility(Data_RLieferoffen::KUNDE_SEQ,false);
   rtree_offen->Expand_recursively();
  }
// vbox_n_b_lieferscheine->show();
}


void auftrag_rechnung::fill_optionmenu_zahlungsart()
{
 exec sql begin declare section;
   int ID;
   char KB[30];
 exec sql end declare section;
 exec sql declare ROMein cursor for select id,kurzbezeichnung from
   rechnung_zahlungsart order by id;
 Transaction tr;
 exec sql open ROMein;
 SQLerror::test(__FILELINE__);
 Gtk::OStream t_(optionmenu_zahlart);

 while(true)
  {
   exec sql fetch ROMein into :ID,:KB;
   SQLerror::test(__FILELINE__,100);
   if (sqlca.sqlcode) break;
     t_ << KB;
     t_.flush((gpointer)ID);
  }
}

