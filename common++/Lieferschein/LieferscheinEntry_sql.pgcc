/* $Id: LieferscheinEntry_sql.pgcc,v 1.28 2003/03/10 14:44:14 christof Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include"LieferscheinEntry.h"
#include"Lieferschein.h"
#include<Misc/Transaction.h>
#include <Auftrag/AufEintragBase.h>
#include<Auftrag/auftrag_status.h>
#include <unistd.h>
#include<Misc/FetchIStream.h>
#include <Misc/FetchIStream_fixedpoint.h>
exec sql include sqlca;


FetchIStream& operator>>(FetchIStream& is,LieferscheinEntry& z)
{
 is >> z.lieferid >> z.zeilennr >> z.artikel >>  z.stueck>> z.menge >> z.palette >> z.yourauftrag 
     >> z.zusatzinfo >> z.refauftrag ;
 z.instanz=z.refauftrag.Instanz();
 
 if(!z.zusatzinfo) return is;
 std::string zquery="select lyz.instanz,coalesce(lyz.auftragid,"
   +itos(AuftragBase::none_id)+")"
   ",coalesce(lyz.auftragznr,"+itos(AufEintragBase::none_znr)+"),"
   " lyz.menge, "
   "coalesce(youraufnr,'') "
   " from lieferscheinentryzusatz lyz "
  " left join auftrag a on (lyz.instanz,lyz.auftragid) =(a.instanz,a.auftragid) " 
  " where (lyz.instanz,lyz.lfrsid,lyz.lfsznr) = ("
   +itos(z.Instanz()->Id())+","+itos(z.Id())+","+itos(z.Zeile())+") "
   " order by lyz.auftragid,lyz.auftragznr";
 Query(zquery).FetchArray(z.VZusatz);
 return is;  
}

FetchIStream& operator>>(FetchIStream& is,LieferscheinEntry::st_zusatz& z)
{
  return is >> z.aeb /*>> z.stueck*/ >>z.menge >> z.yourauftrag;
}



LieferscheinEntry::LieferscheinEntry(const LieferscheinEntryBase &lsbase)
 throw(SQLerror) : LieferscheinEntryBase(lsbase) 
{
 std::string qstr =
  "select ly.lfrsid, ly.zeile,ly.artikelid,  coalesce(ly.stueck,0), "
  " coalesce(ly.menge,0), coalesce(ly.palette,0), coalesce(youraufnr,''),"
  " coalesce(ly.zusatzinfo,'f'), ly.instanz, "
  " coalesce(ly.refauftragid,"+itos(ManuProcEntity<>::none_id)+"),"
  " coalesce(ly.refzeilennr,"+itos(ManuProcEintrag::none_znr)+")"
  " from lieferscheinentry ly "
  " left join auftrag a on (ly.refauftragid,ly.instanz) = (a.auftragid,a.instanz)"
  " where (ly.instanz,ly.lfrsid,ly.zeile) = ("
   +itos(Instanz()->Id())+","+itos(Id())+","+itos(Zeile())+")"; 
 Query(qstr).FetchOne(*this);
}

LieferscheinEntry LieferscheinEntry::create(const LieferscheinBase &lsb,
	const AufEintragBase &auf, const ArtikelBase &art, int anzahl,
	mengen_t _menge,int _palette, bool _zusatzinfo) throw(SQLerror) 
{
 LieferscheinEntry LE;
 LE.instanz=lsb.Instanz();
 LE.lieferid=lsb.Id();
 LE.artikel=art;
 LE.refauftrag=auf;
 LE.stueck=anzahl;
 LE.menge=_menge;
 LE.palette=_palette;
 LE.zusatzinfo=_zusatzinfo;


//ECPGdebug(true,stdout);
 exec sql begin declare section;
  int INSTANZ=LE.Instanz()->Id();
  int LFRSID=LE.Id();
  int ARTIKELID=LE.Artikel().Id();
  int REFAUFID=LE.RefAuftrag().Id();
  int REFZEILENNR=LE.AufZeile();
  int STK=LE.Stueck();
  int ZEILE;
  float MENGE=LE.Menge().as_float();
  int PALETTE=LE.Palette();
  bool ZUSATZINFO=LE.ZusatzInfo();
 exec sql end declare section;

 Transaction tr;
 
 exec sql lock table lieferscheinentry in exclusive mode;
 SQLerror::test(__FILELINE__":LieferscheinEntry: lock table");
 
 exec sql select coalesce(max(zeile)+1,1) into :ZEILE from lieferscheinentry
	where (instanz,lfrsid)=(:INSTANZ,:LFRSID) ;
 SQLerror::test(__FILELINE__":LieferscheinEntry: select max(zeilennr)");

 exec sql insert into lieferscheinentry 
 		(instanz,lfrsid,zeile,artikelid, refauftragid, refzeilennr, stueck,
		menge,palette,zusatzinfo)
 	values
 		(:INSTANZ,:LFRSID,:ZEILE,:ARTIKELID,nullif(:REFAUFID,0),
 		 nullif(:REFZEILENNR,0),:STK,nullif(:MENGE,0),:PALETTE,:ZUSATZINFO);
 SQLerror::test(__FILELINE__":LieferscheinEntry: insert into lieferscheinentry");

 LE.zeilennr=ZEILE;
 
 tr.commit();
//ECPGdebug(false,stdout);
 return LE;
}


LieferscheinEntry LieferscheinEntry::create(const LieferscheinBase &lsb,
			const ArtikelBase &art, int anzahl,
			mengen_t _menge,int _palette, bool zusatz) throw(SQLerror) 
{  
 return create(lsb,AufEintragBase(lsb.Instanz(),0,0),art,anzahl,_menge,_palette,zusatz);
}

void LieferscheinEntry::deleteEntry(LieferscheinEntry &lse) throw(SQLerror)
{
 lse.changeMenge(0,0);
}


void LieferscheinEntry::setZusatzInfo(const AufEintragBase &AEB,const mengen_t &menge) throw(SQLerror)
{
  std::string Q="insert into lieferscheinentryzusatz (instanz,lfrsid,lfsznr,"
      "auftragid,auftragznr,menge) values ("
      +itos(Instanz()->Id())+","
      +itos(Id())+","
      +itos(Zeile())+","
      +"nullif("+itos(AEB.Id())+","+itos(ManuProcEntity<>::none_id)+"),"
      +"nullif("+itos(AEB.ZNr())+","+itos(ManuProcEintrag::none_znr)+"),"      
      +menge.String()+
      ")";
  Query::Execute(Q);
  SQLerror::test(__FILELINE__);
}

