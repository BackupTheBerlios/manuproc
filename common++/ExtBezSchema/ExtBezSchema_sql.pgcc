// $Id: ExtBezSchema_sql.pgcc,v 1.16 2003/01/08 09:46:56 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <ExtBezSchema/ExtBezSchemaHandle.h>
#include <Misc/Transaction.h>
#include <Misc/itos.h>

exec sql include sqlca;

cH_ExtBezSchema::cache_t cH_ExtBezSchema::cache;

cH_ExtBezSchema::cH_ExtBezSchema(ExtBezSchema::ID eid,const ArtikelTyp &t) throw(SQLerror)
{  cH_ExtBezSchema *cached(cache.lookup(CacheIndex(eid,t)));
   if (cached) *this=*cached;
   else
   {  *this=cH_ExtBezSchema(new ExtBezSchema(eid,t));
      cache.Register(CacheIndex(eid,t),*this);
   }
}

ExtBezSchema::ExtBezSchema(ID eid,const ArtikelTyp &t) throw(SQLerror)
	: typ(t)
{
 exec sql begin declare section;
  char query[1024];
 exec sql end declare section;
 bool IDseen=false; // hack?
 int maxBKT=0;

 std::string squery;
   squery = "select bezkomptype, bezkomptext, coalesce(separator,''), 
 		coalesce(spaltenname,bezkomptext), coalesce(signifikanz,0),
		coalesce(textabformat,'c'),coalesce(jumbo_bez,'')
 	from extbezschema
	where extartbezid= "+itos(eid)+" and artikeltyp="+itos(t)
	+" order by signifikanz,bezkomptype" ;
 strncpy(query,squery.c_str(),sizeof(query));

 Transaction tr;
 exec sql prepare BEZKOMP_ from :query;
 exec sql declare BEZKOMP cursor for BEZKOMP_; 
 exec sql open BEZKOMP;
 SQLerror::test(__FILELINE__"ExtBezSchema::ExtBezSchema");

 extartbezid=eid; 
 int tmp_sig=-1;
 int folgenr_in_sig;

 while(!sqlca.sqlcode)
   {
    exec sql begin declare section;
    int BEZKOMPTYPE[20];
    char BEZKOMPTEXT[20][21];
    char SEPARATOR[20][2];
    char SPALTENNAME[20][21];
    char TEXTABFORMAT[20][10];
    int SIGNIFIKANZ[20];
    char JUMBOBEZ[20][10];
    exec sql end declare section;
    exec sql fetch 20 from BEZKOMP 
	into :BEZKOMPTYPE, :BEZKOMPTEXT, :SEPARATOR,
		:SPALTENNAME, :SIGNIFIKANZ, :TEXTABFORMAT, :JUMBOBEZ ;
    SQLerror::test(__FILELINE__"ExtBezSchema::ExtBezSchema","BEZKOMP",100);
    if(sqlca.sqlcode==100) break;
    unsigned int lines=sqlca.sqlerrd[2];
    for (unsigned int i=0;i<lines;++i)
    {  
	if(tmp_sig!=SIGNIFIKANZ[i])
	  {tmp_sig=SIGNIFIKANZ[i]; folgenr_in_sig=0;}
       bezkomps.push_back(BezKomp(BEZKOMPTYPE[i],BEZKOMPTEXT[i],
    		SEPARATOR[i],SPALTENNAME[i],SIGNIFIKANZ[i],
		folgenr_in_sig++,TEXTABFORMAT[i]));
       if (!IDseen && std::string(SPALTENNAME[i])=="id") IDseen=true;
       if (BEZKOMPTYPE[i]>maxBKT) maxBKT=BEZKOMPTYPE[i];
       if ((std::string)JUMBOBEZ[i]!="") 
       { jumbobez=JUMBOBEZ[i]; 
         jumboindex=BEZKOMPTYPE[i];
       	 jumbotitel=BEZKOMPTEXT[i];
       	 jumbospalte=SPALTENNAME[i];
       }
    }
    if (lines<20) break;
   }
 exec sql close BEZKOMP;
 if (bezkomps.empty()) 
    throw SQLerror(__FILELINE__,100,"Schema leer = nicht vorhanden");
 if (!IDseen) bezkomps.push_back(BezKomp(maxBKT+1,"ID","","id",99,-1,"r"));
}

size_t ExtBezSchema::sigsize(int signifikanz) const
{
  size_t s=0;
  for (const_iterator i=begin(); i!=end();++i)
     if (i->signifikanz == signifikanz) ++s;
  return s;
}
