// $Id: Artikelpreis_sql.pgcc,v 1.12 2003/01/08 09:46:56 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include "Artikel/Artikelpreis.h"
#include <Artikel/ArtikelBezeichnung.h>
#include <Misc/CacheStatic.h>
#include <Artikel/ArtikelBaum.h>
#include <Artikel/Prozesspreis.h>
#include <Misc/Transaction.h>
exec sql include sqlca;


#include <unistd.h>
#include <sys/types.h>


namespace // index_t and payload_t should not be globally visible
{

struct index_t
{  Kunde::ID liste;
   ArtikelBase::ID art;
   index_t(Kunde::ID l, ArtikelBase::ID a) : liste(l), art(a) {} 
   bool operator==(const index_t &b) const 
   { return liste==b.liste && art==b.art; }
   bool operator<(const index_t &b) const 
   { return liste<b.liste || (liste==b.liste && art<b.art); }
};

struct payload_t
{  Preis preis;
   bool errechnet;
   payload_t(const Preis &p,bool e=true)
   	: preis(p), errechnet(e) {}
   payload_t() : errechnet(false) {}
};

typedef CacheStatic<index_t,payload_t> cache_t;

static cache_t cache;

Artikelpreis::Artikelpreis(const PreisListe::ID liste,const ArtikelBase &a)
	: errechnet(false), gefunden(false), gefunden_in(ManuProcEntity<>::none_id)
{  payload_t *cached=cache.lookup(index_t(liste,a.Id()));
   if (cached) { setPreis(a.Id(),cached->preis,liste,cached->errechnet); }
   else
   {  exec sql begin declare section;
      int ARTIKELID=a.Id();
      int kundennr=liste;
      double preis;
      double preismenge;
      int waehrung;
      exec sql end declare section;
      
      exec sql select preis, coalesce(preismenge,1), waehrung
      	into :preis, :preismenge, :waehrung
      	from artikelpreise
      	where artikelid=:ARTIKELID and kundennr=:kundennr;
      SQLerror::test(__FILELINE__,100);
      if (!sqlca.sqlcode) 
         setPreis(ARTIKELID,Preis(preis, Waehrung::ID(waehrung), preismenge),liste,false);
         
      cache.Register(index_t(liste,a.Id()), payload_t(getPreis(),istErrechnet()));
   }
}

void Artikelpreis::UnCache(const PreisListe::ID liste,const ArtikelBase &ab)
{  cache.deregister(index_t(liste,ab.Id()));
};

Artikelpreis::Artikelpreis(const cH_Kunde &k,const ArtikelBase &a)
	: errechnet(false), gefunden(false), gefunden_in(ManuProcEntity<>::none_id)
{  Artikelpreis ap;

   for (std::list<std::pair<int,PreisListe::ID> >::const_iterator i=k->Preislisten().begin();
   	i!=k->Preislisten().end();++i)
   {  ap=Artikelpreis(i->second,a);
      if (ap.Gefunden()) { *this=ap; return; }
   }

   // oder für alle?   	
#ifdef PETIG_EXTENSIONS // errechnen
         Preis p;
         ArtikelBaum AB(a);
         for (ArtikelBaum::const_iterator i=AB.begin(); i!=AB.end(); ++i)
         {  p+= Prozesspreis(k->preisliste(), (*i).erzeugung->Id()) 
         	+ (*i).menge * Artikelpreis(k, (*i).rohartikel);
         }
         setPreis(a.Id(),p,ManuProcEntity<>::none_id,true);
#endif         
}


const Artikelpreis Artikelpreis::create(const PreisListe::ID liste,
		const Preis &p, const ArtikelBase &a,
		std::vector<std::string> ins_all_komp) throw(SQLerror)
{
 exec sql begin declare section;
 int ARTIKELID;
 float PREIS;
 int PREISMENGE;
 int PRLSID;
 int WAEHRUNG;
 int UID;
 exec sql end declare section;


 PREIS=p.Wert().as_float();
 PREISMENGE=p.PreisMenge().as_int();
 PRLSID=liste;
 WAEHRUNG=p.getWaehrung()->Id();


 std::vector<int> to_insert; // Artikel, alter Preis
 std::string query;
 std::string artbez_tabelle;



 if(ins_all_komp.size())
   {cH_ArtikelBezeichnung ab(a);
    cH_ExtBezSchema ebz=ab->getExtBezSchema();
    artbez_tabelle=" artbez_"+itos(ebz->Typ().Id())+"_"+itos(ebz->Id());
    query="select id from "+artbez_tabelle+" where ";
    for(std::vector<std::string>::const_iterator s=ins_all_komp.begin();
	s!=ins_all_komp.end(); ++s)
	{
	 ExtBezSchema::BezKomp bk=(*ebz)[*s];
	   query+=bk.spaltenname+"='"+
	   ab->Komponente(bk.folgenr_in_sig,bk.signifikanz)+"' and ";
	}

    query+=" not exists (select true from artikelpreise p "
	"where "+artbez_tabelle+".id=p.artikelid and p.kundennr="+
	itos(PRLSID)+")";

    to_insert=Query(query).FetchArray<int>();
    
   }
 else
   {
   to_insert.push_back(ARTIKELID);	
   }

 Transaction tr;
 

 
 UID=int(getuid());

 for(std::vector<int>::const_iterator i=to_insert.begin();
	i!=to_insert.end(); ++i)
   {
    ARTIKELID=(*i);

 exec sql insert into preis_change_journal (artikelid,prlsnr,zeitpunkt,
		preis_alt,preis_neu,uid) values
		(:ARTIKELID,:PRLSID,now(),null,:PREIS,:UID);
 SQLerror::test(__FILELINE__);	

 exec sql insert into artikelpreise 
 	(artikelid,kundennr,preis,preismenge,waehrung) values
 	(:ARTIKELID,:PRLSID,:PREIS,:PREISMENGE,:WAEHRUNG);
 SQLerror::test(__FILELINE__);	
 }

 tr.commit();
  
 return Artikelpreis(liste,a);
}


void Artikelpreis::changePreis(const Preis &p) throw(SQLerror)
{
 exec sql begin declare section;
 int ARTIKELID=artikel;
 float PREIS=p.Wert().as_float();
 float PREIS_ALT;
 int PREISMENGE=p.PreisMenge().as_int();
 int PRLSID=gefunden_in;
 int WAEHRUNG=p.getWaehrung()->Id();
 int UID;
 exec sql end declare section;

 if(gefunden_in == PreisListe::none_id) return;

 UID=int(getuid());

 Transaction tr;

 exec sql select preis into :PREIS_ALT from artikelpreise where
	artikelid=:ARTIKELID and kundennr=:PRLSID;
 SQLerror::test(__FILELINE__);	

 exec sql insert into preis_change_journal (select
	artikelid, :PRLSID, now(), preis, :PREIS, :UID from
	artikelpreise where kundennr=:PRLSID and artikelid in 
	(select a.id from artbez_3_1 a join artbez_3_1 b	
	on (	a.artikel=b.artikel and 
		a.breite=b.breite and 
		a.aufmachung=b.aufmachung
		and b.id=:ARTIKELID)
	));
 SQLerror::test(__FILELINE__);	
 
 exec sql update artikelpreise set
 	preis=:PREIS,preismenge=:PREISMENGE,
	waehrung =:WAEHRUNG
	where kundennr=:PRLSID and artikelid in 
	(select a.id from artbez_3_1 a join artbez_3_1 b	
	on (	a.artikel=b.artikel and 
		a.breite=b.breite and 
		a.aufmachung=b.aufmachung
		and b.id=:ARTIKELID)
	);
 SQLerror::test(__FILELINE__);	
 
 tr.commit();
 getPreis()=p;
}



void Artikelpreis::remove(const PreisListe::ID liste,const ArtikelBase &a,
	std::vector<std::string> del_all_komp) throw(SQLerror)
{
 exec sql begin declare section;
  int ARTIKELID=a.Id();
  int PRLSID=liste;
  float PREIS;
  int UID;
 exec sql end declare section;

 UID=int(getuid());

 std::vector<std::pair<int,float> > to_delete; // Artikel, alter Preis
 std::string query;
 std::string artbez_tabelle;



 if(del_all_komp.size())
   {cH_ArtikelBezeichnung ab(a);
    cH_ExtBezSchema ebz=ab->getExtBezSchema();
    artbez_tabelle=" artbez_"+itos(ebz->Typ().Id())+"_"+itos(ebz->Id());
    query="select id,preis from "+artbez_tabelle+" a join artikelpreise p "
	" on (id=artikelid and p.kundennr="+itos(PRLSID)+") where ";
    for(std::vector<std::string>::const_iterator s=del_all_komp.begin();
	s!=del_all_komp.end(); ++s)
	{
	 ExtBezSchema::BezKomp bk=(*ebz)[*s];
	   query+=bk.spaltenname+"='"+
	   ab->Komponente(bk.folgenr_in_sig,bk.signifikanz)+"' and ";
	}
    query+=" true "; // damit am Ende kein einsames "and" stehen bleibt

    to_delete=Query(query).FetchArray< std::pair<int,float> >();
    
   }
 else
   {
   exec sql select preis into :PREIS from artikelpreise where
	artikelid=:ARTIKELID and kundennr=:PRLSID;
   SQLerror::test(__FILELINE__);

   to_delete.push_back(std::pair<int,float>(ARTIKELID,PREIS));	
   }



 Transaction tr;

 for(std::vector<std::pair<int,float> >::const_iterator i=to_delete.begin();
	i!=to_delete.end(); ++i)
   {
    ARTIKELID=(*i).first;
    PREIS=(*i).second;

    exec sql insert into preis_change_journal (artikelid,prlsnr,zeitpunkt,
   		preis_alt,preis_neu,uid) values
   		(:ARTIKELID,:PRLSID,now(),:PREIS,0.0,:UID);
    SQLerror::test(__FILELINE__);	
   	
    exec sql delete from artikelpreise 
   	where kundennr=:PRLSID and artikelid=:ARTIKELID;
    SQLerror::test(__FILELINE__);	
  }

 tr.commit();
 
}

};

FetchIStream &operator>>(FetchIStream &is,std::pair<int,float> &ag)
{  return is >> ag.first >> ag.second;
}



