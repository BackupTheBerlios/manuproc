/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 2002 Adolf Petig GmbH & Co. KG
 *  written by Jacek Jakubowski, Christof Petig, Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include"JumboRolle.h"
#include"Kunde/Kunde.h"
#include <Aux/Transaction.h>
#include <Aux/string0.h>

exec sql include sqlca;

#if defined PETIG_EXTENSIONS && defined MANUPROC_DYNAMICENUMS_CREATED

JumboRolle::JumboRolle(ID c) throw(SQLerror,CodeError)
 : code(c)
{
 if(!isRollNrOK(c)) throw CodeError(c,"JumboRolle::JumboRolle");

 exec sql begin declare section;
 int CODE=c/10;
 int ARTIKELID;
 int MASCHINE,WEBMASCHINE,SOLL_METER;
 int STATUS,LAUF,GANG,BARCOIST;
 char PLANDATUM[11];
 int LAGERPLATZ;
 char VERARB_DATUM[30];
 char BARCOFERT_DATUM[30];
 char WIEDERINSLAGER[30];
/* bool REST; */
 exec sql end declare section;

 exec sql select coalesce(artikelid,0),maschine,coalesce(webmaschine,0)
      ,coalesce(soll_meter,0),
 		plan_datum,coalesce(text(verarb_datum),''),status,lauf,gang,
 		coalesce(barcoist,0),coalesce(text(barcofert_datum),''),
      coalesce(text(wiederinslager),''),coalesce(lagerplatz,0)
 	into :ARTIKELID, :MASCHINE,:WEBMASCHINE,
 	:SOLL_METER,:PLANDATUM,	:VERARB_DATUM,:STATUS,
 	:LAUF,:GANG,:BARCOIST,:BARCOFERT_DATUM,:WIEDERINSLAGER,:LAGERPLATZ
 	from rohjumbo where code= :CODE;
 if(sqlca.sqlcode==100) 
 {  exec sql select coalesce(artikelid,0),maschine,coalesce(webmaschine,0),
      coalesce(soll_meter,0),
 		plan_datum,coalesce(text(verarb_datum),''),status,lauf,gang,
 		coalesce(barcoist,0),coalesce(text(barcofert_datum),''),
      coalesce(text(wiederinslager),'')
 	into :ARTIKELID,:MASCHINE,:WEBMASCHINE,
 	:SOLL_METER,:PLANDATUM,:VERARB_DATUM,:STATUS,
 	:LAUF,:GANG,:BARCOIST,:BARCOFERT_DATUM,:WIEDERINSLAGER
 	from rohjumbo_archiv where code= :CODE;
 }
 SQLerror::test("DB-error: JumboRolle: fetch from rohjumbo");	
 
 artikel=ARTIKELID;
 maschine=MASCHINE;
 webmaschine=WEBMASCHINE;
 sollmeter=SOLL_METER;
 plandatum=ManuProC::Datum(PLANDATUM);
 verarbdatum= !*VERARB_DATUM ? ManuProC::Datum() : ManuProC::Datum(VERARB_DATUM); 
 status=Jumbo_Status(STATUS);
 lauf=LAUF;
 gang=GANG;
 barcoist= BARCOIST;
 barcofertdatum= !*BARCOFERT_DATUM ? ManuProC::Datum(): ManuProC::Datum(BARCOFERT_DATUM);
 wiederinslager= !*WIEDERINSLAGER ? ManuProC::Datum():ManuProC::Datum(WIEDERINSLAGER);
 lagerposition=LagerPlatz(ppsInstanzID::Bandlager,LAGERPLATZ);
}

JumboRolle::JumboRolle(ID _code,int _maschine,const ManuProC::Datum &datum,int _webmaschine,
                 int soll_meter,int _status,int _lauf,int _gang,
                 ArtikelBase::ID artikelid) throw()
   : code(_code), artikel(artikelid), maschine(_maschine), plandatum(datum),
   	webmaschine(_webmaschine), sollmeter(soll_meter), 
   	status(Jumbo_Status(_status)), lauf(_lauf), gang(_gang),
   	barcoist(0), rest(false), lagerposition(ppsInstanzID::Bandlager,0)
{}

JumboRolle::JumboRolle()
   : code(0), maschine(0), webmaschine(0), sollmeter(0), 
   	status(Gedruckt), lauf(0), gang(0),
   	barcoist(0), rest(false), lagerposition(ppsInstanzID::Bandlager,0)
{}

#include <Ketten/KettplanKette.h>

//---- don't ask me ... -------------------
// old code, from Jacek, copied ...
// we need compatibility with the old C programs, so I won't touch it

#define OK              0
#define FAIL            1

#define GENOK           0
#define DBERROR         1

static int ada_rfc_maxcode(int *lastcode)
{  exec sql begin declare section;
   int code = 0;
   int icode;
   exec sql end declare section;
   exec sql whenever sqlerror sqlprint;

   exec sql select max(code) into:code:icode from rohjumbo;
   if (!sqlca.sqlcode)
   {  if (!icode) *lastcode = code;
      else *lastcode = 0;
      return OK;
   }
   return FAIL;
}

static int ada_rfc_getlcode(int *lastcode)
{  exec sql begin declare section;
   int code;
   exec sql end declare section;
   exec sql whenever sqlerror sqlprint;

   exec sql select code into:code from lastcode;
   if (!sqlca.sqlcode)
   {  *lastcode = code;
      return OK;
   }
   return FAIL;
}

static int ada_rfc_setlcode(long lastcode)
{  exec sql begin declare section;
   int code;
   exec sql end declare section;
   exec sql whenever sqlerror sqlprint;

   code = lastcode;
   exec sql update lastcode set code = :code;

   if (sqlca.sqlcode)
      return FAIL;
   return OK;
}

/****************************************
* Liefert den Code der Tatsächlich als  *
* nächster dran wäre.                   *
*****************************************/
static int get_real_code(long *code)
{  int i = 0;

   if (ada_rfc_maxcode(&i) == FAIL) return FAIL;
   *code = (long)(i + 1);
   return OK;
}

/************************************************
* Die Fuktion generiert die naechste Codenummer *
*************************************************/
static int gen_code(unsigned *codep)
{  int hilf;
   long lhilf;

   if (ada_rfc_getlcode(&hilf) == FAIL)
   {  if (get_real_code(&lhilf) == FAIL) return DBERROR;
      else if (ada_rfc_setlcode(++lhilf) == FAIL) return DBERROR;
      *codep = lhilf-1;
   }
   else
   {  if (ada_rfc_setlcode((long)(++hilf)) == FAIL) return DBERROR;
      *codep = (long)hilf-1;
   }
   return OK;
}

// erzeugt einen ganzen Satz von Etiketten
vector<JumboRolle> JumboRolle::create(const KettplanKette &k,bool rest)
{  vector<JumboRolle> res;
   exec sql begin declare section;
   char datum[20];
   int maschine=k.Maschine();
   int lauf;
   int gang=0;
   exec sql end declare section;
   k.Schaerdatum().write_postgres(datum,sizeof datum);
   
   Transaction tr;
   exec sql lock table rohjumbo in exclusive mode;
   exec sql lock table lastcode in exclusive mode;

   exec sql select coalesce(max(lauf)+1,1) into :lauf
   	from rohjumbo 
   	where maschine=:maschine and plan_datum=:datum;
   
   const std::vector <ArtikelGang> ag=k.get_artikel_sorted();
   for (std::vector <ArtikelGang>::const_iterator i=ag.begin();
   		i!=ag.end();++i)
   {  for (int j=1;j<=i->Gaenge();++j)
      {  exec sql begin declare section;
         unsigned int code, artikelid=i->Id();
         int webmaschine=k.WebMaschine(),
             soll_meter=rest?0:k.Stuecklaenge(),
             status=Gedruckt;
         exec sql end declare section;
         ++gang;
         
         if (gen_code(&code)==FAIL) 
            throw SQLerror("JumboRolle::create",-1,"gen_code failed");
         exec sql insert into rohjumbo
         	(code, maschine, plan_datum, webmaschine, soll_meter, 
         	 status, lauf, gang, artikelid)
         	VALUES (:code, :maschine, :datum, :webmaschine, :soll_meter,
         	 :status, :lauf, :gang, :artikelid);
         SQLerror::test(__FILELINE__);
         res.push_back(JumboRolle(JumboRolle::Pruefziffer_anhaengen(code),
         	maschine,datum,webmaschine,
         	soll_meter,status,lauf,gang,artikelid));
      }
   }
   tr.commit();
   return res;
}

#endif
