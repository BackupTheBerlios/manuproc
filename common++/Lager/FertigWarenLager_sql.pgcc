/*  pps: ManuProC's production planning system
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "FertigWarenLager.h"
#include <Artikel/ArtikelBase.h>
#include <Artikel/ArtikelBezeichnung.h>
#include <Aux/Datum.h>
#include <Aux/string0.h>
exec sql include sqlca;
#include <Aux/SQLerror.h>
#include <Aux/Transaction.h>
#include <Aux/itos.h>


std::pair<Zeitpunkt_new,int> FertigWarenLager::letzteInventur()
{
  exec sql begin declare section;
    char ZEIT[32];
    int ARTIKEL=Artikel().Id();   
    char AKTION[2];
    int BESTAND=0;
  exec sql end declare section;
  AKTION[0]=FertigWaren::eInventur; AKTION[1]=0;
  
  exec sql select datum, bestand into :ZEIT,:BESTAND 
	from fw_lager_buchung where datum = (select max(datum) from
		fw_lager_buchung where
	aktion= :AKTION and artikelid= :ARTIKEL)
	and artikelid = :ARTIKEL;

  SQLerror::test("FertigWaren::letzteInventur",100);
  if(sqlca.sqlcode==100)  
   {
      Zeitpunkt_new oldDate(ManuProC::Datum(1,1,1970));// ganz altes Datum
      return std::pair<Zeitpunkt_new,int>(oldDate,0);
   }
  return std::pair<Zeitpunkt_new,int>(Zeitpunkt_new(ZEIT),BESTAND);
} 



int FertigWarenLager::Bestand(ManuProC::Datum date)
{
  exec sql begin declare section;
    char MINZEIT[32],MAXZEIT[32];
    int ARTIKEL=Artikel().Id();
    int STK=0;
  exec sql end declare section;

  Transaction tr;

  std::pair<Zeitpunkt_new,int> inventur=letzteInventur();

//  exec sql lock table auftragentry in exclusive mode;
//  SQLerror::test(__FILELINE__); 

  inventur.first.write(PostgresTimestamp(MINZEIT,sizeof MINZEIT));
  date.write_postgres(MAXZEIT,sizeof MAXZEIT);

  exec sql select coalesce(sum(menge),0) into :STK
    from fw_lager_buchung where artikelid=:ARTIKEL and 
      datum > :MINZEIT and datum <= datetime(date(:MAXZEIT),'23:59:59')
	and aktion != 'I';
  tr.close();
  return STK + inventur.second ;
}


