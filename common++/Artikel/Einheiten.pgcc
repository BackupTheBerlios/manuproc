// $Id: Einheiten.pgcc,v 1.21 2005/11/22 13:04:29 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 2001 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

exec sql include sqlca;

#include <Artikel/Einheiten.h>
#include <Artikel/ArtikelStamm.h>
#include <Misc/SQLerror.h>
#include <Misc/Transaction.h>
#include <Misc/ExtraColumns.h>
#include <Misc/i18n.h>

Einheit::cache_t Einheit::cache;

Einheit::Einheit(const ArtikelBase &ab) throw(SQLerror)
{   *this=ArtikelStamm(ab).getEinheit();
}

Einheit::operator std::string() const
{  std::string a=StueckEinheit(),
	b=MengenEinheit();
   if (!a.empty() && !b.empty()) 
   {  if (a=="St.") return b;
      return a+"*"+b;
   }
   return a+b;
}



std::string Einheit::TeX(const MultiL_Dict &mld) const
{  std::string a=StueckEinheit_TeX(),
	b=MengenEinheit_TeX();
   if (!a.empty() && !b.empty()) 
   {  if (a=="St.")
	{
	 return b;
	}
      return a+"$\\times$"+b;
   }

 if(mld.valid() && a=="St.")
   a=const_cast<MultiL_Dict&>(mld).MLT(MultiL_Dict::TXT_STUECK);
 return a+b;
}

Einheit::Einheit(ID id) : einh(id)
{  Einheit *cached=cache.lookup(id);
   if (cached) *this=*cached;
   else
   { try
     { ExtraColumns at("einheiten","id");
       std::string what="bez_anzahl,tex_anzahl,bez_menge,tex_menge";
       if (at.hasColumn("textid")) what+=",textid";
       Query q("select "+what+" from einheiten where id=?");
       q << id;
       Query::Row r=q.Fetch();
       r >> Query::Row::MapNull(bez_anzahl);
       r >> Query::Row::MapNull(tex_anzahl,bez_anzahl);
       r >> Query::Row::MapNull(bez_menge);
       r >> Query::Row::MapNull(tex_menge,bez_menge);
       if (at.hasColumn("textid")) 
         r >> Query::Row::MapNull(textid);
       r >> Query::check_eol();
       bez_anzahl=dbgettext(bez_anzahl);
       tex_anzahl=dbgettext(tex_anzahl);
       bez_menge=dbgettext(bez_menge);
       tex_menge=dbgettext(tex_menge);
     } catch (SQLerror &e) {}

      cache.Register(id,*this);
   }
}


std::vector<Einheit> Einheit::alleEinheiten()
{
 std::vector<Einheit> V;
 exec sql begin declare section;
   int db_id;
 exec sql end declare section;
 exec sql declare einheitc cursor for 
   select id from einheiten;
 Transaction tr;
 exec sql open einheitc;
 while(true)
  {
   exec sql fetch einheitc into :db_id;
   SQLerror::test(__FILELINE__, 100);
   if (sqlca.sqlcode) break;
   V.push_back(Einheit(Einheit::ID(db_id)));
  }
 return V;
}



