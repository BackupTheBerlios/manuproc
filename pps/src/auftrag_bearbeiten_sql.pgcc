// $Id: auftrag_bearbeiten_sql.pgcc,v 1.18 2006/08/09 15:36:51 christof Exp $
/*  pps: ManuProC's production planning system
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include"auftrag_bearbeiten.hh"

exec sql include sqlca;


void auftrag_bearbeiten::on_aufnrscombo_search(
		int *_continue, GtkSCContext newsearch)
throw(SQLerror)
{
 exec sql begin declare section;
 int AUFID;
 char AUFIDCHR[10];
 char *PAT;
 int KUNDE;
 int INSTANZ=instanz->Id();
 char *DATUM=0;
 exec sql end declare section;
 static Transaction tr("",false);
 KUNDE= kundenbox->get_value();
  
 switch(newsearch)
   {
    case GTK_SEARCH_OPEN :
      {
       std::string pat = aufnr_scombo->get_text() + "%";
       PAT = (char*)pat.c_str();

       tr.open();       
                   
       exec sql declare AUFNR_CURSOR cursor for
       		select auftragid, ltrim(to_char(auftragid,'000000')),
       		date(datum)
       		from auftrag where
       		ltrim(to_char(auftragid,'000000')) like :PAT
                and (:KUNDE<1 or kundennr=:KUNDE)
                and instanz = :INSTANZ
		and auftragid not in (0,1,2)
       		order by datum desc;
       	
       exec sql open AUFNR_CURSOR;
       SQLerror::test(__FILELINE__":on_aufnrscombo_search: open cursor");
      } 							
           
  case GTK_SEARCH_FETCH :
       {
        exec sql fetch AUFNR_CURSOR into :AUFID, :AUFIDCHR, :DATUM;
	SQLerror::test(__FILELINE__":on_aufnrscombo_search: "
			" fetch","AUFNR_CURSOR",100);
			
	if(sqlca.sqlcode==100){*_continue=false; break; }
	
	ExtraColumns ec("auftrag","instanz","auftragid");
	ec << INSTANZ << AUFID;
	std::string label;
	if(ec.hasColumn("label"))
	   Query("select kurz from auftrag_label where alid=?")
	     << ec.get<int>("label") >> label;
	
	aufnr_scombo->add_item(std::string(AUFIDCHR)+
	              " "+(label.empty()?"          ":label)+" "+DATUM,AUFID);
	*_continue=true;
        break;
       }
 
  case GTK_SEARCH_CLOSE :
       {exec sql close AUFNR_CURSOR;
	tr.commit();
	break;
       }

  }
}


void auftrag_bearbeiten::on_youraufnrscombo_search(
		int *_continue, GtkSCContext newsearch)
throw(SQLerror)
{
 exec sql begin declare section;
 int AUFID;
 int INSTANZ=instanz->Id();
 char YOURAUFID[21];
 char *PAT;
 int KUNDE;
// int UNIQUE_KUNDENNR;
 exec sql end declare section;
 static Transaction tr("",false);
 KUNDE= kundenbox->get_value();

 if(newauftrag) {
    if(_continue!=NULL)	
      *_continue=false; 
    return;
    }  

 switch(newsearch)
   {
    case GTK_SEARCH_OPEN :
      {
       std::string pat = youraufnr_scombo->get_text() + "%";
       PAT = (char*)pat.c_str();
       
       tr.open();
       exec sql declare YOURAUFNR_CURSOR cursor for
       		select auftragid, youraufnr
       		from auftrag where
       		youraufnr like :PAT
                and (:KUNDE<1 or kundennr=:KUNDE)
                and instanz=:INSTANZ
       		order by youraufnr;
       	
       exec sql open YOURAUFNR_CURSOR;
       SQLerror::test(__FILELINE__":on_youraufnrscombo_search: open cursor");
      } 							
           
  case GTK_SEARCH_FETCH :
       {

        exec sql fetch YOURAUFNR_CURSOR into :AUFID, :YOURAUFID;
//		:UNIQUE_KUNDENNR;
	SQLerror::test(__FILELINE__":on_youraufnrscombo_search: "
			" fetch cursor YOURAUFNR_CURSOR",100);
			
	if(sqlca.sqlcode==100){*_continue=false; break; }
	
//	std::string yaufid(YOURAUFID);
//	yaufid+=" ( "+itos(UNIQUE_KUNDENNR)+" )";

	youraufnr_scombo->add_item(YOURAUFID,AUFID);
	*_continue=true;
//	ECPGfree_auto_mem();
        break;
       }
 
  case GTK_SEARCH_CLOSE :
       {
	exec sql close YOURAUFNR_CURSOR;
	tr.commit();
	break;
       }

  }
   
}


void ArtBestandData(const ArtikelBase::ID aid, int &off,
	int &bestand, int &verfuegbar) throw(SQLerror)
{
 Query q1("SELECT sum(coalesce(bestellt-geliefert,0)) as offen "
	  "from auftrag a join  auftragentry e "
	" on (a.instanz=e.instanz and a.instanz=1 and "
	" a.auftragid=e.auftragid and a.stat=e.status and "
	" e.status=1 and  e.bestellt>e.geliefert and e.artikelid=?)");
 q1 << aid >> Query::Row::MapNull(off,0);
 SQLerror::test(__FILELINE__);

 Query q("select l.bestand as bestand from artikel_bestand l "
	 "where l.artikelid=?");
 q << aid >> Query::Row::MapNull(bestand,0);
 SQLerror::test(__FILELINE__);

 verfuegbar=bestand-off;
}




