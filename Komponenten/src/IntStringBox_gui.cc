/*  libKomponenten: GUI components for ManuProC's libcommon++
 *  Copyright (C) 2001 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// generated 2001/2/12 17:15:08 CET by christof@puck.(none)
// using guimm V0.5_11e
//
// DO NOT EDIT THIS FILE ! It was created using
// gui-- Komponenten.gui
// for gtk 1.2.8 and gtkmm 1.2.4
//

#include "IntStringBox.hh"

IntStringBox_gui::IntStringBox_gui() 
: menu(0)
{   
   table = manage(new Gtk::Table(2, 2, false));
   label_int = manage(new Gtk::Label("Int"));
   label_string1 = manage(new Gtk::Label("Name1"));
   label_string2 = manage(new Gtk::Label("Name2"));
   sc_int = new SearchCombo();
   sc1_string = new SearchCombo();
   sc2_string = new SearchCombo();
   label_int->set_name("label_int");
   label_int->set_alignment(0.5, 0.5);
   label_int->set_padding(0, 0);
   label_string1->set_name("label_string");
   label_string1->set_alignment(0.5, 0.5);
   label_string1->set_padding(0, 0);
   label_string2->set_name("label_stringz");
   label_string2->set_alignment(0.5, 0.5);
   label_string2->set_padding(0, 0);
   sc_int->set_usize(80, 16);
   sc_int->set_name("sc_int");
   sc1_string->set_usize(150, 16);
   sc1_string->set_name("sc1_string");
   sc2_string->set_usize(150, 16);
   sc2_string->set_name("sc2_string");
   set_name("IntStringBox");
   table->attach(*label_int, 0, 1, 0, 1, 0, 0, 0, 0);
   table->attach(*label_string1, 1, 2, 0, 1, 0, 0, 0, 0);
   table->attach(*label_string2, 2, 3, 0, 1, 0, 0, 0, 0);
   table->attach(*sc_int, 0, 1, 1, 2, GTK_FILL, 0, 0, 0);
   table->attach(*sc1_string, 1, 2, 1, 2, GTK_EXPAND|GTK_SHRINK|GTK_FILL, 0, 0, 0);
   table->attach(*sc2_string, 2, 3, 1, 2, GTK_EXPAND|GTK_SHRINK|GTK_FILL, 0, 0, 0);

   sc_int->activate.connect(SigC::slot(static_cast<class IntStringBox*>(this), &IntStringBox::int_activate));
   sc_int->search.connect(SigC::slot(static_cast<class IntStringBox*>(this), &IntStringBox::int_search));
   sc1_string->activate.connect(SigC::slot(static_cast<class IntStringBox*>(this), &IntStringBox::string1_activate));
   sc1_string->search.connect(SigC::slot(static_cast<class IntStringBox*>(this), &IntStringBox::string1_search));
   sc2_string->activate.connect(SigC::slot(static_cast<class IntStringBox*>(this), &IntStringBox::string2_activate));
   sc2_string->search.connect(SigC::slot(static_cast<class IntStringBox*>(this), &IntStringBox::string2_search));

   fuelleMenu();
   add(*table);
//   sc2_string->show();
//   table->show_all();
   show_all();
}

void IntStringBox_gui::fuelleMenu()
{
  if (menu)   
    {  menu->destroy();
       menu=0;
    }
  menu=new Gtk::Menu();
  Gtk::MenuItem *zurueck = manage(new class Gtk::MenuItem("Zurücksetzen"));                  
  zurueck->activate.connect(SigC::slot(this,&IntStringBox_gui::reset));
  menu->append(*zurueck);
  menu->show_all();
  this->button_press_event.connect(SigC::slot(this,&IntStringBox_gui::MouseButton));
}

gint IntStringBox_gui::MouseButton(GdkEventButton *event)
{
  if ((event->type == GDK_BUTTON_PRESS) && menu)
   {  menu->popup(event->button,event->time);
      return true;
   }
  return false;
}



IntStringBox_gui::~IntStringBox_gui()
{ 
   delete sc_int;
   delete sc1_string;
   delete sc2_string;
}
