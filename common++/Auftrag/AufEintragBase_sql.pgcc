// $Id: AufEintragBase_sql.pgcc,v 1.26 2002/06/27 07:42:50 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Auftrag/AufEintragBase.h>
#include "AufEintrag.h"
#include <Aux/Transaction.h>
#include <Auftrag/auftrag_status.h>
#include <Auftrag/AuftragsBaum.h> 
#include <Aux/Changejournal.h>
#include <Auftrag/AufEintragZu.h>
#ifdef MABELLA_EXTENSIONS
#include<Lager/FertigWaren.h>
#include<Artikel/ArtikelBase.h>
#endif

exec sql include sqlca;

void AufEintragBase::setVerarbeitung(const cH_Prozess p) const throw(SQLerror)
{
 assert (Instanz()==ppsInstanzID::Kundenauftraege);
 exec sql begin declare section;
  int AUFTRAGID=Id();
  int INSTANZ=InstanzID();
  int ZEILENNR=ZNr();
  int PROZESSID;
 exec sql end declare section;
 PROZESSID=p->getProzessID();
 
 Transaction tr;
 
 exec sql update auftrag_prozess 
 	set prozessid= :PROZESSID, datum= now() 
 	where (instanz,auftragid,zeilennr) = (:INSTANZ,:AUFTRAGID,:ZEILENNR);
 SQLerror::test("Prozessaktualisierung (1) ",100);
 
 if((sqlca.sqlcode==100) || sqlca.sqlerrd[2]==0)
   {
    exec sql insert into auftrag_prozess 
      (instanz,auftragid,zeilennr,prozessid,datum)
      values
    	(:INSTANZ, :AUFTRAGID, :ZEILENNR, :PROZESSID, now());
    SQLerror::test("Prozessaktualisierung (2)");
   }
 tr.commit();
}


bool AufEintragBase::deleteAuftragEntry() const throw(SQLerror)
{
 // Kundenaufträge DÜRFEN NICHT gelöscht werden !!!
 assert (InstanzID()!=ppsInstanzID::Kundenauftraege) ;

 // Testen, ob dieser Auftrag Kinder hat, wenn ja, dann darf dieser 
 // Auftrag NICHT gelöscht werden
 AuftragsBaum AB(*this,true);
 if(!AB.empty()) return false;

 Transaction tr;
 exec sql begin declare section;
 int AUFTRAGID=auftragid;
 int ZEILENNR=zeilennr;
 int INSTANZ=InstanzID();
 exec sql end declare section;
 // Löschen aus Auftragszuordnung
 exec sql delete from auftragsentryzuordnung 
 	where (neuinstanz,neuauftragid,neuzeilennr)
 		=(:INSTANZ,:AUFTRAGID,:ZEILENNR);
 SQLerror::test(__FILELINE__+(std::string)" DELETE AUFTRAG 1");

 // Löschen aus Auftragentry
 exec sql delete from auftragentry 
 	where (instanz,auftragid,zeilennr)=(:INSTANZ,:AUFTRAGID,:ZEILENNR);
 SQLerror::test(__FILELINE__+(std::string)" DELETE AUFTRAG 2");
 tr.commit();
 return true;
}

void AufEintragBase::setLetztePlanungFuer(cH_ppsInstanz planinstanz) const throw(SQLerror)
{
//cout << "Instanz: "<<planinstanz<<'\n';
 assert (Instanz()==ppsInstanzID::Kundenauftraege);

 if(planinstanz->LagerInstanz()) return;

 exec sql begin declare section;
  int AUFTRAGID=Id();
  int ZEILENNR=ZNr();
  int INSTANZ=InstanzID();
  int PLANUNG=planinstanz->Id();
  int PROZESSID=planinstanz->get_Prozess()->Id();
 exec sql end declare section;
 Transaction tr;
 
 exec sql update auftrag_prozess set letzteplaninstanz= :PLANUNG,
   maxPlanInstanz=null, datum= now() 
   where (instanz,auftragid,zeilennr) = (:INSTANZ,:AUFTRAGID,:ZEILENNR) ;
 SQLerror::test("Prozessaktualisierung",100);

 if((sqlca.sqlcode==100) || sqlca.sqlerrd[2]==0)
   {
    exec sql insert into auftrag_prozess 
        (instanz,auftragid,zeilennr,prozessid,letztePlanInstanz)
      values
    	(:INSTANZ,:AUFTRAGID,:ZEILENNR,:PROZESSID,:PLANUNG);
    SQLerror::test("Prozessaktualisierung");
   }
 tr.commit();
}

void AufEintragBase::setMaxPlanInstanz(int anzahl_maxplaninstanzen) const throw(SQLerror)
{
 exec sql begin declare section;
  int AUFTRAGID=Id();
  int ZEILENNR=ZNr();
  int INSTANZ=InstanzID();
  int PLANUNG=anzahl_maxplaninstanzen;
 exec sql end declare section;

 Transaction tr;
 
 exec sql update auftrag_prozess set maxPlanInstanz= :PLANUNG,
   datum= now() 
   where (instanz,auftragid,zeilennr) = (:INSTANZ,:AUFTRAGID,:ZEILENNR);
 SQLerror::test("Prozessaktualisierung",100);
 // Wenn die Zeile nicht da ist, dann auch nichts eintragen

 tr.commit();
}

void AufEintragBase::setLetzteLieferung(const ManuProC::Datum &datum) const throw(SQLerror)
{
exec sql begin declare section;
 int AUFTRAGID = auftragid;
 int ZEILENNR = zeilennr;  
 int INSTANZ=instanz->Id();
 char DATUM[21];
 exec sql end declare section;
 datum.write_postgres(DATUM,sizeof DATUM);

 exec sql update auftragentry  
   set letzte_lieferung= :DATUM
   where (instanz,auftragid,zeilennr)=(:INSTANZ,:AUFTRAGID,:ZEILENNR);
 SQLerror::test(__FILELINE__" setLetzeLieferung");
}


AuftragBase::mengen_t AufEintragBase::updateStkDiffBase__(int uid,mengen_t menge) const throw(SQLerror)
{
 exec sql begin declare section;
 int AUFTRAGID = Id();
 int INSTANZ=instanz->Id();
 int ZEILENNR = ZNr();  
 double MENGE = menge;
 double OLDMENGE;
 double NEWMENGE;
 int ARTIKELID;
 int UID=uid;
 exec sql end declare section;

 Transaction tr;

 exec sql select bestellt,artikelid into :OLDMENGE,:ARTIKELID from auftragentry 
      where (instanz,auftragid,zeilennr) = (:INSTANZ,:AUFTRAGID,:ZEILENNR);

// Sicherstellen, daß keine negativen Mengen bestellt werden
    if((MENGE < 0) && OLDMENGE < -MENGE) 
      { 
        MENGE = -OLDMENGE;
      }

 NEWMENGE=OLDMENGE+MENGE;
//cout <<"\n\n"<<*this<<" AEB => "<< menge<<' '<<MENGE<<' '<<OLDMENGE<<' '<<NEWMENGE<<'\n';
 exec sql update auftragentry set bestellt= :NEWMENGE,lasteditdate=now(),
   lastedit_uid=:UID
   where (instanz,auftragid,zeilennr) = 
	(:INSTANZ,:AUFTRAGID,:ZEILENNR);
 SQLerror::test("updateStkDiff: update stk in auftragentry");

 pps_ChJournalEntry::newChange(
	instanz, *this,ARTIKELID,NEWMENGE,MENGE,pps_ChJournalEntry::CH_MENGE);

 tr.commit(); 
 return MENGE;
}

