/*  libKomponenten: GUI components for ManuProC's libcommon++
 *  Copyright (C) 2001 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

// generated 2001/3/14 12:16:07 CET by christof@puck.(none)
// using glademm V0.5_11f_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- marc.glade
// for gtk 1.2.8 and gtkmm 1.2.4
//
// Please modify the corresponding derived classes in ./marc2/window1.cc

#include "config.h"
#include "window1.hh"
#include <gtk--/list.h>
#include <gtk--/menu.h>
#include <gtk--/menubar.h>
#include <gtk--/button.h>
#include <gtk--/label.h>

window1_glade::window1_glade(
) : Gtk::Window(GTK_WINDOW_TOPLEVEL)
{   
   
   Gtk::Window *window1 = this;
   Gtk::MenuItem *Beenden = manage(new class Gtk::MenuItem("Beenden"));
   Gtk::Menu *menu1 = manage(new class Gtk::Menu());
   Gtk::MenuItem *Datei = manage(new class Gtk::MenuItem("Datei"));
   Gtk::MenuBar *menubar1 = manage(new class Gtk::MenuBar());
   Gtk::Button *button1 = manage(new class Gtk::Button("Show contents"));
   Gtk::Label *label1 = manage(new class Gtk::Label("Some label to demonstrate pack_end"));
   datum = new class Datewin();
   prozess = new class ProzessBox();
   artikelbox = new class ArtikelBox(cH_ExtBezSchema(1,ArtikelTyp::GewebtesBand));
   kundenbox = new class KundenBox();
   
   Gtk::Button *button2 = manage(new class Gtk::Button("reset"));
   vbox1 = manage(new class Gtk::VBox(false, 0));
   menu1->append(*Beenden);
   Datei->set_submenu(*menu1);
   menubar1->append(*Datei);
   label1->set_alignment(0.5, 0.5);
   label1->set_padding(0, 0);
   datum->set_usize(-1, 20);
   prozess->set_usize(-1, 20);
   artikelbox->set_usize(-1, 50);
   kundenbox->set_usize(-1, 40);
   vbox1->pack_start(*menubar1, false, true, 0);
   vbox1->pack_end(*button1, false, false, 0);
   vbox1->pack_end(*label1, false, false, 0);
   vbox1->pack_start(*datum);
   vbox1->pack_start(*prozess);
   vbox1->pack_start(*artikelbox);
   vbox1->pack_start(*kundenbox);
   vbox1->pack_start(*button2, false, false, 0);
   window1->set_title("window1");
   window1->set_policy(true, true, false);
   window1->add(*vbox1);
   Beenden->show();
   menu1->show();
   Datei->show();
   menubar1->show();
   button1->show();
   label1->show();
   datum->show();
   prozess->show();
   artikelbox->show();
   kundenbox->show();
   button2->show();
   vbox1->show();
   window1->show();
   Beenden->activate.connect(SigC::slot(static_cast<class window1*>(this), &window1::on_Beenden_activate));
   button1->clicked.connect(SigC::slot(static_cast<class window1*>(this), &window1::on_show_clicked));
   datum->activate.connect(prozess->grab_focus.slot());
   prozess->activate.connect(artikelbox->grab_focus.slot());
   artikelbox->activate.connect(SigC::slot(static_cast<class window1*>(this), &window1::on_show_complete));
   kundenbox->activate.connect(SigC::slot(static_cast<class window1*>(this), &window1::andererKunde));
   button2->clicked.connect(SigC::slot(static_cast<class window1*>(this), &window1::on_reset));
}

window1_glade::~window1_glade()
{   delete datum;
   delete prozess;
   delete artikelbox;
   delete kundenbox;
}
