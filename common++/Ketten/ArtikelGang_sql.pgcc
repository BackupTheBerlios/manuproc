/* $Id: ArtikelGang_sql.pgcc,v 1.10 2002/11/22 15:31:05 christof Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Malte Thoma
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <Ketten/ArtikelGang.h>
#include <Aux/Transaction.h>

exec sql include sqlca;


std::vector<KettenGarn> ArtikelGang::load_Garn(int kettlaenge) const
{
 exec sql begin declare section;
  int ARTIKEL=Id();
  int GAENGE=Gaenge();
  int FAEDEN, GARN,ZEILE,KETTEN,INDEX,LAENGE;
  int DEFAUTLAENGE=kettlaenge;
  char WIEDERHOLUNG[10];
 exec sql end declare section;
 Transaction tr;
 exec sql declare garnein cursor for select  faeden,garn,ketten,zeile,
   ketten_index,coalesce(laenge,:DEFAUTLAENGE),
   coalesce(wiederholung,'')
   from ketten_garn where artikel=:ARTIKEL and gaenge=:GAENGE
   order by ketten_index,zeile ;
 exec sql open garnein;
 std::vector<KettenGarn> v;
 while (true)
  {
    exec sql fetch garnein into :FAEDEN,:GARN,:KETTEN,:ZEILE,:INDEX,
      :LAENGE,:WIEDERHOLUNG ;
    SQLerror::test(__FILELINE__,100);
    if (sqlca.sqlcode) break;
    v.push_back(KettenGarn(INDEX,ZEILE,KETTEN,FAEDEN,GARN,LAENGE,WIEDERHOLUNG));
    kettscheiben.push_back(Kettscheibe(INDEX));
  }
 kettscheiben.sort();
 kettscheiben.unique();
 return v;
}

