// $Id: ExtBezSchema_sql.pgcc,v 1.24 2005/10/20 12:57:23 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2003 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include <ExtBezSchema/ExtBezSchemaHandle.h>
#include <Misc/Transaction.h>
#include <Misc/itos.h>
#include <Misc/FetchIStream.h>

cH_ExtBezSchema::cache_t cH_ExtBezSchema::cache;

cH_ExtBezSchema::cH_ExtBezSchema(ExtBezSchema::ID eid,const ArtikelTyp &t) throw(SQLerror)
{  cH_ExtBezSchema *cached(cache.lookup(CacheIndex(eid,t)));
   if (cached) *this=*cached;
   else
   {  *this=cH_ExtBezSchema(new ExtBezSchema(eid,t));
      cache.Register(CacheIndex(eid,t),*this);
   }
}

FetchIStream &operator>>(FetchIStream &is, MultiL_Dict::LangTXT &x)
{  x = MultiL_Dict::LangTXT(is.Fetch<int>());
   return is;
}

FetchIStream &operator>>(FetchIStream &is, ExtBezSchema::BezKomp &b)
{  is >> b.bezkomptype >> b.bezkomptext 
	>> FetchIStream::MapNull(b.separator,"") 
	>> b.spaltenname
	>> FetchIStream::MapNull(b.signifikanz,0) 
	>> FetchIStream::MapNull(b.preissignifikant,false) 
	>> FetchIStream::MapNull(b.TeXtabformat,"c");
#ifndef PETIG_EXTENSIONS
   is >> FetchIStream::MapNull(b.textid,(MultiL_Dict::LangTXT)0);
#endif
   return is;
}

ExtBezSchema::ExtBezSchema(ID eid,const ArtikelTyp &t) throw(SQLerror)
	: extartbezid(eid), typ(t)
{
 bool IDseen=false; // hack?
 int maxBKT=0;
 int tmp_sig=-1;
 int folgenr_in_sig=0;

 Query q("select bezkomptype,bezkomptext,separator,"
 	    "coalesce(spaltenname,bezkomptext),signifikanz,"
	    "preis_signifikant,"
	    "textabformat "
#ifndef PETIG_EXTENSIONS
	    ",textid "
#else
	    ",jumbo_bez "
#endif
 	"from extbezschema "
	"where (extartbezid,artikeltyp)=(?,?) "
	"order by signifikanz,bezkomptype");
 q << eid << int(t);
 FetchIStream is;
 q.ThrowOnBad(__FUNCTION__);
 while ((q>>is).good()) 
 {  BezKomp komp;
    is >> komp;
    if(tmp_sig!=komp.signifikanz) 
    {  tmp_sig=komp.signifikanz; folgenr_in_sig=0; }
    komp.folgenr_in_sig=folgenr_in_sig++;
    bezkomps.push_back(komp);
    
    if (!IDseen && komp.spaltenname=="id") IDseen=true;
    if (komp.bezkomptype>maxBKT) maxBKT=komp.bezkomptype;
#ifdef PETIG_EXTENSIONS    
    std::string jumbobez_t= is.FetchMap<std::string>(std::string());
    if (!jumbobez_t.empty()) 
    {  jumbobez=jumbobez_t; 
       jumboindex=komp.bezkomptype;
       jumbotitel=komp.bezkomptext;
       jumbospalte=komp.spaltenname;
    }
#endif
    is.ThrowIfNotEmpty(__FUNCTION__);
 }
       
 if (bezkomps.empty()) 
    throw SQLerror(__FILELINE__,100,"Schema leer = nicht vorhanden");
 if (!IDseen) bezkomps.push_back(BezKomp(maxBKT+1,"ID","","id",99,-1,"r",
		(MultiL_Dict::LangTXT)0));
}

size_t ExtBezSchema::sigsize(int signifikanz) const
{
  size_t s=0;
  for (const_iterator i=begin(); i!=end();++i)
     if (i->signifikanz == signifikanz) ++s;
  return s;
}

size_t ExtBezSchema::psigsize(bool psig) const
{
  size_t s=0;
  for (const_iterator i=begin(); i!=end();++i)
     if (i->preissignifikant==psig) ++s;
  return s;
}

const ExtBezSchema::ID ExtBezSchema::default_id;
