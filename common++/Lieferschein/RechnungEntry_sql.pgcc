/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 2001 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include"RechnungEntry.h"
#include"Rechnung.h"
#include<Misc/Transaction.h>
#include <Auftrag/AufEintrag.h>
exec sql include sqlca;

std::map<int,struct RechnungEntryBase::rng_payoff> RechnungEntryBase::rgdata;

RechnungEntry::RechnungEntry(const RechnungEntryBase& rechnung)
throw(SQLerror)	:RechnungEntryBase(rechnung)
{
 exec sql begin declare section;
   int ARTIKELID, STUECK, LFRSID, LFRSZN;
   float PREISMENGE;
   float MENGE;
   float PREIS;
   int AUFTRAGID;
   char LIEFERDATUM[21];
   int INSTANZ, RNGID=rechnung.Id(), ZEILENNR=rechnung.Zeile();
   float RABATT;
   int INVALID_REFAUFTRAGID;
 exec sql end declare section;
 INSTANZ=ppsInstanzID::Kundenauftraege;
 INVALID_REFAUFTRAGID=AuftragBase::invalid_id;

 exec sql select ry.artikelid, coalesce(ry.menge,0), coalesce(ry.preis,0),
      coalesce(ry.stueck,1), coalesce(ry.preismenge,1), coalesce(ry.rabatt,0),
      coalesce(li.geliefertam,li.datum,date('today')), 
      coalesce(ry.lfrsid,0), coalesce(ry.lfrszeile,0),
	coalesce(l.refauftragid,:INVALID_REFAUFTRAGID)
   into :ARTIKELID, :MENGE, :PREIS, :STUECK, 
         :PREISMENGE, :RABATT, :LIEFERDATUM, :LFRSID, :LFRSZN,
	:AUFTRAGID
   from rechnungentry ry 
   left join lieferscheinentry l on 
	(:INSTANZ,ry.lfrsid,ry.lfrszeile)=
	(l.instanz,l.lfrsid,l.zeile)
   join lieferschein li on (li.instanz,li.lfrsid)=(l.instanz,l.lfrsid)
   where (ry.rngid,ry.zeilennr) = (:RNGID,:ZEILENNR);
 SQLerror::test(__FILELINE__);

    artikel=ArtikelBase(ARTIKELID);
    stueck=STUECK;
    menge=MENGE;
    preis=Preis(PREIS,Rechnung(rechnung.Id()).getWaehrung(),PREISMENGE);
    rabatt=RABATT;
    lieferdatum.from_postgres(LIEFERDATUM);
    lfrs=LieferscheinEntryBase(ppsInstanz::ID(INSTANZ),LFRSID,LFRSZN);
	auftrag=AuftragBase(ppsInstanz::ID(INSTANZ),AUFTRAGID);
}


Preis RechnungEntry::getAuftragsPreis()
{
 return AufEintrag(LfrsEntry().getAufEintragBase()).EPreis();
}



void RechnungEntryBase::deleteEntry(const RechnungEntryBase &re) throw(SQLerror)
{
 exec sql begin declare section;
 int RNGID=re.Id();
 int ZNR=re.Zeile();
 exec sql end declare section;

 exec sql delete from rechnungentry where rngid= :RNGID and 
		zeilennr= :ZNR;
 SQLerror::test(__FILELINE__);
}

void RechnungEntry::setzePreis(const Preis &p) throw (SQLerror)
{  preis=p;
   exec sql begin declare section;
   int RNGID=Id(),ZNR=Zeile();
   float PREISMENGE=p.BezugsMenge().as_float();
   float PREIS=p.Wert().as_float();
   exec sql end declare section;
   
    exec sql update rechnungentry
   	set preismenge=:PREISMENGE, preis=:PREIS
   	where (rngid,zeilennr)= (:RNGID,:ZNR);
   SQLerror::test(__FILELINE__);
}



void RechnungEntryBase::setRgPayOff(int _rngid) throw(SQLerror)
{
 exec sql begin declare section;
 int RNGID=_rngid;
 char *DATUM=0;
 bool BEZAHLT;
 int KUNDENNR;
 exec sql end declare section;

 exec sql select datum,coalesce(bezahlt,false),kundennr into 
	:DATUM,:BEZAHLT,:KUNDENNR 
	from rechnung where rngid=:RNGID;
 SQLerror::test(__FILELINE__);

 rgdata[RNGID]=rng_payoff(DATUM,BEZAHLT,KUNDENNR);

 ECPGfree_auto_mem();
}

const ManuProC::Datum RechnungEntry::RgDatum() const throw(SQLerror)
{
 if(rgdata[rngid].valid==true) return rgdata[rngid].rgdatum;
 setRgPayOff(rngid);
 return rgdata[rngid].rgdatum;
}


const bool RechnungEntry::Bezahlt() const throw(SQLerror)
{
 if(rgdata[rngid].valid==true) return rgdata[rngid].bezahlt;
 setRgPayOff(rngid);
 return rgdata[rngid].bezahlt;
}


cH_Kunde RechnungEntry::Kunde() const
{
 if(rgdata[rngid].valid==true) return rgdata[rngid].kunde;
 setRgPayOff(rngid);
 return rgdata[rngid].kunde;
}


