/* $Id: LieferscheinList_sql.pgcc,v 1.9 2002/05/09 12:46:00 christof Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include <Lieferschein/LieferscheinList.h>
#include <Aux/Transaction.h>

exec sql include sqlca;



LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz) throw(SQLerror)
: instanz(_instanz)
{
 std::string squery = SQuery();
 fuelle(squery);
}

LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz,const sel_KundenId &selparam) throw(SQLerror)
: instanz(_instanz)
{
 std::string squery = SQuery();
 squery += " where (instanz,kundennr) = ("
   +itos(instanz->Id())+","+itos(selparam.id)+")";
 fuelle(squery);
}
LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz,const sel_ArtikelId &selparam) throw(SQLerror)
: instanz(_instanz)
{
 std::string squery = SQuery();
 squery += " where exists (select true from lieferscheinentry ly where 
     ly.lfrsid =  lieferschein.lfrsid and
     ly.instanz =  lieferschein.instanz
     and ly.instanz ="+itos(instanz->Id())+
     " and artikelid ="+itos(selparam.id)+")";
 fuelle(squery);
}

std::string LieferscheinList::SQuery() 
{
 std::string squery = "select lfrsid,kundennr,datum,coalesce(rngid,0),
      coalesce(pakete,0),coalesce(paeckchen,0),
      coalesce(cast(geliefertam as text),''),
      coalesce(dpdliefnr,0) from lieferschein";
 return squery;
}

void LieferscheinList::fuelle(const std::string &squery) throw(SQLerror)
{
 exec sql begin declare section;
 int LFRSID;
 int KDNR;
 int RNGID;
 char DATUM[11];
 int PAECKCHEN, PAKETE;
 char GELIEFERTAM[11];
 int DPDLIEFNR;
 char query[1024];
 exec sql end declare section;

 snprintf(query,sizeof(query),squery.c_str());
 Transaction tr;
 exec sql prepare llist_ein_ from :query ;
 exec sql declare llist_ein cursor for llist_ein_ ;
 exec sql open llist_ein;
 SQLerror::test(__FILELINE__);
 while(true)
   {
    exec sql fetch from llist_ein
		into :LFRSID, :KDNR, :DATUM, :RNGID,
			:PAKETE, :PAECKCHEN,
			:GELIEFERTAM, :DPDLIEFNR;
    SQLerror::test(__FILELINE__,100);
    if(sqlca.sqlcode) break;

    Petig::Datum d,gelam;
    d.from_postgres(DATUM);
    std::string geliefertam = GELIEFERTAM;
    if(geliefertam=="") gelam=Petig::Datum();
    else gelam.from_postgres(GELIEFERTAM);
    sellist.push_back(new Lieferschein(LieferscheinBase(instanz,LFRSID),d,
    			KDNR,RNGID,PAECKCHEN,PAKETE,gelam,DPDLIEFNR) );
   } 
 tr.close();
}


#ifdef MABELLA_EXTENSIONS

LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz,const sel_DPDLNr &sp) throw(SQLerror)
: instanz(_instanz)
{
 std::string squery = SQuery();
 squery += " where dpdliefnr = "+itos(sp.dpdlnr)+" and instanz ="+itos(instanz->Id());
 fuelle(squery);
}

LieferscheinList::LieferscheinList(const cH_ppsInstanz _instanz,const sel_GeliefStat &sp) throw(SQLerror)
: instanz(_instanz)
{
 std::string squery = SQuery();
 if(sp.geliefert)
	 squery += " where dpdliefnr is not null";
 else
	 squery += " where dpdliefnr is null";
 squery += " and instanz = "+itos(instanz->Id());

 fuelle(squery);
}


// caller needs to roll back if transaction is already open and false is given
// back
bool LieferscheinList::setDPDData(int dpdlnr) throw(SQLerror)
{
 Transaction tr;
 exec sql lock lieferschein in share row exclusive mode;
 SQLerror::test(__FILELINE__"lock");

 try{
   for(std::vector<cH_Lieferschein>::iterator i = sellist.begin();
	i!=sellist.end(); ++i)
       {(*i)->setDPDlnr(dpdlnr);
        (*i)->setDPDDatum();
       }
    }         

 catch(SQLerror &e)
   {tr.rollback();
    return false;
   }
 
 tr.commit();
 return true;
}


#endif
