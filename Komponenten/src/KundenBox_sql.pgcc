// $Id: KundenBox_sql.pgcc,v 1.1 2002/04/11 11:58:56 christof Exp $
/*  libKomponenten: GUI components for ManuProC's libcommon++
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include "KundenBox.hh"
exec sql include sqlca;


void KundenBox::setLabel(std::string nr,std::string name)
{
 label_kdnr->set_text(nr);
 label_nam->set_text(name);
}


void KundenBox::Kundennr_activate()
{  // search Name and activate
   set_value(strtol(kundennr->get_text().c_str(),0,10));
   activate();
}

void KundenBox::Kundennr_search(gboolean *_continue, GtkSCContext newsearch)
{  exec sql begin declare section;
   char nummer[16];
   exec sql end declare section;
   
   try
   {  switch(newsearch)
      {  case GTK_SEARCH_OPEN:
            snprintf(nummer,sizeof nummer,"%s%%",kundennr->get_text().c_str());
      	    exec sql declare kubo_kdnr cursor for
      	    	select kundennr from kunden where text(kundennr) like :nummer 
      	    	order by kundennr;
      	    tr.open();
      	    exec sql open kubo_kdnr;
      	    SQLerror::test(__FILELINE__);
      	    // fall through
      	 case GTK_SEARCH_FETCH:
      	    exec sql fetch kubo_kdnr into :nummer;
      	    SQLerror::test(__FILELINE__,100);
      	    if (sqlca.sqlcode) return;
      	    kundennr->add_item(nummer);
      	    *_continue=true;
      	    break;
      	 case GTK_SEARCH_CLOSE:
      	    exec sql close kubo_kdnr;
      	    SQLerror::test(__FILELINE__);
      	    tr.commit();
      	    break;
      }
   }
   catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
}

void KundenBox::Name_activate()
{  id=kundenname->Content();
   char buf[30];
   snprintf(buf,sizeof buf,"%d",id);
   kundennr->set_text(buf);
   activate();
}

void KundenBox::Name_search(gboolean *_continue, GtkSCContext newsearch)
{  exec sql begin declare section;
   char name[80];
   int nummer;
   char query[1024];
   exec sql end declare section;
   
   try
   {  
     std::string squery;
     switch(newsearch)
      {  case GTK_SEARCH_OPEN:
            tr2.open();

             if(einschraenkung_b)
               squery = "select DISTINCT coalesce(sortname,k.firma), k.kundennr from 
                  extbezschema e join kunden k on (e.extartbezid=k.kundennr)
                  where coalesce(sortname,k.firma) ilike '"+kundenname->get_text()+"%'";
             else
               squery = "select coalesce(sortname,firma),kundennr from kunden "
               	  "where coalesce(sortname,firma) ilike '"+
                  kundenname->get_text() +"%' order by firma";
             strncpy(query,squery.c_str(),sizeof(query));
             exec sql prepare kubo_name_ from :query;
      	    exec sql declare kubo_name cursor for kubo_name_;

      	    exec sql open kubo_name;
      	    SQLerror::test(__FILELINE__);
      	    // fall through
      	 case GTK_SEARCH_FETCH:
      	    exec sql fetch kubo_name into :name, :nummer;
      	    SQLerror::test(__FILELINE__,100);
      	    if (sqlca.sqlcode) return;
      	    kundenname->add_item(name,nummer);
      	    *_continue=true;
      	    break;
      	 case GTK_SEARCH_CLOSE:
      	    exec sql close kubo_name;
      	    SQLerror::test(__FILELINE__);
      	    tr2.commit();
      	    break;
      }
   }
   catch (SQLerror &e)
   {  std::cerr << e << '\n';
   }
}

gint KundenBox::try_grab_focus(GtkWidget *w,gpointer gp)
{  KundenBox *this2((KundenBox*)gp);
   assert(Gtk::Table::isA(this2)); // very weak check
   this2->kundennr->grab_focus();
   return true;
}

KundenBox::KundenBox() : id(Kunde::none_id), tr("",false), tr2("",false),
   einschraenkung_b(false)
{
 // redirect our grab_focus
 gtk_signal_connect(GTK_OBJECT(gtkobj()), "grab_focus",
                 GTK_SIGNAL_FUNC (&try_grab_focus),(gpointer)this);
}

void KundenBox::set_value(const cH_Kunde &k)
{
   kundennr->set_text(itos(k->Id()));
   kundenname->setContent(k->getName(),k->Id());
   id=k->Id();
}

void KundenBox::reset()
{  kundennr->reset();
   kundenname->reset();
   id=Kunde::none_id;
}

void KundenBox::Einschraenken_b(bool an)
{  
   einschraenkung_b=an;   
}
