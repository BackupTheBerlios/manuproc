/* $Id: Lieferschein_sql.pgcc,v 1.35 2003/07/03 06:47:10 christof Exp $ */
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#include"Lieferschein.h"
#include<Misc/Transaction.h>
exec sql include sqlca;
#include <Misc/TraceNV.h>
#include <Aux/FetchIStream.h>

Lieferschein::Lieferschein(const cH_ppsInstanz& _instanz,int lid) throw(SQLerror)
: LieferscheinBase(_instanz,lid),kunde(Kunde::default_id), notiz_valid(false)
{
ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,_instanz,NV("LieferscheinId",lid)); 
try{
 exec sql begin declare section;
  int INSTANZ=Instanz()->Id();
  int LFRSID=Id();
  int KDNR;
  int RNGID;
  char DATUM[11];
  char GELIEFERTAM[21];
  int IGELIEFERTAM;
  int INVALID_ENTITY;
 exec sql end declare section;
 INVALID_ENTITY=ManuProcEntity<>::none_id;
#ifdef DPD_LIEFERSCHEINE
 exec sql begin declare section;
  int DPDLIEFNR;
  int PAECKCHEN, PAKETE;
  double NETTO_KG,BRUTTO_KG;
  int VERKNR;
  int NONEID;
 exec sql end declare section;

 NONEID=Kunde::none_id;
#endif

#ifdef DPD_LIEFERSCHEINE
 exec sql select kundennr, date(datum), coalesce(rngid,:INVALID_ENTITY),
		coalesce(paeckchen,0),
		coalesce(pakete,0),date(coalesce(geliefertam,datum)),
		coalesce(dpdliefnr,:INVALID_ENTITY),
      coalesce(brutto_kg,0), coalesce(netto_kg,0), 
	coalesce(verknr,:NONEID)
		into :KDNR, :DATUM, :RNGID, :PAECKCHEN, :PAKETE,
		:GELIEFERTAM:IGELIEFERTAM, :DPDLIEFNR,
      :BRUTTO_KG, :NETTO_KG, :VERKNR
 	from lieferschein where (instanz,lfrsid) = (:INSTANZ,:LFRSID);
#else
 exec sql select kundennr, date(datum), coalesce(rngid,:INVALID_ENTITY),
		date(coalesce(geliefertam,datum))
		into :KDNR, :DATUM, :RNGID, :GELIEFERTAM:IGELIEFERTAM
 	from lieferschein where (instanz,lfrsid) = (:INSTANZ,:LFRSID);
#endif
 SQLerror::test(__FILELINE__);
 
 kunde=cH_Kunde(KDNR);
 rngid=RNGID;

 lsdatum.from_postgres(DATUM);	
 if(IGELIEFERTAM) geliefertam.from_postgres(DATUM) ;  //ManuProC::Datum();		 
 else geliefertam.from_postgres(GELIEFERTAM);		 
#ifdef DPD_LIEFERSCHEINE
 dpdliefnr=DPDLIEFNR;
 paeckchen=PAECKCHEN;
 pakete=PAKETE;
 brutto_kg=BRUTTO_KG;
 netto_kg=NETTO_KG;
 verknr=VERKNR;
#endif

 }catch (SQLerror &e) {std::cerr <<e<<'\n';}
}

Lieferschein::Lieferschein(const cH_ppsInstanz& _instanz,cH_Kunde k,int jahr) throw(SQLerror)
	: LieferscheinBase(_instanz,none_id), lsdatum(ManuProC::Datum::today()),
      kunde(k),rngid(ManuProcEntity<>::none_id)
#ifdef DPD_LIEFERSCHEINE
 	,dpdliefnr(-1) ,paeckchen(0),pakete(0)
#endif
 ,notiz_valid(false)
,verknr(Kunde::none_id)
{
ManuProC::Trace _t(AuftragBase::trace_channel, __FUNCTION__,_instanz,NV("Kunde",k),NV("Jahr",jahr)); 

 exec sql begin declare section;
  int INSTANZ=_instanz->Id();
  int LFRSID;
  int KUNDENNR;
  int JAHR=jahr;
 exec sql end declare section;

 if (!JAHR)
 {  exec sql select to_char(now(),'yy') into :JAHR;
    SQLerror::test(__FILELINE__);
 }
 else JAHR%=100;

 KUNDENNR=k->Id();
 Transaction tr;
  
 exec sql lock table lieferschein in exclusive mode;
 
 exec sql select coalesce(max(lfrsid)+1,:JAHR*10000)
 		into :LFRSID
 		from lieferschein where instanz=:INSTANZ and lfrsid 
 		between :JAHR*10000 and (:JAHR+1)*10000-1;
 SQLerror::test(__FILELINE__":Lieferschein: select next lfrsid");
 
 exec sql insert into lieferschein (instanz,lfrsid, kundennr)
 	values (:INSTANZ,:LFRSID, :KUNDENNR);
 SQLerror::test(__FILELINE__":Lieferschein: insert into lieferschein");	

#ifdef MABELLA_EXTENSIONS
 exec sql update lieferschein set notiz=(select lief_notiz from kunden
        where kundennr=:KUNDENNR) where lfrsid=:LFRSID;
 SQLerror::test(__FILELINE__":Lieferschein: update lieferschein");
#endif

 lieferid=LFRSID; 
 instanz=_instanz; 

 rngid=ManuProcEntity<>::none_id;

 tr.commit();
}

void Lieferschein::setDatum(const ManuProC::Datum &d) throw(SQLerror)
{  
 exec sql begin declare section;
 int LFRSID=Id();
 int INSTANZ=Instanz()->Id();
 char DATUM[20];
 exec sql end declare section;
 
 d.write_postgres(DATUM,sizeof DATUM);
 exec sql update lieferschein set geliefertam=:DATUM where 
 	(instanz,lfrsid) = (:INSTANZ,:LFRSID) ;
 SQLerror::test(__FILELINE__);
}

