/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 1998-2000 Adolf Petig GmbH & Co. KG, written by Jacek Jakubowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


#include "Rechnung.h"
#include <Misc/Transaction.h>
#include <Misc/FetchIStream.h>
#include <Misc/Trace.h>
#include<math.h>
#include <Lieferschein/LieferscheinVoll.h>
#include <Artikel/Artikelpreis.h>
exec sql include sqlca;


Rechnung::Rechnung(RechnungBase::ID rid) throw(SQLerror)
: RechnungBase(rid), kunde(Kunde::default_id), 
   zahlungsart(Zahlungsart::none_id),notiz_valid(false)
{
 if(rid==none_id) return;

 exec sql begin declare section;
   int RNGID = rid;
   int KDNR;
   char RNGART[1];
   char DATUM[21];
   int ZAHLART;
   char ZAHLZIEL[11];
   int IZAHLZIEL;
   int WAEHRUNG;
   float KURS=0;
   float RABATT;
   bool BEZAHLT;
   bool ENTSORGUNG=false;
   int EINZUG_REFNR=0;
 exec sql end declare section;

 Transaction tr;

 #ifdef MABELLA_EXTENSIONS
 exec sql select r.kundennr, date(r.datum), r.rngart, 
         coalesce(zahlart,-1), zahlziel, 
 			coalesce(waehrung,1), coalesce(rabatt,0), bezahlt,
			coalesce(entsorgung,false),
			coalesce(kurs,1),
			coalesce(einzug_refnr,0)::int
		into :KDNR, :DATUM, :RNGART, :ZAHLART, :ZAHLZIEL:IZAHLZIEL,
		   :WAEHRUNG, :RABATT, :BEZAHLT, :ENTSORGUNG,
		   :KURS, :EINZUG_REFNR
 	from rechnung r where r.rngid = :RNGID ;
 #else
 exec sql select r.kundennr, date(r.datum), r.rngart, 
         coalesce(zahlart,-1), zahlziel, 
 			coalesce(waehrung,1), coalesce(rabatt,0), bezahlt
		into :KDNR, :DATUM, :RNGART, :ZAHLART, :ZAHLZIEL:IZAHLZIEL,
		   :WAEHRUNG, :RABATT, :BEZAHLT
 	from rechnung r where r.rngid = :RNGID ;
 #endif
 SQLerror::test(__FILELINE__);

 kunde=cH_Kunde(KDNR);
 rngart = (RngArt)RNGART[0];
 zahlungsart = cH_Zahlungsart(ZAHLART);
 waehrung=cP_Waehrung(Waehrung::ID(WAEHRUNG));
 kurs=KURS;
 rabatt=RABATT;
 rgdatum=ManuProC::Datum(DATUM);
 bezahlt=BEZAHLT;
 zahlziel= IZAHLZIEL ? ManuProC::Datum() : ManuProC::Datum(ZAHLZIEL);
 entsorgung=ENTSORGUNG;
 einzug_refnr=EINZUG_REFNR;
}

Rechnung::Rechnung(const cH_Kunde k,int jahr) throw(SQLerror)
	: RechnungBase(none_id), kunde(k),rabatt(0),
   zahlungsart(Zahlungsart::none_id),notiz_valid(false)
{
 exec sql begin declare section;
 int RNGID;
 int KUNDENNR;
 int JAHR=jahr;
 int ZAHLUNGSART;
 int WAEHRUNG;
 exec sql end declare section;
 
 if (!JAHR)
 {  exec sql select to_char(now(),'yy') into :JAHR;
    SQLerror::test(__FILELINE__);
 }
 else JAHR%=100;

 KUNDENNR=k->Id();

 cH_Kunde krng(k->Rngan());

 if(KUNDENNR != krng->Id())
   {
    ZAHLUNGSART=krng->zahlungsart()->Id();
    WAEHRUNG=krng->getWaehrung()->Id();
   }
 else
   {
    ZAHLUNGSART=k->zahlungsart()->Id();
    WAEHRUNG=k->getWaehrung()->Id();
   }

 Transaction tr;
  
 exec sql lock table lieferschein in exclusive mode;
 
 exec sql select coalesce(max(rngid)+1,:JAHR*10000)
 		into :RNGID
 		from rechnung where rngid 
 		between :JAHR*10000 and (:JAHR+1)*10000-1;
 SQLerror::test(__FILELINE__":Rechnung: select next rngid");
 
 exec sql insert into rechnung (rngid, kundennr,zahlart,waehrung)
 	values (:RNGID, :KUNDENNR,:ZAHLUNGSART,:WAEHRUNG);
 SQLerror::test(__FILELINE__":Rechnung: insert into rechnung");	

#ifdef MABELLA_EXTENSIONS
 exec sql begin declare section;
 bool ENTSORGUNG=krng->entsorgung();
// int VERKNR=k->VerkNr();
// int IVERKNR=0;
 float KURS;
 exec sql end declare section;

 exec sql select 1/(coalesce(fkt,1)) into :KURS from waehrung where 
	wid= :WAEHRUNG;
 SQLerror::test(__FILELINE__":Rechnung: select kurs from waehrung");	

 kurs=KURS;

// if(VERKNR==Kunde::none_id) IVERKNR=-1;
 exec sql update rechnung set entsorgung=:ENTSORGUNG,
/*	verknr=:VERKNR:IVERKNR,*/
	kurs=:KURS
	where
	rngid=:RNGID;
 SQLerror::test(__FILELINE__":Rechnung: update rechnung");	

 exec sql update rechnung set notiz=(select rng_notiz from kunden
        where kundennr=:KUNDENNR) where rngid=:RNGID;
 SQLerror::test(__FILELINE__":Rechnung: update rechnung");
#endif

 rngid=RNGID;
 rgdatum=ManuProC::Datum::today();

 tr.commit();
}

void Rechnung::setze_Zahlziel(ManuProC::Datum zziel) throw(SQLerror)
{
 Query("update rechnung set zahlziel=? where rngid=?")
 	<< zziel << Id();
 SQLerror::test(__FILELINE__);
 zahlziel=zziel;
}


void Rechnung::setze_Datum(ManuProC::Datum rgdatum) throw(SQLerror)
{
 Query("update rechnung set datum=? where rngid=?")
 	<< rgdatum << Id();
 SQLerror::test(__FILELINE__);
 // in Struktur nicht ändern ???
}


void Rechnung::setze_Zahlungsart(cH_Zahlungsart z) throw(SQLerror)
{
 Query("update rechnung set zahlart=? where rngid=?")
 	<< z->Id() << Id();
 SQLerror::test(__FILELINE__);
 // in Struktur nicht ändern ???
}


void Rechnung::deleteLieferschein(const LieferscheinBase &lfrs) throw(SQLerror)
{Transaction tr;
 
 Query("delete from rechnungentry where lfrsid=? and rngid=?")
 	<< lfrs.Id() << Id(); 
 Query("update lieferschein set rngid=null where lfrsid=?")
 	<< lfrs.Id();
 SQLerror::test(__FILELINE__);
 tr.commit();
 
}

#include <sys/types.h>
#include <unistd.h>

void Rechnung::addLieferschein(const LieferscheinBase &lfrs) throw(SQLerror)
{
 int MAXZNR,MINZNR;

 Transaction tr;

 Query("select min(zeile) from lieferscheinentry where (instanz,lfrsid)=(?,?)")
 	<< lfrs.Instanz()->Id() << lfrs.Id()
 	>> FetchIStream::MapNull(MINZNR);
 Query("lock table rechnungentry in exclusive mode"); 
 Query("select max(zeilennr) from rechnungentry where rngid=?")
 	<< Id()
 	>> FetchIStream::MapNull(MAXZNR);
 MAXZNR++;
 
/*
 exec sql insert into rechnungentry 
 	(rngid,zeilennr, artikelid, lfrsid,lfrszeile, stueck,menge,
 		preis,rabatt,preismenge,provsatz,ek_preis)
 	(select :RNGID,l.zeile - :MINZNR + :MAXZNR,
 		l.artikelid, l.lfrsid,l.zeile, l.stueck,l.menge,
 		coalesce(ae.preis,0),coalesce(ae.rabatt,0),
 		coalesce(ae.preismenge,1),ae.provsatz,
		coalesce(p.preis/p.preismenge,0)
 	 from lieferscheinentry l
 	 	left join auftragentry ae 
 	 	on (l.instanz,l.refauftragid,l.refzeilennr)
 	 		= (ae.instanz,ae.auftragid,ae.zeilennr)
		left join artikelpreise p
		on (p.artikelid=ae.artikelid and p.kundennr=99999)
 	 where (l.instanz,l.lfrsid)=(:INSTANZ,:LFRSID)
 	 order by l.zeile);
*/

#if 0 // direkt einfügen
 Query("insert into rechnungentry "
 	"(rngid,zeilennr, artikelid, lfrsid,lfrszeile, stueck,menge,"
 		"preis,rabatt,preismenge,provsatz,ek_preis) "
 	"(select ?,l.zeile+?,"
 		"l.artikelid, l.lfrsid,l.zeile, l.stueck,l.menge,"
 		"coalesce(ae.preis,0),coalesce(ae.rabatt,0),"
 		"coalesce(ae.preismenge,1),ae.provsatz,"
		"coalesce(p.preis/p.preismenge,0) "
 	 "from lieferscheinentry l "
 	 	"left join auftragentry ae "
 	 	"on (l.instanz,l.refauftragid,l.refzeilennr)"
 	 		"= (ae.instanz,ae.auftragid,ae.zeilennr) "
		"left join artikelpreise p "
		"on (p.artikelid=ae.artikelid and p.kundennr=99999) "
 	 "where (l.instanz,l.lfrsid)=(?,?) "
 	 "order by l.zeile)")
 	 << Id() << (MAXZNR-MINZNR)
 	 << lfrs.Instanz()->Id() << lfrs.Id();
 SQLerror::test(__FILELINE__); 
#else // einfügen unter Programmkontrolle
 LieferscheinVoll lv(lfrs.Instanz(),lfrs.Id());
 
 unsigned lineno=MAXZNR;
 for (LieferscheinVoll::const_iterator i=lv.begin();i!=lv.end();++i)
 {  Preis p,ek_preis;
    AufEintragBase::rabatt_t rabatt;
    fixedpoint<2> provsatz;
    if (!i->getZusatzInfos().empty())
    {  if (i->getZusatzInfos()[0].aeb.valid())
       {  AufEintrag ae(i->getZusatzInfos()[0].aeb);
          p=ae.EPreis(false);
          rabatt=ae.Rabatt();
          provsatz=ae.ProvSatz();
       }
    }
    ek_preis=Artikelpreis(PreisListe::ID(99999),i->Artikel(),
    		AuftragBase::Gesamtmenge(i->Stueck(),i->Menge()).as_int());
    Query("insert into rechnungentry "
 	"(rngid,zeilennr, artikelid, lfrsid,lfrszeile, stueck,menge,"
 		"preis,rabatt,preismenge, provsatz,ek_preis) "
 	"VALUES (?,?, ?, ?,?, ?,?,"
 		"?,?,?, ?,?)")
 	<< Id() << lineno << i->Artikel() << lfrs.Id() << i->ZNr() 
 				<< i->Stueck() << i->Menge()
 	<< p.Wert(getWaehrung(),p.BezugsMenge()) 
	 	<< rabatt << p.BezugsMenge()
	 	<< provsatz 
	 	<< Query::NullIf(ek_preis.Wert(Waehrung::default_id,
						p.BezugsMenge()));
    lineno++;
 }
#endif 

 Query("update lieferschein set rngid=? "
 	"where (instanz,lfrsid)=(?,?)")
 	<< Id()
 	<< lfrs.Instanz()->Id() << lfrs.Id();
 SQLerror::test(__FILELINE__);
 tr.commit();
}


void Rechnung::setzeWaehrung(const cP_Waehrung &w) throw(SQLerror)
{  Query("update rechnung set waehrung=? where rngid=?")
   	<< w->Id() << Id();
   SQLerror::test(__FILELINE__);
   waehrung=w;
}

void Rechnung::setze_Rabatt(rabatt_t r) throw(SQLerror)
{  Query("update rechnung set rabatt=? where rngid=?")
	<< r << Id();
   SQLerror::test(__FILELINE__);
   rabatt=r;
}

// nur Warenwert, ohne MwSt., ggf. rabattiert
Rechnung::geldbetrag_t Rechnung::Betrag(bool brutto) const throw(SQLerror)
{
 int ROUND=ManuProC::Precision::GeldBetrag; //Rundungstellen
 int HELPFKT=(int)pow(10.0,ROUND);
 Preis::geldbetrag_out betrag; // Rückgabe immer mit zwei Stellen

 if(brutto)
   {
    Query q("select  sum(round(preis* "
	       "((coalesce(menge,1)*stueck) / "
		" (coalesce(preismenge,1)),2)) "
	    " from rechnungentry where rngid = ?");
    q << Id();
    SQLerror::test(__FILELINE__);

    q >> FetchIStream::MapNull(betrag,0.0);   
   }
 else
   {Query q("select  sum(round((round(preis*((100-rabatt)/100), case "
	" when (preis*?)%10!=0 then ? else 2 end))*"
	"((coalesce(menge,1)*stueck)) / "
	" (coalesce(preismenge,1)),2))" 
	" from rechnungentry where rngid = ?");
    q << HELPFKT << ROUND << Id(); 
    SQLerror::test(__FILELINE__);
    q >> FetchIStream::MapNull(betrag,0.0);   

    float rab = 1 - .01*rabatt.as_float();
    betrag = betrag.as_float() * rab; 
   }

 return betrag;
}




void RechnungBase::setEingezogen(int refnr, bool bezahlt) throw(SQLerror)
{Query("update rechnung set bezahlt=?, einzug_refnr=? where rngid=?")
 	<< bezahlt << refnr << rngid;
 SQLerror::test(__FILELINE__);
   // member nicht ändern?
}

void Rechnung::setBezahlt(bool _bezahlt) throw(SQLerror)
{Query("update rechnung set bezahlt=? where rngid=?")
 	<< _bezahlt << rngid;
 SQLerror::test(__FILELINE__);
 bezahlt=_bezahlt;
}

const std::string Rechnung::Notiz() const throw(SQLerror)
{
 ManuProC::Trace _t(trace_channel, __FUNCTION__,Id());
 if(notiz_valid) return notiz;

 Query("select notiz from rechnung where rngid=?")
 	<< Id()
 	>> FetchIStream::MapNull(notiz);
 notiz_valid=true;
 return notiz;
}

void Rechnung::Notiz(const std::string n) throw(SQLerror)
{
 ManuProC::Trace _t(trace_channel, __FUNCTION__,Id(),n);
 Query("update rechnung set notiz=? where rngid=?")
 	<< Query::NullIf(notiz) << Id();
 SQLerror::test(__FILELINE__);
 notiz=n;
}


int Rechnung::size() const throw(SQLerror)
{
 int ret;
 Query("select count(*) from rechnungentry where rngid=?")
	<< Id() >> ret;
 return ret;
}

