// $Id: Einheiten.pgcc,v 1.7 2001/12/23 21:42:15 christof Exp $
/*  libcommonc++: ManuProC's main OO library
 *  Copyright (C) 2001 Adolf Petig GmbH & Co. KG, written by Christof Petig
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

exec sql include sqlca;
#include <Artikel/Einheiten.h>
#include <Artikel/ArtikelStamm.h>

// furs erste sollte das funktionieren .. spater per Datenbank CP(?)
// ... aber dann bitte mit cache MAT
Einheit::Einheit(const ArtikelBase &ab) throw(SQLerror)
{  *this=ArtikelStamm(ab).getEinheit();
}

// aus StueckEinheit, MengenEinheit erzeugen
Einheit::operator std::string() const
{  if (einh==Meter) return "m";
   if (einh==kg) return "kg";
   if (einh==Fdkm) return "Fd*km";
   if (einh==Stueck) return "St.";
   if (einh==DM) return "DM";
   if (einh==Euro) return "Euro";
   return "";
}

std::string Einheit::TeX() const
{  if (einh==Fdkm) return "Fd$\\times$km";
   if (einh==Euro) return "\\euro{}";
   return std::string(*this);
}

std::string Einheit::StueckEinheit() const
{  if (einh==Fdkm) return "Fd";
   if (einh==Stueck) return "St.";
   return "";
}

std::string Einheit::MengenEinheit() const
{  if (einh==Meter) return "m";
   if (einh==kg) return "kg";
   if (einh==Fdkm) return "km";
   if (einh==DM) return "DM";
   if (einh==Euro) return "Euro";
   return "";
}
