// generated 2004/4/27 15:45:23 CEST by jacek@jaceksdell.(none)
// using glademm V2.0.0b
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/jacek/cvs/manuproc/ManuProC_Agent/mpc_agent.glade
// for gtk 2.2.4 and gtkmm 2.2.8
//
// Please modify the corresponding derived classes in ./src/mpc_agent.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include "mpc_agent_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/button.h>
#include <gtkmm/image.h>
#include <gtkmm/stockid.h>
#include <gtkmm/toolbar.h>
#include <gtkmm/box.h>
#include <gtkmm/label.h>
#include <gtkmm/frame.h>
#include <gtkmm/entry.h>
#include <gtkmm/table.h>
#include <gtkmm/spinbutton.h>
#include <gtkmm/adjustment.h>

mpc_agent_glade::mpc_agent_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  
   
   Gtk::Window *mpc_agent = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::Toolbar *toolbar1 = Gtk::manage(new class Gtk::Toolbar());
   kunde = new class EingabeBox(3);
   
   Gtk::Toolbar *toolbar3 = Gtk::manage(new class Gtk::Toolbar());
   Gtk::HBox *hbox3 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Label *label3 = Gtk::manage(new class Gtk::Label("customer"));
   Gtk::Frame *frame2 = Gtk::manage(new class Gtk::Frame());
   Gtk::HBox *hbox2 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::Entry *orderid = Gtk::manage(new class Gtk::Entry());
   label_orderdate = Gtk::manage(new class Gtk::Label("dated"));
   
   Gtk::Label *label6 = Gtk::manage(new class Gtk::Label("order ID"));
   Gtk::Toolbar *toolbar4 = Gtk::manage(new class Gtk::Toolbar());
   Gtk::Table *table1 = Gtk::manage(new class Gtk::Table(2, 2, false));
   Gtk::Label *label8 = Gtk::manage(new class Gtk::Label("order"));
   Gtk::Frame *frame5 = Gtk::manage(new class Gtk::Frame());
   Gtk::HBox *hbox4 = Gtk::manage(new class Gtk::HBox(false, 0));
   artikel = new class EingabeBox(3);
   
   Gtk::Label *label4 = Gtk::manage(new class Gtk::Label("article"));
   Gtk::Frame *frame3 = Gtk::manage(new class Gtk::Frame());
   Gtk::Adjustment *spinbutton1_adj = Gtk::manage(new class Gtk::Adjustment(0, 0, 1000, 1, 10, 10));
   Gtk::SpinButton *spinbutton1 = Gtk::manage(new class Gtk::SpinButton(*spinbutton1_adj, 1, 0));
   Gtk::Label *label2 = Gtk::manage(new class Gtk::Label("amount"));
   Gtk::Frame *frame1 = Gtk::manage(new class Gtk::Frame());
   Gtk::Toolbar *toolbar2 = Gtk::manage(new class Gtk::Toolbar());
   Gtk::HBox *hbox1 = Gtk::manage(new class Gtk::HBox(false, 0));
   order = new class SimpleTree(4);
   
   Gtk::VBox *vbox2 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label5 = Gtk::manage(new class Gtk::Label("order entries"));
   Gtk::Frame *frame4 = Gtk::manage(new class Gtk::Frame());
   Gtk::VBox *vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("quit", *manage(new Gtk::Image(Gtk::StockID("gtk-quit"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *beenden = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("new order", *manage(new Gtk::Image(Gtk::StockID("gtk-new"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *neu = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("send order", *manage(new Gtk::Image(Gtk::StockID("gtk-jump-to"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *senden = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar1->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("clear", *manage(new Gtk::Image(Gtk::StockID("gtk-clear"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *button1 = static_cast<Gtk::Button *>(toolbar1->tools().back().get_widget());
   
   toolbar3->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("search", *manage(new Gtk::Image(Gtk::StockID("gtk-find"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *customer_search = static_cast<Gtk::Button *>(toolbar3->tools().back().get_widget());
   
   toolbar4->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("search", *manage(new Gtk::Image(Gtk::StockID("gtk-find"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *order_search = static_cast<Gtk::Button *>(toolbar4->tools().back().get_widget());
   
   toolbar2->tools().push_back(Gtk::Toolbar_Helpers::ButtonElem("OK", *manage(new Gtk::Image(Gtk::StockID("gtk-ok"), Gtk::ICON_SIZE_LARGE_TOOLBAR)), Gtk::Toolbar_Helpers::Callback0()));
   Gtk::Button *artikel_ok = static_cast<Gtk::Button *>(toolbar2->tools().back().get_widget());
   beenden->set_size_request(60,-1);
   toolbar1->set_tooltips(true);
   toolbar3->set_tooltips(true);
   hbox3->pack_start(*kunde);
   hbox3->pack_start(*toolbar3, Gtk::PACK_SHRINK, 0);
   label3->set_alignment(0.5,0.5);
   label3->set_padding(0,0);
   label3->set_justify(Gtk::JUSTIFY_LEFT);
   label3->set_line_wrap(false);
   label3->set_use_markup(false);
   label3->set_selectable(false);
   frame2->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame2->set_label_align(0,0.5);
   frame2->add(*hbox3);
   frame2->set_label_widget(*label3);
   hbox2->pack_start(*frame2, Gtk::PACK_SHRINK, 0);
   orderid->set_flags(Gtk::CAN_FOCUS);
   orderid->set_visibility(true);
   orderid->set_editable(true);
   orderid->set_max_length(0);
   orderid->set_text("");
   orderid->set_has_frame(true);
   orderid->set_activates_default(false);
   label_orderdate->set_alignment(0,0.5);
   label_orderdate->set_padding(5,0);
   label_orderdate->set_justify(Gtk::JUSTIFY_LEFT);
   label_orderdate->set_line_wrap(false);
   label_orderdate->set_use_markup(false);
   label_orderdate->set_selectable(false);
   label6->set_alignment(0,0.5);
   label6->set_padding(5,0);
   label6->set_justify(Gtk::JUSTIFY_LEFT);
   label6->set_line_wrap(false);
   label6->set_use_markup(false);
   label6->set_selectable(false);
   toolbar4->set_tooltips(true);
   table1->set_row_spacings(0);
   table1->set_col_spacings(0);
   table1->attach(*orderid, 1, 2, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table1->attach(*label_orderdate, 2, 3, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table1->attach(*label6, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table1->attach(*toolbar4, 3, 4, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   label8->set_alignment(0.5,0.5);
   label8->set_padding(0,0);
   label8->set_justify(Gtk::JUSTIFY_LEFT);
   label8->set_line_wrap(false);
   label8->set_use_markup(false);
   label8->set_selectable(false);
   frame5->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame5->set_label_align(0,0.5);
   frame5->add(*table1);
   frame5->set_label_widget(*label8);
   hbox4->pack_start(*frame5, Gtk::PACK_SHRINK, 0);
   label4->set_alignment(0.5,0.5);
   label4->set_padding(0,0);
   label4->set_justify(Gtk::JUSTIFY_LEFT);
   label4->set_line_wrap(false);
   label4->set_use_markup(false);
   label4->set_selectable(false);
   frame3->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame3->set_label_align(0,0.5);
   frame3->add(*artikel);
   frame3->set_label_widget(*label4);
   spinbutton1->set_flags(Gtk::CAN_FOCUS);
   spinbutton1->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton1->set_numeric(false);
   spinbutton1->set_digits(0);
   spinbutton1->set_wrap(false);
   label2->set_alignment(0.5,0.5);
   label2->set_padding(0,0);
   label2->set_justify(Gtk::JUSTIFY_LEFT);
   label2->set_line_wrap(false);
   label2->set_use_markup(false);
   label2->set_selectable(false);
   frame1->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame1->set_label_align(0,0.5);
   frame1->add(*spinbutton1);
   frame1->set_label_widget(*label2);
   artikel_ok->set_size_request(60,-1);
   toolbar2->set_tooltips(true);
   hbox1->pack_start(*frame3, Gtk::PACK_SHRINK, 0);
   hbox1->pack_start(*frame1, Gtk::PACK_SHRINK, 0);
   hbox1->pack_start(*toolbar2, Gtk::PACK_SHRINK, 0);
   vbox2->pack_start(*order);
   label5->set_alignment(0.5,0.5);
   label5->set_padding(0,0);
   label5->set_justify(Gtk::JUSTIFY_LEFT);
   label5->set_line_wrap(false);
   label5->set_use_markup(false);
   label5->set_selectable(false);
   frame4->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   frame4->set_label_align(0,0.5);
   frame4->add(*vbox2);
   frame4->set_label_widget(*label5);
   vbox1->pack_start(*toolbar1, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*hbox2, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*hbox4, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*hbox1, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*frame4);
   mpc_agent->set_title("MPC Agent");
   mpc_agent->set_default_size(800,600);
   mpc_agent->set_modal(false);
   mpc_agent->property_window_position().set_value(Gtk::WIN_POS_NONE);
   mpc_agent->set_resizable(true);
   mpc_agent->property_destroy_with_parent().set_value(true);
   mpc_agent->add(*vbox1);
   toolbar1->show();
   kunde->show();
   toolbar3->show();
   hbox3->show();
   label3->show();
   frame2->show();
   hbox2->show();
   orderid->show();
   label_orderdate->show();
   label6->show();
   toolbar4->show();
   table1->show();
   label8->show();
   frame5->show();
   hbox4->show();
   artikel->show();
   label4->show();
   frame3->show();
   spinbutton1->show();
   label2->show();
   frame1->show();
   toolbar2->show();
   hbox1->show();
   order->show();
   vbox2->show();
   label5->show();
   frame4->show();
   vbox1->show();
   mpc_agent->show();
   beenden->signal_clicked().connect(SigC::slot(*this, &mpc_agent_glade::on_beenden_activate));
   kunde->signal_activate().connect(SigC::slot(*this, &mpc_agent_glade::on_kunde_activate));
}

mpc_agent_glade::~mpc_agent_glade()
{  delete kunde;
   delete artikel;
   delete order;
   delete gmm_data;
}
